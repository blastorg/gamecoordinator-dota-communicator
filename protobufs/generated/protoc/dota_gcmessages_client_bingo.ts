// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: dota_gcmessages_client_bingo.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export interface CMsgBingoSquare {
  statId?: number | undefined;
  statThreshold?: number | undefined;
}

export interface CMsgBingoUserData {
  squares: CMsgBingoSquare[];
}

export interface CMsgClientToGCBingoGetUserData {
  leagueId?: number | undefined;
  leaguePhase?: number | undefined;
}

export interface CMsgClientToGCBingoGetUserDataResponse {
  response?: CMsgClientToGCBingoGetUserDataResponse_EResponse | undefined;
  userData?: CMsgBingoUserData | undefined;
}

export enum CMsgClientToGCBingoGetUserDataResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
}

export function cMsgClientToGCBingoGetUserDataResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCBingoGetUserDataResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCBingoGetUserDataResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCBingoGetUserDataResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCBingoGetUserDataResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCBingoGetUserDataResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCBingoGetUserDataResponse_EResponse.k_eTimeout;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCBingoGetUserDataResponse_EResponse",
      );
  }
}

export function cMsgClientToGCBingoGetUserDataResponse_EResponseToJSON(
  object: CMsgClientToGCBingoGetUserDataResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCBingoGetUserDataResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCBingoGetUserDataResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCBingoGetUserDataResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCBingoGetUserDataResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCBingoGetUserDataResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCBingoGetUserDataResponse_EResponse",
      );
  }
}

export interface CMsgBingoIndividualStatData {
  statId?: number | undefined;
  statValue?: number | undefined;
}

export interface CMsgBingoStatsData {
  statsData: CMsgBingoIndividualStatData[];
}

export interface CMsgClientToGCBingoGetStatsData {
  leagueId?: number | undefined;
  leaguePhase?: number | undefined;
}

export interface CMsgClientToGCBingoGetStatsDataResponse {
  response?: CMsgClientToGCBingoGetStatsDataResponse_EResponse | undefined;
  statsData?: CMsgBingoStatsData | undefined;
}

export enum CMsgClientToGCBingoGetStatsDataResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
}

export function cMsgClientToGCBingoGetStatsDataResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCBingoGetStatsDataResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCBingoGetStatsDataResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCBingoGetStatsDataResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCBingoGetStatsDataResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCBingoGetStatsDataResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCBingoGetStatsDataResponse_EResponse.k_eTimeout;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCBingoGetStatsDataResponse_EResponse",
      );
  }
}

export function cMsgClientToGCBingoGetStatsDataResponse_EResponseToJSON(
  object: CMsgClientToGCBingoGetStatsDataResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCBingoGetStatsDataResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCBingoGetStatsDataResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCBingoGetStatsDataResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCBingoGetStatsDataResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCBingoGetStatsDataResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCBingoGetStatsDataResponse_EResponse",
      );
  }
}

export interface CMsgGCToClientBingoUserDataUpdated {
  leagueId?: number | undefined;
  leaguePhase?: number | undefined;
  userData?: CMsgBingoUserData | undefined;
}

export interface CMsgClientToGCBingoClaimRow {
  leagueId?: number | undefined;
  leaguePhase?: number | undefined;
  rowIndex?: number | undefined;
}

export interface CMsgClientToGCBingoClaimRowResponse {
  response?: CMsgClientToGCBingoClaimRowResponse_EResponse | undefined;
}

export enum CMsgClientToGCBingoClaimRowResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eInvalidRow = 5,
  k_eExpiredCard = 6,
}

export function cMsgClientToGCBingoClaimRowResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCBingoClaimRowResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCBingoClaimRowResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCBingoClaimRowResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCBingoClaimRowResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCBingoClaimRowResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCBingoClaimRowResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eInvalidRow":
      return CMsgClientToGCBingoClaimRowResponse_EResponse.k_eInvalidRow;
    case 6:
    case "k_eExpiredCard":
      return CMsgClientToGCBingoClaimRowResponse_EResponse.k_eExpiredCard;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCBingoClaimRowResponse_EResponse",
      );
  }
}

export function cMsgClientToGCBingoClaimRowResponse_EResponseToJSON(
  object: CMsgClientToGCBingoClaimRowResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCBingoClaimRowResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCBingoClaimRowResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCBingoClaimRowResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCBingoClaimRowResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCBingoClaimRowResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCBingoClaimRowResponse_EResponse.k_eInvalidRow:
      return "k_eInvalidRow";
    case CMsgClientToGCBingoClaimRowResponse_EResponse.k_eExpiredCard:
      return "k_eExpiredCard";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCBingoClaimRowResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCBingoDevRerollCard {
  leagueId?: number | undefined;
  leaguePhase?: number | undefined;
}

export interface CMsgClientToGCBingoDevRerollCardResponse {
  response?: CMsgClientToGCBingoDevRerollCardResponse_EResponse | undefined;
}

export enum CMsgClientToGCBingoDevRerollCardResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eExpiredCard = 6,
  k_eNotAllowed = 7,
}

export function cMsgClientToGCBingoDevRerollCardResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCBingoDevRerollCardResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eTimeout;
    case 6:
    case "k_eExpiredCard":
      return CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eExpiredCard;
    case 7:
    case "k_eNotAllowed":
      return CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eNotAllowed;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCBingoDevRerollCardResponse_EResponse",
      );
  }
}

export function cMsgClientToGCBingoDevRerollCardResponse_EResponseToJSON(
  object: CMsgClientToGCBingoDevRerollCardResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eExpiredCard:
      return "k_eExpiredCard";
    case CMsgClientToGCBingoDevRerollCardResponse_EResponse.k_eNotAllowed:
      return "k_eNotAllowed";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCBingoDevRerollCardResponse_EResponse",
      );
  }
}

function createBaseCMsgBingoSquare(): CMsgBingoSquare {
  return { statId: 0, statThreshold: 0 };
}

export const CMsgBingoSquare = {
  encode(message: CMsgBingoSquare, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.statId !== undefined && message.statId !== 0) {
      writer.uint32(8).uint32(message.statId);
    }
    if (message.statThreshold !== undefined && message.statThreshold !== 0) {
      writer.uint32(16).int32(message.statThreshold);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgBingoSquare {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgBingoSquare();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.statId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.statThreshold = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgBingoSquare {
    return {
      statId: isSet(object.statId) ? globalThis.Number(object.statId) : 0,
      statThreshold: isSet(object.statThreshold) ? globalThis.Number(object.statThreshold) : 0,
    };
  },

  toJSON(message: CMsgBingoSquare): unknown {
    const obj: any = {};
    if (message.statId !== undefined && message.statId !== 0) {
      obj.statId = Math.round(message.statId);
    }
    if (message.statThreshold !== undefined && message.statThreshold !== 0) {
      obj.statThreshold = Math.round(message.statThreshold);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgBingoSquare>): CMsgBingoSquare {
    return CMsgBingoSquare.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgBingoSquare>): CMsgBingoSquare {
    const message = createBaseCMsgBingoSquare();
    message.statId = object.statId ?? 0;
    message.statThreshold = object.statThreshold ?? 0;
    return message;
  },
};

function createBaseCMsgBingoUserData(): CMsgBingoUserData {
  return { squares: [] };
}

export const CMsgBingoUserData = {
  encode(message: CMsgBingoUserData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.squares) {
      CMsgBingoSquare.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgBingoUserData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgBingoUserData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.squares.push(CMsgBingoSquare.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgBingoUserData {
    return {
      squares: globalThis.Array.isArray(object?.squares)
        ? object.squares.map((e: any) => CMsgBingoSquare.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgBingoUserData): unknown {
    const obj: any = {};
    if (message.squares?.length) {
      obj.squares = message.squares.map((e) => CMsgBingoSquare.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgBingoUserData>): CMsgBingoUserData {
    return CMsgBingoUserData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgBingoUserData>): CMsgBingoUserData {
    const message = createBaseCMsgBingoUserData();
    message.squares = object.squares?.map((e) => CMsgBingoSquare.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgClientToGCBingoGetUserData(): CMsgClientToGCBingoGetUserData {
  return { leagueId: 0, leaguePhase: 0 };
}

export const CMsgClientToGCBingoGetUserData = {
  encode(message: CMsgClientToGCBingoGetUserData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      writer.uint32(8).uint32(message.leagueId);
    }
    if (message.leaguePhase !== undefined && message.leaguePhase !== 0) {
      writer.uint32(16).uint32(message.leaguePhase);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCBingoGetUserData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCBingoGetUserData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.leagueId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.leaguePhase = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCBingoGetUserData {
    return {
      leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
      leaguePhase: isSet(object.leaguePhase) ? globalThis.Number(object.leaguePhase) : 0,
    };
  },

  toJSON(message: CMsgClientToGCBingoGetUserData): unknown {
    const obj: any = {};
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      obj.leagueId = Math.round(message.leagueId);
    }
    if (message.leaguePhase !== undefined && message.leaguePhase !== 0) {
      obj.leaguePhase = Math.round(message.leaguePhase);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCBingoGetUserData>): CMsgClientToGCBingoGetUserData {
    return CMsgClientToGCBingoGetUserData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCBingoGetUserData>): CMsgClientToGCBingoGetUserData {
    const message = createBaseCMsgClientToGCBingoGetUserData();
    message.leagueId = object.leagueId ?? 0;
    message.leaguePhase = object.leaguePhase ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCBingoGetUserDataResponse(): CMsgClientToGCBingoGetUserDataResponse {
  return { response: 0, userData: undefined };
}

export const CMsgClientToGCBingoGetUserDataResponse = {
  encode(message: CMsgClientToGCBingoGetUserDataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.userData !== undefined) {
      CMsgBingoUserData.encode(message.userData, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCBingoGetUserDataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCBingoGetUserDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userData = CMsgBingoUserData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCBingoGetUserDataResponse {
    return {
      response: isSet(object.response) ? cMsgClientToGCBingoGetUserDataResponse_EResponseFromJSON(object.response) : 0,
      userData: isSet(object.userData) ? CMsgBingoUserData.fromJSON(object.userData) : undefined,
    };
  },

  toJSON(message: CMsgClientToGCBingoGetUserDataResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCBingoGetUserDataResponse_EResponseToJSON(message.response);
    }
    if (message.userData !== undefined) {
      obj.userData = CMsgBingoUserData.toJSON(message.userData);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCBingoGetUserDataResponse>): CMsgClientToGCBingoGetUserDataResponse {
    return CMsgClientToGCBingoGetUserDataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCBingoGetUserDataResponse>): CMsgClientToGCBingoGetUserDataResponse {
    const message = createBaseCMsgClientToGCBingoGetUserDataResponse();
    message.response = object.response ?? 0;
    message.userData =
      object.userData !== undefined && object.userData !== null
        ? CMsgBingoUserData.fromPartial(object.userData)
        : undefined;
    return message;
  },
};

function createBaseCMsgBingoIndividualStatData(): CMsgBingoIndividualStatData {
  return { statId: 0, statValue: 0 };
}

export const CMsgBingoIndividualStatData = {
  encode(message: CMsgBingoIndividualStatData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.statId !== undefined && message.statId !== 0) {
      writer.uint32(8).uint32(message.statId);
    }
    if (message.statValue !== undefined && message.statValue !== 0) {
      writer.uint32(16).int32(message.statValue);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgBingoIndividualStatData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgBingoIndividualStatData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.statId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.statValue = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgBingoIndividualStatData {
    return {
      statId: isSet(object.statId) ? globalThis.Number(object.statId) : 0,
      statValue: isSet(object.statValue) ? globalThis.Number(object.statValue) : 0,
    };
  },

  toJSON(message: CMsgBingoIndividualStatData): unknown {
    const obj: any = {};
    if (message.statId !== undefined && message.statId !== 0) {
      obj.statId = Math.round(message.statId);
    }
    if (message.statValue !== undefined && message.statValue !== 0) {
      obj.statValue = Math.round(message.statValue);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgBingoIndividualStatData>): CMsgBingoIndividualStatData {
    return CMsgBingoIndividualStatData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgBingoIndividualStatData>): CMsgBingoIndividualStatData {
    const message = createBaseCMsgBingoIndividualStatData();
    message.statId = object.statId ?? 0;
    message.statValue = object.statValue ?? 0;
    return message;
  },
};

function createBaseCMsgBingoStatsData(): CMsgBingoStatsData {
  return { statsData: [] };
}

export const CMsgBingoStatsData = {
  encode(message: CMsgBingoStatsData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.statsData) {
      CMsgBingoIndividualStatData.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgBingoStatsData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgBingoStatsData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.statsData.push(CMsgBingoIndividualStatData.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgBingoStatsData {
    return {
      statsData: globalThis.Array.isArray(object?.statsData)
        ? object.statsData.map((e: any) => CMsgBingoIndividualStatData.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgBingoStatsData): unknown {
    const obj: any = {};
    if (message.statsData?.length) {
      obj.statsData = message.statsData.map((e) => CMsgBingoIndividualStatData.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgBingoStatsData>): CMsgBingoStatsData {
    return CMsgBingoStatsData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgBingoStatsData>): CMsgBingoStatsData {
    const message = createBaseCMsgBingoStatsData();
    message.statsData = object.statsData?.map((e) => CMsgBingoIndividualStatData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgClientToGCBingoGetStatsData(): CMsgClientToGCBingoGetStatsData {
  return { leagueId: 0, leaguePhase: 0 };
}

export const CMsgClientToGCBingoGetStatsData = {
  encode(message: CMsgClientToGCBingoGetStatsData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      writer.uint32(8).uint32(message.leagueId);
    }
    if (message.leaguePhase !== undefined && message.leaguePhase !== 0) {
      writer.uint32(16).uint32(message.leaguePhase);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCBingoGetStatsData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCBingoGetStatsData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.leagueId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.leaguePhase = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCBingoGetStatsData {
    return {
      leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
      leaguePhase: isSet(object.leaguePhase) ? globalThis.Number(object.leaguePhase) : 0,
    };
  },

  toJSON(message: CMsgClientToGCBingoGetStatsData): unknown {
    const obj: any = {};
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      obj.leagueId = Math.round(message.leagueId);
    }
    if (message.leaguePhase !== undefined && message.leaguePhase !== 0) {
      obj.leaguePhase = Math.round(message.leaguePhase);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCBingoGetStatsData>): CMsgClientToGCBingoGetStatsData {
    return CMsgClientToGCBingoGetStatsData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCBingoGetStatsData>): CMsgClientToGCBingoGetStatsData {
    const message = createBaseCMsgClientToGCBingoGetStatsData();
    message.leagueId = object.leagueId ?? 0;
    message.leaguePhase = object.leaguePhase ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCBingoGetStatsDataResponse(): CMsgClientToGCBingoGetStatsDataResponse {
  return { response: 0, statsData: undefined };
}

export const CMsgClientToGCBingoGetStatsDataResponse = {
  encode(message: CMsgClientToGCBingoGetStatsDataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.statsData !== undefined) {
      CMsgBingoStatsData.encode(message.statsData, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCBingoGetStatsDataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCBingoGetStatsDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.statsData = CMsgBingoStatsData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCBingoGetStatsDataResponse {
    return {
      response: isSet(object.response) ? cMsgClientToGCBingoGetStatsDataResponse_EResponseFromJSON(object.response) : 0,
      statsData: isSet(object.statsData) ? CMsgBingoStatsData.fromJSON(object.statsData) : undefined,
    };
  },

  toJSON(message: CMsgClientToGCBingoGetStatsDataResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCBingoGetStatsDataResponse_EResponseToJSON(message.response);
    }
    if (message.statsData !== undefined) {
      obj.statsData = CMsgBingoStatsData.toJSON(message.statsData);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCBingoGetStatsDataResponse>): CMsgClientToGCBingoGetStatsDataResponse {
    return CMsgClientToGCBingoGetStatsDataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCBingoGetStatsDataResponse>): CMsgClientToGCBingoGetStatsDataResponse {
    const message = createBaseCMsgClientToGCBingoGetStatsDataResponse();
    message.response = object.response ?? 0;
    message.statsData =
      object.statsData !== undefined && object.statsData !== null
        ? CMsgBingoStatsData.fromPartial(object.statsData)
        : undefined;
    return message;
  },
};

function createBaseCMsgGCToClientBingoUserDataUpdated(): CMsgGCToClientBingoUserDataUpdated {
  return { leagueId: 0, leaguePhase: 0, userData: undefined };
}

export const CMsgGCToClientBingoUserDataUpdated = {
  encode(message: CMsgGCToClientBingoUserDataUpdated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      writer.uint32(8).uint32(message.leagueId);
    }
    if (message.leaguePhase !== undefined && message.leaguePhase !== 0) {
      writer.uint32(16).uint32(message.leaguePhase);
    }
    if (message.userData !== undefined) {
      CMsgBingoUserData.encode(message.userData, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgGCToClientBingoUserDataUpdated {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgGCToClientBingoUserDataUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.leagueId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.leaguePhase = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.userData = CMsgBingoUserData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgGCToClientBingoUserDataUpdated {
    return {
      leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
      leaguePhase: isSet(object.leaguePhase) ? globalThis.Number(object.leaguePhase) : 0,
      userData: isSet(object.userData) ? CMsgBingoUserData.fromJSON(object.userData) : undefined,
    };
  },

  toJSON(message: CMsgGCToClientBingoUserDataUpdated): unknown {
    const obj: any = {};
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      obj.leagueId = Math.round(message.leagueId);
    }
    if (message.leaguePhase !== undefined && message.leaguePhase !== 0) {
      obj.leaguePhase = Math.round(message.leaguePhase);
    }
    if (message.userData !== undefined) {
      obj.userData = CMsgBingoUserData.toJSON(message.userData);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgGCToClientBingoUserDataUpdated>): CMsgGCToClientBingoUserDataUpdated {
    return CMsgGCToClientBingoUserDataUpdated.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgGCToClientBingoUserDataUpdated>): CMsgGCToClientBingoUserDataUpdated {
    const message = createBaseCMsgGCToClientBingoUserDataUpdated();
    message.leagueId = object.leagueId ?? 0;
    message.leaguePhase = object.leaguePhase ?? 0;
    message.userData =
      object.userData !== undefined && object.userData !== null
        ? CMsgBingoUserData.fromPartial(object.userData)
        : undefined;
    return message;
  },
};

function createBaseCMsgClientToGCBingoClaimRow(): CMsgClientToGCBingoClaimRow {
  return { leagueId: 0, leaguePhase: 0, rowIndex: 0 };
}

export const CMsgClientToGCBingoClaimRow = {
  encode(message: CMsgClientToGCBingoClaimRow, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      writer.uint32(8).uint32(message.leagueId);
    }
    if (message.leaguePhase !== undefined && message.leaguePhase !== 0) {
      writer.uint32(16).uint32(message.leaguePhase);
    }
    if (message.rowIndex !== undefined && message.rowIndex !== 0) {
      writer.uint32(24).uint32(message.rowIndex);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCBingoClaimRow {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCBingoClaimRow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.leagueId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.leaguePhase = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.rowIndex = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCBingoClaimRow {
    return {
      leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
      leaguePhase: isSet(object.leaguePhase) ? globalThis.Number(object.leaguePhase) : 0,
      rowIndex: isSet(object.rowIndex) ? globalThis.Number(object.rowIndex) : 0,
    };
  },

  toJSON(message: CMsgClientToGCBingoClaimRow): unknown {
    const obj: any = {};
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      obj.leagueId = Math.round(message.leagueId);
    }
    if (message.leaguePhase !== undefined && message.leaguePhase !== 0) {
      obj.leaguePhase = Math.round(message.leaguePhase);
    }
    if (message.rowIndex !== undefined && message.rowIndex !== 0) {
      obj.rowIndex = Math.round(message.rowIndex);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCBingoClaimRow>): CMsgClientToGCBingoClaimRow {
    return CMsgClientToGCBingoClaimRow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCBingoClaimRow>): CMsgClientToGCBingoClaimRow {
    const message = createBaseCMsgClientToGCBingoClaimRow();
    message.leagueId = object.leagueId ?? 0;
    message.leaguePhase = object.leaguePhase ?? 0;
    message.rowIndex = object.rowIndex ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCBingoClaimRowResponse(): CMsgClientToGCBingoClaimRowResponse {
  return { response: 0 };
}

export const CMsgClientToGCBingoClaimRowResponse = {
  encode(message: CMsgClientToGCBingoClaimRowResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCBingoClaimRowResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCBingoClaimRowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCBingoClaimRowResponse {
    return {
      response: isSet(object.response) ? cMsgClientToGCBingoClaimRowResponse_EResponseFromJSON(object.response) : 0,
    };
  },

  toJSON(message: CMsgClientToGCBingoClaimRowResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCBingoClaimRowResponse_EResponseToJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCBingoClaimRowResponse>): CMsgClientToGCBingoClaimRowResponse {
    return CMsgClientToGCBingoClaimRowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCBingoClaimRowResponse>): CMsgClientToGCBingoClaimRowResponse {
    const message = createBaseCMsgClientToGCBingoClaimRowResponse();
    message.response = object.response ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCBingoDevRerollCard(): CMsgClientToGCBingoDevRerollCard {
  return { leagueId: 0, leaguePhase: 0 };
}

export const CMsgClientToGCBingoDevRerollCard = {
  encode(message: CMsgClientToGCBingoDevRerollCard, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      writer.uint32(8).uint32(message.leagueId);
    }
    if (message.leaguePhase !== undefined && message.leaguePhase !== 0) {
      writer.uint32(16).uint32(message.leaguePhase);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCBingoDevRerollCard {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCBingoDevRerollCard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.leagueId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.leaguePhase = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCBingoDevRerollCard {
    return {
      leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
      leaguePhase: isSet(object.leaguePhase) ? globalThis.Number(object.leaguePhase) : 0,
    };
  },

  toJSON(message: CMsgClientToGCBingoDevRerollCard): unknown {
    const obj: any = {};
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      obj.leagueId = Math.round(message.leagueId);
    }
    if (message.leaguePhase !== undefined && message.leaguePhase !== 0) {
      obj.leaguePhase = Math.round(message.leaguePhase);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCBingoDevRerollCard>): CMsgClientToGCBingoDevRerollCard {
    return CMsgClientToGCBingoDevRerollCard.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCBingoDevRerollCard>): CMsgClientToGCBingoDevRerollCard {
    const message = createBaseCMsgClientToGCBingoDevRerollCard();
    message.leagueId = object.leagueId ?? 0;
    message.leaguePhase = object.leaguePhase ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCBingoDevRerollCardResponse(): CMsgClientToGCBingoDevRerollCardResponse {
  return { response: 0 };
}

export const CMsgClientToGCBingoDevRerollCardResponse = {
  encode(message: CMsgClientToGCBingoDevRerollCardResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCBingoDevRerollCardResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCBingoDevRerollCardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCBingoDevRerollCardResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCBingoDevRerollCardResponse_EResponseFromJSON(object.response)
        : 0,
    };
  },

  toJSON(message: CMsgClientToGCBingoDevRerollCardResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCBingoDevRerollCardResponse_EResponseToJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCBingoDevRerollCardResponse>): CMsgClientToGCBingoDevRerollCardResponse {
    return CMsgClientToGCBingoDevRerollCardResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCBingoDevRerollCardResponse>): CMsgClientToGCBingoDevRerollCardResponse {
    const message = createBaseCMsgClientToGCBingoDevRerollCardResponse();
    message.response = object.response ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

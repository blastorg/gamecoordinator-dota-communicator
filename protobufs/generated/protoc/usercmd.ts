// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: usercmd.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { CMsgQAngle } from "./networkbasetypes";

export interface CInButtonStatePB {
  buttonstate1?: string | undefined;
  buttonstate2?: string | undefined;
  buttonstate3?: string | undefined;
}

export interface CSubtickMoveStep {
  button?: string | undefined;
  pressed?: boolean | undefined;
  when?: number | undefined;
  analogForwardDelta?: number | undefined;
  analogLeftDelta?: number | undefined;
  analogPitchDelta?: number | undefined;
  analogYawDelta?: number | undefined;
}

export interface CBaseUserCmdPB {
  legacyCommandNumber?: number | undefined;
  clientTick?: number | undefined;
  buttonsPb?: CInButtonStatePB | undefined;
  viewangles?: CMsgQAngle | undefined;
  forwardmove?: number | undefined;
  leftmove?: number | undefined;
  upmove?: number | undefined;
  impulse?: number | undefined;
  weaponselect?: number | undefined;
  randomSeed?: number | undefined;
  mousedx?: number | undefined;
  mousedy?: number | undefined;
  pawnEntityHandle?: number | undefined;
  subtickMoves: CSubtickMoveStep[];
  moveCrc?: Buffer | undefined;
  consumedServerAngleChanges?: number | undefined;
  cmdFlags?: number | undefined;
}

export interface CUserCmdBasePB {
  base?: CBaseUserCmdPB | undefined;
}

function createBaseCInButtonStatePB(): CInButtonStatePB {
  return { buttonstate1: "0", buttonstate2: "0", buttonstate3: "0" };
}

export const CInButtonStatePB = {
  encode(message: CInButtonStatePB, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.buttonstate1 !== undefined && message.buttonstate1 !== "0") {
      writer.uint32(8).uint64(message.buttonstate1);
    }
    if (message.buttonstate2 !== undefined && message.buttonstate2 !== "0") {
      writer.uint32(16).uint64(message.buttonstate2);
    }
    if (message.buttonstate3 !== undefined && message.buttonstate3 !== "0") {
      writer.uint32(24).uint64(message.buttonstate3);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CInButtonStatePB {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCInButtonStatePB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.buttonstate1 = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.buttonstate2 = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.buttonstate3 = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CInButtonStatePB {
    return {
      buttonstate1: isSet(object.buttonstate1) ? globalThis.String(object.buttonstate1) : "0",
      buttonstate2: isSet(object.buttonstate2) ? globalThis.String(object.buttonstate2) : "0",
      buttonstate3: isSet(object.buttonstate3) ? globalThis.String(object.buttonstate3) : "0",
    };
  },

  toJSON(message: CInButtonStatePB): unknown {
    const obj: any = {};
    if (message.buttonstate1 !== undefined && message.buttonstate1 !== "0") {
      obj.buttonstate1 = message.buttonstate1;
    }
    if (message.buttonstate2 !== undefined && message.buttonstate2 !== "0") {
      obj.buttonstate2 = message.buttonstate2;
    }
    if (message.buttonstate3 !== undefined && message.buttonstate3 !== "0") {
      obj.buttonstate3 = message.buttonstate3;
    }
    return obj;
  },

  create(base?: DeepPartial<CInButtonStatePB>): CInButtonStatePB {
    return CInButtonStatePB.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CInButtonStatePB>): CInButtonStatePB {
    const message = createBaseCInButtonStatePB();
    message.buttonstate1 = object.buttonstate1 ?? "0";
    message.buttonstate2 = object.buttonstate2 ?? "0";
    message.buttonstate3 = object.buttonstate3 ?? "0";
    return message;
  },
};

function createBaseCSubtickMoveStep(): CSubtickMoveStep {
  return {
    button: "0",
    pressed: false,
    when: 0,
    analogForwardDelta: 0,
    analogLeftDelta: 0,
    analogPitchDelta: 0,
    analogYawDelta: 0,
  };
}

export const CSubtickMoveStep = {
  encode(message: CSubtickMoveStep, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.button !== undefined && message.button !== "0") {
      writer.uint32(8).uint64(message.button);
    }
    if (message.pressed !== undefined && message.pressed !== false) {
      writer.uint32(16).bool(message.pressed);
    }
    if (message.when !== undefined && message.when !== 0) {
      writer.uint32(29).float(message.when);
    }
    if (message.analogForwardDelta !== undefined && message.analogForwardDelta !== 0) {
      writer.uint32(37).float(message.analogForwardDelta);
    }
    if (message.analogLeftDelta !== undefined && message.analogLeftDelta !== 0) {
      writer.uint32(45).float(message.analogLeftDelta);
    }
    if (message.analogPitchDelta !== undefined && message.analogPitchDelta !== 0) {
      writer.uint32(53).float(message.analogPitchDelta);
    }
    if (message.analogYawDelta !== undefined && message.analogYawDelta !== 0) {
      writer.uint32(61).float(message.analogYawDelta);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CSubtickMoveStep {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCSubtickMoveStep();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.button = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pressed = reader.bool();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.when = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.analogForwardDelta = reader.float();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.analogLeftDelta = reader.float();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.analogPitchDelta = reader.float();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }

          message.analogYawDelta = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CSubtickMoveStep {
    return {
      button: isSet(object.button) ? globalThis.String(object.button) : "0",
      pressed: isSet(object.pressed) ? globalThis.Boolean(object.pressed) : false,
      when: isSet(object.when) ? globalThis.Number(object.when) : 0,
      analogForwardDelta: isSet(object.analogForwardDelta) ? globalThis.Number(object.analogForwardDelta) : 0,
      analogLeftDelta: isSet(object.analogLeftDelta) ? globalThis.Number(object.analogLeftDelta) : 0,
      analogPitchDelta: isSet(object.analogPitchDelta) ? globalThis.Number(object.analogPitchDelta) : 0,
      analogYawDelta: isSet(object.analogYawDelta) ? globalThis.Number(object.analogYawDelta) : 0,
    };
  },

  toJSON(message: CSubtickMoveStep): unknown {
    const obj: any = {};
    if (message.button !== undefined && message.button !== "0") {
      obj.button = message.button;
    }
    if (message.pressed !== undefined && message.pressed !== false) {
      obj.pressed = message.pressed;
    }
    if (message.when !== undefined && message.when !== 0) {
      obj.when = message.when;
    }
    if (message.analogForwardDelta !== undefined && message.analogForwardDelta !== 0) {
      obj.analogForwardDelta = message.analogForwardDelta;
    }
    if (message.analogLeftDelta !== undefined && message.analogLeftDelta !== 0) {
      obj.analogLeftDelta = message.analogLeftDelta;
    }
    if (message.analogPitchDelta !== undefined && message.analogPitchDelta !== 0) {
      obj.analogPitchDelta = message.analogPitchDelta;
    }
    if (message.analogYawDelta !== undefined && message.analogYawDelta !== 0) {
      obj.analogYawDelta = message.analogYawDelta;
    }
    return obj;
  },

  create(base?: DeepPartial<CSubtickMoveStep>): CSubtickMoveStep {
    return CSubtickMoveStep.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CSubtickMoveStep>): CSubtickMoveStep {
    const message = createBaseCSubtickMoveStep();
    message.button = object.button ?? "0";
    message.pressed = object.pressed ?? false;
    message.when = object.when ?? 0;
    message.analogForwardDelta = object.analogForwardDelta ?? 0;
    message.analogLeftDelta = object.analogLeftDelta ?? 0;
    message.analogPitchDelta = object.analogPitchDelta ?? 0;
    message.analogYawDelta = object.analogYawDelta ?? 0;
    return message;
  },
};

function createBaseCBaseUserCmdPB(): CBaseUserCmdPB {
  return {
    legacyCommandNumber: 0,
    clientTick: 0,
    buttonsPb: undefined,
    viewangles: undefined,
    forwardmove: 0,
    leftmove: 0,
    upmove: 0,
    impulse: 0,
    weaponselect: 0,
    randomSeed: 0,
    mousedx: 0,
    mousedy: 0,
    pawnEntityHandle: 16777215,
    subtickMoves: [],
    moveCrc: Buffer.alloc(0),
    consumedServerAngleChanges: 0,
    cmdFlags: 0,
  };
}

export const CBaseUserCmdPB = {
  encode(message: CBaseUserCmdPB, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.legacyCommandNumber !== undefined && message.legacyCommandNumber !== 0) {
      writer.uint32(8).int32(message.legacyCommandNumber);
    }
    if (message.clientTick !== undefined && message.clientTick !== 0) {
      writer.uint32(16).int32(message.clientTick);
    }
    if (message.buttonsPb !== undefined) {
      CInButtonStatePB.encode(message.buttonsPb, writer.uint32(26).fork()).ldelim();
    }
    if (message.viewangles !== undefined) {
      CMsgQAngle.encode(message.viewangles, writer.uint32(34).fork()).ldelim();
    }
    if (message.forwardmove !== undefined && message.forwardmove !== 0) {
      writer.uint32(45).float(message.forwardmove);
    }
    if (message.leftmove !== undefined && message.leftmove !== 0) {
      writer.uint32(53).float(message.leftmove);
    }
    if (message.upmove !== undefined && message.upmove !== 0) {
      writer.uint32(61).float(message.upmove);
    }
    if (message.impulse !== undefined && message.impulse !== 0) {
      writer.uint32(64).int32(message.impulse);
    }
    if (message.weaponselect !== undefined && message.weaponselect !== 0) {
      writer.uint32(72).int32(message.weaponselect);
    }
    if (message.randomSeed !== undefined && message.randomSeed !== 0) {
      writer.uint32(80).int32(message.randomSeed);
    }
    if (message.mousedx !== undefined && message.mousedx !== 0) {
      writer.uint32(88).int32(message.mousedx);
    }
    if (message.mousedy !== undefined && message.mousedy !== 0) {
      writer.uint32(96).int32(message.mousedy);
    }
    if (message.pawnEntityHandle !== undefined && message.pawnEntityHandle !== 16777215) {
      writer.uint32(112).uint32(message.pawnEntityHandle);
    }
    for (const v of message.subtickMoves) {
      CSubtickMoveStep.encode(v!, writer.uint32(146).fork()).ldelim();
    }
    if (message.moveCrc !== undefined && message.moveCrc.length !== 0) {
      writer.uint32(154).bytes(message.moveCrc);
    }
    if (message.consumedServerAngleChanges !== undefined && message.consumedServerAngleChanges !== 0) {
      writer.uint32(160).uint32(message.consumedServerAngleChanges);
    }
    if (message.cmdFlags !== undefined && message.cmdFlags !== 0) {
      writer.uint32(168).int32(message.cmdFlags);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CBaseUserCmdPB {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCBaseUserCmdPB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.legacyCommandNumber = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.clientTick = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.buttonsPb = CInButtonStatePB.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.viewangles = CMsgQAngle.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.forwardmove = reader.float();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.leftmove = reader.float();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }

          message.upmove = reader.float();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.impulse = reader.int32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.weaponselect = reader.int32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.randomSeed = reader.int32();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.mousedx = reader.int32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.mousedy = reader.int32();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.pawnEntityHandle = reader.uint32();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.subtickMoves.push(CSubtickMoveStep.decode(reader, reader.uint32()));
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.moveCrc = reader.bytes() as Buffer;
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.consumedServerAngleChanges = reader.uint32();
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.cmdFlags = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CBaseUserCmdPB {
    return {
      legacyCommandNumber: isSet(object.legacyCommandNumber) ? globalThis.Number(object.legacyCommandNumber) : 0,
      clientTick: isSet(object.clientTick) ? globalThis.Number(object.clientTick) : 0,
      buttonsPb: isSet(object.buttonsPb) ? CInButtonStatePB.fromJSON(object.buttonsPb) : undefined,
      viewangles: isSet(object.viewangles) ? CMsgQAngle.fromJSON(object.viewangles) : undefined,
      forwardmove: isSet(object.forwardmove) ? globalThis.Number(object.forwardmove) : 0,
      leftmove: isSet(object.leftmove) ? globalThis.Number(object.leftmove) : 0,
      upmove: isSet(object.upmove) ? globalThis.Number(object.upmove) : 0,
      impulse: isSet(object.impulse) ? globalThis.Number(object.impulse) : 0,
      weaponselect: isSet(object.weaponselect) ? globalThis.Number(object.weaponselect) : 0,
      randomSeed: isSet(object.randomSeed) ? globalThis.Number(object.randomSeed) : 0,
      mousedx: isSet(object.mousedx) ? globalThis.Number(object.mousedx) : 0,
      mousedy: isSet(object.mousedy) ? globalThis.Number(object.mousedy) : 0,
      pawnEntityHandle: isSet(object.pawnEntityHandle) ? globalThis.Number(object.pawnEntityHandle) : 16777215,
      subtickMoves: globalThis.Array.isArray(object?.subtickMoves)
        ? object.subtickMoves.map((e: any) => CSubtickMoveStep.fromJSON(e))
        : [],
      moveCrc: isSet(object.moveCrc) ? Buffer.from(bytesFromBase64(object.moveCrc)) : Buffer.alloc(0),
      consumedServerAngleChanges: isSet(object.consumedServerAngleChanges)
        ? globalThis.Number(object.consumedServerAngleChanges)
        : 0,
      cmdFlags: isSet(object.cmdFlags) ? globalThis.Number(object.cmdFlags) : 0,
    };
  },

  toJSON(message: CBaseUserCmdPB): unknown {
    const obj: any = {};
    if (message.legacyCommandNumber !== undefined && message.legacyCommandNumber !== 0) {
      obj.legacyCommandNumber = Math.round(message.legacyCommandNumber);
    }
    if (message.clientTick !== undefined && message.clientTick !== 0) {
      obj.clientTick = Math.round(message.clientTick);
    }
    if (message.buttonsPb !== undefined) {
      obj.buttonsPb = CInButtonStatePB.toJSON(message.buttonsPb);
    }
    if (message.viewangles !== undefined) {
      obj.viewangles = CMsgQAngle.toJSON(message.viewangles);
    }
    if (message.forwardmove !== undefined && message.forwardmove !== 0) {
      obj.forwardmove = message.forwardmove;
    }
    if (message.leftmove !== undefined && message.leftmove !== 0) {
      obj.leftmove = message.leftmove;
    }
    if (message.upmove !== undefined && message.upmove !== 0) {
      obj.upmove = message.upmove;
    }
    if (message.impulse !== undefined && message.impulse !== 0) {
      obj.impulse = Math.round(message.impulse);
    }
    if (message.weaponselect !== undefined && message.weaponselect !== 0) {
      obj.weaponselect = Math.round(message.weaponselect);
    }
    if (message.randomSeed !== undefined && message.randomSeed !== 0) {
      obj.randomSeed = Math.round(message.randomSeed);
    }
    if (message.mousedx !== undefined && message.mousedx !== 0) {
      obj.mousedx = Math.round(message.mousedx);
    }
    if (message.mousedy !== undefined && message.mousedy !== 0) {
      obj.mousedy = Math.round(message.mousedy);
    }
    if (message.pawnEntityHandle !== undefined && message.pawnEntityHandle !== 16777215) {
      obj.pawnEntityHandle = Math.round(message.pawnEntityHandle);
    }
    if (message.subtickMoves?.length) {
      obj.subtickMoves = message.subtickMoves.map((e) => CSubtickMoveStep.toJSON(e));
    }
    if (message.moveCrc !== undefined && message.moveCrc.length !== 0) {
      obj.moveCrc = base64FromBytes(message.moveCrc);
    }
    if (message.consumedServerAngleChanges !== undefined && message.consumedServerAngleChanges !== 0) {
      obj.consumedServerAngleChanges = Math.round(message.consumedServerAngleChanges);
    }
    if (message.cmdFlags !== undefined && message.cmdFlags !== 0) {
      obj.cmdFlags = Math.round(message.cmdFlags);
    }
    return obj;
  },

  create(base?: DeepPartial<CBaseUserCmdPB>): CBaseUserCmdPB {
    return CBaseUserCmdPB.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CBaseUserCmdPB>): CBaseUserCmdPB {
    const message = createBaseCBaseUserCmdPB();
    message.legacyCommandNumber = object.legacyCommandNumber ?? 0;
    message.clientTick = object.clientTick ?? 0;
    message.buttonsPb = (object.buttonsPb !== undefined && object.buttonsPb !== null)
      ? CInButtonStatePB.fromPartial(object.buttonsPb)
      : undefined;
    message.viewangles = (object.viewangles !== undefined && object.viewangles !== null)
      ? CMsgQAngle.fromPartial(object.viewangles)
      : undefined;
    message.forwardmove = object.forwardmove ?? 0;
    message.leftmove = object.leftmove ?? 0;
    message.upmove = object.upmove ?? 0;
    message.impulse = object.impulse ?? 0;
    message.weaponselect = object.weaponselect ?? 0;
    message.randomSeed = object.randomSeed ?? 0;
    message.mousedx = object.mousedx ?? 0;
    message.mousedy = object.mousedy ?? 0;
    message.pawnEntityHandle = object.pawnEntityHandle ?? 16777215;
    message.subtickMoves = object.subtickMoves?.map((e) => CSubtickMoveStep.fromPartial(e)) || [];
    message.moveCrc = object.moveCrc ?? Buffer.alloc(0);
    message.consumedServerAngleChanges = object.consumedServerAngleChanges ?? 0;
    message.cmdFlags = object.cmdFlags ?? 0;
    return message;
  },
};

function createBaseCUserCmdBasePB(): CUserCmdBasePB {
  return { base: undefined };
}

export const CUserCmdBasePB = {
  encode(message: CUserCmdBasePB, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.base !== undefined) {
      CBaseUserCmdPB.encode(message.base, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CUserCmdBasePB {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCUserCmdBasePB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.base = CBaseUserCmdPB.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CUserCmdBasePB {
    return { base: isSet(object.base) ? CBaseUserCmdPB.fromJSON(object.base) : undefined };
  },

  toJSON(message: CUserCmdBasePB): unknown {
    const obj: any = {};
    if (message.base !== undefined) {
      obj.base = CBaseUserCmdPB.toJSON(message.base);
    }
    return obj;
  },

  create(base?: DeepPartial<CUserCmdBasePB>): CUserCmdBasePB {
    return CUserCmdBasePB.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CUserCmdBasePB>): CUserCmdBasePB {
    const message = createBaseCUserCmdBasePB();
    message.base = (object.base !== undefined && object.base !== null)
      ? CBaseUserCmdPB.fromPartial(object.base)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

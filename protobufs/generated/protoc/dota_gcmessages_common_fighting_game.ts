// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: dota_gcmessages_common_fighting_game.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export interface CMsgClientToGCFightingGameChallengeFriend {
  friendAccountId?: number | undefined;
}

export interface CMsgClientToGCFightingGameChallengeFriendResponse {
  response?: CMsgClientToGCFightingGameChallengeFriendResponse_EResponse | undefined;
}

export enum CMsgClientToGCFightingGameChallengeFriendResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eInvalidAccountID = 5,
  k_eStillWaitingOnAnotherChallenge = 6,
}

export function cMsgClientToGCFightingGameChallengeFriendResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCFightingGameChallengeFriendResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eInvalidAccountID":
      return CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eInvalidAccountID;
    case 6:
    case "k_eStillWaitingOnAnotherChallenge":
      return CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eStillWaitingOnAnotherChallenge;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCFightingGameChallengeFriendResponse_EResponse",
      );
  }
}

export function cMsgClientToGCFightingGameChallengeFriendResponse_EResponseToJSON(
  object: CMsgClientToGCFightingGameChallengeFriendResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eInvalidAccountID:
      return "k_eInvalidAccountID";
    case CMsgClientToGCFightingGameChallengeFriendResponse_EResponse.k_eStillWaitingOnAnotherChallenge:
      return "k_eStillWaitingOnAnotherChallenge";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCFightingGameChallengeFriendResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCFightingGameCancelChallengeFriend {
  friendAccountId?: number | undefined;
}

export interface CMsgClientToGCFightingGameAnswerChallenge {
  challengerAccountId?: number | undefined;
  accept?: boolean | undefined;
}

export interface CMsgClientToGCFightingGameAnswerChallengeResponse {
  response?: CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse | undefined;
}

export enum CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eInvalidChallenge = 5,
}

export function cMsgClientToGCFightingGameAnswerChallengeResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eInvalidChallenge":
      return CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.k_eInvalidChallenge;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse",
      );
  }
}

export function cMsgClientToGCFightingGameAnswerChallengeResponse_EResponseToJSON(
  object: CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse.k_eInvalidChallenge:
      return "k_eInvalidChallenge";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCFightingGameAnswerChallengeResponse_EResponse",
      );
  }
}

export interface CMsgGCToClientFightingGameChallenge {
  challengerAccountId?: number | undefined;
}

export interface CMsgGCToClientFightingGameChallengeCanceled {
  challengerAccountId?: number | undefined;
  responderAccountId?: number | undefined;
}

export interface CMsgGCToClientFightingGameStartMatch {
  challengerAccountId?: number | undefined;
  responderAccountId?: number | undefined;
}

function createBaseCMsgClientToGCFightingGameChallengeFriend(): CMsgClientToGCFightingGameChallengeFriend {
  return { friendAccountId: 0 };
}

export const CMsgClientToGCFightingGameChallengeFriend = {
  encode(message: CMsgClientToGCFightingGameChallengeFriend, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.friendAccountId !== undefined && message.friendAccountId !== 0) {
      writer.uint32(8).uint32(message.friendAccountId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFightingGameChallengeFriend {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFightingGameChallengeFriend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.friendAccountId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFightingGameChallengeFriend {
    return { friendAccountId: isSet(object.friendAccountId) ? globalThis.Number(object.friendAccountId) : 0 };
  },

  toJSON(message: CMsgClientToGCFightingGameChallengeFriend): unknown {
    const obj: any = {};
    if (message.friendAccountId !== undefined && message.friendAccountId !== 0) {
      obj.friendAccountId = Math.round(message.friendAccountId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCFightingGameChallengeFriend>): CMsgClientToGCFightingGameChallengeFriend {
    return CMsgClientToGCFightingGameChallengeFriend.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFightingGameChallengeFriend>,
  ): CMsgClientToGCFightingGameChallengeFriend {
    const message = createBaseCMsgClientToGCFightingGameChallengeFriend();
    message.friendAccountId = object.friendAccountId ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCFightingGameChallengeFriendResponse(): CMsgClientToGCFightingGameChallengeFriendResponse {
  return { response: 0 };
}

export const CMsgClientToGCFightingGameChallengeFriendResponse = {
  encode(
    message: CMsgClientToGCFightingGameChallengeFriendResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFightingGameChallengeFriendResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFightingGameChallengeFriendResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFightingGameChallengeFriendResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCFightingGameChallengeFriendResponse_EResponseFromJSON(object.response)
        : 0,
    };
  },

  toJSON(message: CMsgClientToGCFightingGameChallengeFriendResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCFightingGameChallengeFriendResponse_EResponseToJSON(message.response);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFightingGameChallengeFriendResponse>,
  ): CMsgClientToGCFightingGameChallengeFriendResponse {
    return CMsgClientToGCFightingGameChallengeFriendResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFightingGameChallengeFriendResponse>,
  ): CMsgClientToGCFightingGameChallengeFriendResponse {
    const message = createBaseCMsgClientToGCFightingGameChallengeFriendResponse();
    message.response = object.response ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCFightingGameCancelChallengeFriend(): CMsgClientToGCFightingGameCancelChallengeFriend {
  return { friendAccountId: 0 };
}

export const CMsgClientToGCFightingGameCancelChallengeFriend = {
  encode(
    message: CMsgClientToGCFightingGameCancelChallengeFriend,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.friendAccountId !== undefined && message.friendAccountId !== 0) {
      writer.uint32(8).uint32(message.friendAccountId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFightingGameCancelChallengeFriend {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFightingGameCancelChallengeFriend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.friendAccountId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFightingGameCancelChallengeFriend {
    return { friendAccountId: isSet(object.friendAccountId) ? globalThis.Number(object.friendAccountId) : 0 };
  },

  toJSON(message: CMsgClientToGCFightingGameCancelChallengeFriend): unknown {
    const obj: any = {};
    if (message.friendAccountId !== undefined && message.friendAccountId !== 0) {
      obj.friendAccountId = Math.round(message.friendAccountId);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFightingGameCancelChallengeFriend>,
  ): CMsgClientToGCFightingGameCancelChallengeFriend {
    return CMsgClientToGCFightingGameCancelChallengeFriend.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFightingGameCancelChallengeFriend>,
  ): CMsgClientToGCFightingGameCancelChallengeFriend {
    const message = createBaseCMsgClientToGCFightingGameCancelChallengeFriend();
    message.friendAccountId = object.friendAccountId ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCFightingGameAnswerChallenge(): CMsgClientToGCFightingGameAnswerChallenge {
  return { challengerAccountId: 0, accept: false };
}

export const CMsgClientToGCFightingGameAnswerChallenge = {
  encode(message: CMsgClientToGCFightingGameAnswerChallenge, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.challengerAccountId !== undefined && message.challengerAccountId !== 0) {
      writer.uint32(8).uint32(message.challengerAccountId);
    }
    if (message.accept !== undefined && message.accept !== false) {
      writer.uint32(16).bool(message.accept);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFightingGameAnswerChallenge {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFightingGameAnswerChallenge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.challengerAccountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.accept = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFightingGameAnswerChallenge {
    return {
      challengerAccountId: isSet(object.challengerAccountId) ? globalThis.Number(object.challengerAccountId) : 0,
      accept: isSet(object.accept) ? globalThis.Boolean(object.accept) : false,
    };
  },

  toJSON(message: CMsgClientToGCFightingGameAnswerChallenge): unknown {
    const obj: any = {};
    if (message.challengerAccountId !== undefined && message.challengerAccountId !== 0) {
      obj.challengerAccountId = Math.round(message.challengerAccountId);
    }
    if (message.accept !== undefined && message.accept !== false) {
      obj.accept = message.accept;
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCFightingGameAnswerChallenge>): CMsgClientToGCFightingGameAnswerChallenge {
    return CMsgClientToGCFightingGameAnswerChallenge.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFightingGameAnswerChallenge>,
  ): CMsgClientToGCFightingGameAnswerChallenge {
    const message = createBaseCMsgClientToGCFightingGameAnswerChallenge();
    message.challengerAccountId = object.challengerAccountId ?? 0;
    message.accept = object.accept ?? false;
    return message;
  },
};

function createBaseCMsgClientToGCFightingGameAnswerChallengeResponse(): CMsgClientToGCFightingGameAnswerChallengeResponse {
  return { response: 0 };
}

export const CMsgClientToGCFightingGameAnswerChallengeResponse = {
  encode(
    message: CMsgClientToGCFightingGameAnswerChallengeResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFightingGameAnswerChallengeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFightingGameAnswerChallengeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFightingGameAnswerChallengeResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCFightingGameAnswerChallengeResponse_EResponseFromJSON(object.response)
        : 0,
    };
  },

  toJSON(message: CMsgClientToGCFightingGameAnswerChallengeResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCFightingGameAnswerChallengeResponse_EResponseToJSON(message.response);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFightingGameAnswerChallengeResponse>,
  ): CMsgClientToGCFightingGameAnswerChallengeResponse {
    return CMsgClientToGCFightingGameAnswerChallengeResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFightingGameAnswerChallengeResponse>,
  ): CMsgClientToGCFightingGameAnswerChallengeResponse {
    const message = createBaseCMsgClientToGCFightingGameAnswerChallengeResponse();
    message.response = object.response ?? 0;
    return message;
  },
};

function createBaseCMsgGCToClientFightingGameChallenge(): CMsgGCToClientFightingGameChallenge {
  return { challengerAccountId: 0 };
}

export const CMsgGCToClientFightingGameChallenge = {
  encode(message: CMsgGCToClientFightingGameChallenge, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.challengerAccountId !== undefined && message.challengerAccountId !== 0) {
      writer.uint32(8).uint32(message.challengerAccountId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgGCToClientFightingGameChallenge {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgGCToClientFightingGameChallenge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.challengerAccountId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgGCToClientFightingGameChallenge {
    return {
      challengerAccountId: isSet(object.challengerAccountId) ? globalThis.Number(object.challengerAccountId) : 0,
    };
  },

  toJSON(message: CMsgGCToClientFightingGameChallenge): unknown {
    const obj: any = {};
    if (message.challengerAccountId !== undefined && message.challengerAccountId !== 0) {
      obj.challengerAccountId = Math.round(message.challengerAccountId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgGCToClientFightingGameChallenge>): CMsgGCToClientFightingGameChallenge {
    return CMsgGCToClientFightingGameChallenge.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgGCToClientFightingGameChallenge>): CMsgGCToClientFightingGameChallenge {
    const message = createBaseCMsgGCToClientFightingGameChallenge();
    message.challengerAccountId = object.challengerAccountId ?? 0;
    return message;
  },
};

function createBaseCMsgGCToClientFightingGameChallengeCanceled(): CMsgGCToClientFightingGameChallengeCanceled {
  return { challengerAccountId: 0, responderAccountId: 0 };
}

export const CMsgGCToClientFightingGameChallengeCanceled = {
  encode(message: CMsgGCToClientFightingGameChallengeCanceled, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.challengerAccountId !== undefined && message.challengerAccountId !== 0) {
      writer.uint32(8).uint32(message.challengerAccountId);
    }
    if (message.responderAccountId !== undefined && message.responderAccountId !== 0) {
      writer.uint32(16).uint32(message.responderAccountId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgGCToClientFightingGameChallengeCanceled {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgGCToClientFightingGameChallengeCanceled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.challengerAccountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.responderAccountId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgGCToClientFightingGameChallengeCanceled {
    return {
      challengerAccountId: isSet(object.challengerAccountId) ? globalThis.Number(object.challengerAccountId) : 0,
      responderAccountId: isSet(object.responderAccountId) ? globalThis.Number(object.responderAccountId) : 0,
    };
  },

  toJSON(message: CMsgGCToClientFightingGameChallengeCanceled): unknown {
    const obj: any = {};
    if (message.challengerAccountId !== undefined && message.challengerAccountId !== 0) {
      obj.challengerAccountId = Math.round(message.challengerAccountId);
    }
    if (message.responderAccountId !== undefined && message.responderAccountId !== 0) {
      obj.responderAccountId = Math.round(message.responderAccountId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgGCToClientFightingGameChallengeCanceled>): CMsgGCToClientFightingGameChallengeCanceled {
    return CMsgGCToClientFightingGameChallengeCanceled.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgGCToClientFightingGameChallengeCanceled>,
  ): CMsgGCToClientFightingGameChallengeCanceled {
    const message = createBaseCMsgGCToClientFightingGameChallengeCanceled();
    message.challengerAccountId = object.challengerAccountId ?? 0;
    message.responderAccountId = object.responderAccountId ?? 0;
    return message;
  },
};

function createBaseCMsgGCToClientFightingGameStartMatch(): CMsgGCToClientFightingGameStartMatch {
  return { challengerAccountId: 0, responderAccountId: 0 };
}

export const CMsgGCToClientFightingGameStartMatch = {
  encode(message: CMsgGCToClientFightingGameStartMatch, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.challengerAccountId !== undefined && message.challengerAccountId !== 0) {
      writer.uint32(8).uint32(message.challengerAccountId);
    }
    if (message.responderAccountId !== undefined && message.responderAccountId !== 0) {
      writer.uint32(16).uint32(message.responderAccountId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgGCToClientFightingGameStartMatch {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgGCToClientFightingGameStartMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.challengerAccountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.responderAccountId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgGCToClientFightingGameStartMatch {
    return {
      challengerAccountId: isSet(object.challengerAccountId) ? globalThis.Number(object.challengerAccountId) : 0,
      responderAccountId: isSet(object.responderAccountId) ? globalThis.Number(object.responderAccountId) : 0,
    };
  },

  toJSON(message: CMsgGCToClientFightingGameStartMatch): unknown {
    const obj: any = {};
    if (message.challengerAccountId !== undefined && message.challengerAccountId !== 0) {
      obj.challengerAccountId = Math.round(message.challengerAccountId);
    }
    if (message.responderAccountId !== undefined && message.responderAccountId !== 0) {
      obj.responderAccountId = Math.round(message.responderAccountId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgGCToClientFightingGameStartMatch>): CMsgGCToClientFightingGameStartMatch {
    return CMsgGCToClientFightingGameStartMatch.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgGCToClientFightingGameStartMatch>): CMsgGCToClientFightingGameStartMatch {
    const message = createBaseCMsgGCToClientFightingGameStartMatch();
    message.challengerAccountId = object.challengerAccountId ?? 0;
    message.responderAccountId = object.responderAccountId ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

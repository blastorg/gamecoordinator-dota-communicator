// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: dota_gcmessages_client_fantasy.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import {
  FantasyGemType,
  fantasyGemTypeFromJSON,
  fantasyGemTypeToJSON,
  FantasyRoles,
  fantasyRolesFromJSON,
  fantasyRolesToJSON,
  FantasyScoring,
  fantasyScoringFromJSON,
  fantasyScoringToJSON,
} from "./dota_shared_enums";

export enum DOTA2013PassportSelectionIndices {
  PP13_SEL_ALLSTAR_PLAYER_0 = 0,
  PP13_SEL_ALLSTAR_PLAYER_1 = 1,
  PP13_SEL_ALLSTAR_PLAYER_2 = 2,
  PP13_SEL_ALLSTAR_PLAYER_3 = 3,
  PP13_SEL_ALLSTAR_PLAYER_4 = 4,
  PP13_SEL_ALLSTAR_PLAYER_5 = 5,
  PP13_SEL_ALLSTAR_PLAYER_6 = 6,
  PP13_SEL_ALLSTAR_PLAYER_7 = 7,
  PP13_SEL_ALLSTAR_PLAYER_8 = 8,
  PP13_SEL_ALLSTAR_PLAYER_9 = 9,
  PP13_SEL_QUALPRED_WEST_0 = 10,
  PP13_SEL_QUALPRED_WEST_1 = 11,
  PP13_SEL_QUALPRED_WEST_2 = 12,
  PP13_SEL_QUALPRED_WEST_3 = 13,
  PP13_SEL_QUALPRED_WEST_4 = 14,
  PP13_SEL_QUALPRED_WEST_5 = 15,
  PP13_SEL_QUALPRED_WEST_6 = 16,
  PP13_SEL_QUALPRED_WEST_7 = 17,
  PP13_SEL_QUALPRED_WEST_8 = 18,
  PP13_SEL_QUALPRED_WEST_9 = 19,
  PP13_SEL_QUALPRED_WEST_10 = 20,
  PP13_SEL_QUALPRED_WEST_11 = 21,
  PP13_SEL_QUALPRED_WEST_12 = 22,
  PP13_SEL_QUALPRED_WEST_13 = 23,
  PP13_SEL_QUALPRED_WEST_14 = 24,
  PP13_SEL_QUALPRED_EAST_0 = 25,
  PP13_SEL_QUALPRED_EAST_1 = 26,
  PP13_SEL_QUALPRED_EAST_2 = 27,
  PP13_SEL_QUALPRED_EAST_3 = 28,
  PP13_SEL_QUALPRED_EAST_4 = 29,
  PP13_SEL_QUALPRED_EAST_5 = 30,
  PP13_SEL_QUALPRED_EAST_6 = 31,
  PP13_SEL_QUALPRED_EAST_7 = 32,
  PP13_SEL_QUALPRED_EAST_8 = 33,
  PP13_SEL_QUALPRED_EAST_9 = 34,
  PP13_SEL_QUALPRED_EAST_10 = 35,
  PP13_SEL_QUALPRED_EAST_11 = 36,
  PP13_SEL_QUALPRED_EAST_12 = 37,
  PP13_SEL_QUALPRED_EAST_13 = 38,
  PP13_SEL_QUALPRED_EAST_14 = 39,
  PP13_SEL_TEAMCUP_TEAM = 40,
  PP13_SEL_TEAMCUP_PLAYER = 41,
  PP13_SEL_TEAMCUP_TEAM_LOCK = 42,
  PP13_SEL_TEAMCUP_PLAYER_LOCK = 43,
  PP13_SEL_EVENTPRED_0 = 44,
  PP13_SEL_EVENTPRED_1 = 45,
  PP13_SEL_EVENTPRED_2 = 46,
  PP13_SEL_EVENTPRED_3 = 47,
  PP13_SEL_EVENTPRED_4 = 48,
  PP13_SEL_EVENTPRED_5 = 49,
  PP13_SEL_EVENTPRED_6 = 50,
  PP13_SEL_EVENTPRED_7 = 51,
  PP13_SEL_EVENTPRED_8 = 52,
  PP13_SEL_EVENTPRED_9 = 53,
  PP13_SEL_EVENTPRED_10 = 54,
  PP13_SEL_EVENTPRED_11 = 55,
  PP13_SEL_EVENTPRED_12 = 56,
  PP13_SEL_EVENTPRED_13 = 57,
  PP13_SEL_EVENTPRED_14 = 58,
  PP13_SEL_EVENTPRED_15 = 59,
  PP13_SEL_EVENTPRED_16 = 60,
  PP13_SEL_EVENTPRED_17 = 61,
  PP13_SEL_EVENTPRED_18 = 62,
  PP13_SEL_EVENTPRED_19 = 63,
  PP13_SEL_EVENTPRED_20 = 64,
  PP13_SEL_EVENTPRED_21 = 65,
  PP13_SEL_EVENTPRED_22 = 66,
  PP13_SEL_EVENTPRED_23 = 67,
  PP13_SEL_EVENTPRED_24 = 68,
  PP13_SEL_EVENTPRED_25 = 69,
  PP13_SEL_EVENTPRED_26 = 70,
  PP13_SEL_EVENTPRED_27 = 71,
  PP13_SEL_EVENTPRED_28 = 72,
  PP13_SEL_EVENTPRED_29 = 73,
  PP13_SEL_EVENTPRED_30 = 74,
  PP13_SEL_EVENTPRED_31 = 75,
  PP13_SEL_EVENTPRED_32 = 76,
  PP13_SEL_EVENTPRED_33 = 77,
  PP13_SEL_EVENTPRED_34 = 78,
  PP13_SEL_EVENTPRED_35 = 79,
  PP13_SEL_EVENTPRED_36 = 80,
  PP13_SEL_EVENTPRED_37 = 81,
  PP13_SEL_EVENTPRED_38 = 82,
  PP13_SEL_EVENTPRED_39 = 83,
  PP13_SEL_EVENTPRED_40 = 84,
  PP13_SEL_EVENTPRED_41 = 85,
  PP13_SEL_EVENTPRED_42 = 86,
  PP13_SEL_EVENTPRED_43 = 87,
  PP13_SEL_SOLO_0 = 88,
  PP13_SEL_SOLO_1 = 89,
  PP13_SEL_SOLO_2 = 90,
  PP13_SEL_SOLO_3 = 91,
  PP13_SEL_SOLO_4 = 92,
  PP13_SEL_SOLO_5 = 93,
  PP13_SEL_SOLO_6 = 94,
  PP13_SEL_SOLO_7 = 95,
}

export function dOTA2013PassportSelectionIndicesFromJSON(object: any): DOTA2013PassportSelectionIndices {
  switch (object) {
    case 0:
    case "PP13_SEL_ALLSTAR_PLAYER_0":
      return DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_0;
    case 1:
    case "PP13_SEL_ALLSTAR_PLAYER_1":
      return DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_1;
    case 2:
    case "PP13_SEL_ALLSTAR_PLAYER_2":
      return DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_2;
    case 3:
    case "PP13_SEL_ALLSTAR_PLAYER_3":
      return DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_3;
    case 4:
    case "PP13_SEL_ALLSTAR_PLAYER_4":
      return DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_4;
    case 5:
    case "PP13_SEL_ALLSTAR_PLAYER_5":
      return DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_5;
    case 6:
    case "PP13_SEL_ALLSTAR_PLAYER_6":
      return DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_6;
    case 7:
    case "PP13_SEL_ALLSTAR_PLAYER_7":
      return DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_7;
    case 8:
    case "PP13_SEL_ALLSTAR_PLAYER_8":
      return DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_8;
    case 9:
    case "PP13_SEL_ALLSTAR_PLAYER_9":
      return DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_9;
    case 10:
    case "PP13_SEL_QUALPRED_WEST_0":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_0;
    case 11:
    case "PP13_SEL_QUALPRED_WEST_1":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_1;
    case 12:
    case "PP13_SEL_QUALPRED_WEST_2":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_2;
    case 13:
    case "PP13_SEL_QUALPRED_WEST_3":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_3;
    case 14:
    case "PP13_SEL_QUALPRED_WEST_4":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_4;
    case 15:
    case "PP13_SEL_QUALPRED_WEST_5":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_5;
    case 16:
    case "PP13_SEL_QUALPRED_WEST_6":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_6;
    case 17:
    case "PP13_SEL_QUALPRED_WEST_7":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_7;
    case 18:
    case "PP13_SEL_QUALPRED_WEST_8":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_8;
    case 19:
    case "PP13_SEL_QUALPRED_WEST_9":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_9;
    case 20:
    case "PP13_SEL_QUALPRED_WEST_10":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_10;
    case 21:
    case "PP13_SEL_QUALPRED_WEST_11":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_11;
    case 22:
    case "PP13_SEL_QUALPRED_WEST_12":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_12;
    case 23:
    case "PP13_SEL_QUALPRED_WEST_13":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_13;
    case 24:
    case "PP13_SEL_QUALPRED_WEST_14":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_14;
    case 25:
    case "PP13_SEL_QUALPRED_EAST_0":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_0;
    case 26:
    case "PP13_SEL_QUALPRED_EAST_1":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_1;
    case 27:
    case "PP13_SEL_QUALPRED_EAST_2":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_2;
    case 28:
    case "PP13_SEL_QUALPRED_EAST_3":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_3;
    case 29:
    case "PP13_SEL_QUALPRED_EAST_4":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_4;
    case 30:
    case "PP13_SEL_QUALPRED_EAST_5":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_5;
    case 31:
    case "PP13_SEL_QUALPRED_EAST_6":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_6;
    case 32:
    case "PP13_SEL_QUALPRED_EAST_7":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_7;
    case 33:
    case "PP13_SEL_QUALPRED_EAST_8":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_8;
    case 34:
    case "PP13_SEL_QUALPRED_EAST_9":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_9;
    case 35:
    case "PP13_SEL_QUALPRED_EAST_10":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_10;
    case 36:
    case "PP13_SEL_QUALPRED_EAST_11":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_11;
    case 37:
    case "PP13_SEL_QUALPRED_EAST_12":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_12;
    case 38:
    case "PP13_SEL_QUALPRED_EAST_13":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_13;
    case 39:
    case "PP13_SEL_QUALPRED_EAST_14":
      return DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_14;
    case 40:
    case "PP13_SEL_TEAMCUP_TEAM":
      return DOTA2013PassportSelectionIndices.PP13_SEL_TEAMCUP_TEAM;
    case 41:
    case "PP13_SEL_TEAMCUP_PLAYER":
      return DOTA2013PassportSelectionIndices.PP13_SEL_TEAMCUP_PLAYER;
    case 42:
    case "PP13_SEL_TEAMCUP_TEAM_LOCK":
      return DOTA2013PassportSelectionIndices.PP13_SEL_TEAMCUP_TEAM_LOCK;
    case 43:
    case "PP13_SEL_TEAMCUP_PLAYER_LOCK":
      return DOTA2013PassportSelectionIndices.PP13_SEL_TEAMCUP_PLAYER_LOCK;
    case 44:
    case "PP13_SEL_EVENTPRED_0":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_0;
    case 45:
    case "PP13_SEL_EVENTPRED_1":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_1;
    case 46:
    case "PP13_SEL_EVENTPRED_2":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_2;
    case 47:
    case "PP13_SEL_EVENTPRED_3":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_3;
    case 48:
    case "PP13_SEL_EVENTPRED_4":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_4;
    case 49:
    case "PP13_SEL_EVENTPRED_5":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_5;
    case 50:
    case "PP13_SEL_EVENTPRED_6":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_6;
    case 51:
    case "PP13_SEL_EVENTPRED_7":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_7;
    case 52:
    case "PP13_SEL_EVENTPRED_8":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_8;
    case 53:
    case "PP13_SEL_EVENTPRED_9":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_9;
    case 54:
    case "PP13_SEL_EVENTPRED_10":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_10;
    case 55:
    case "PP13_SEL_EVENTPRED_11":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_11;
    case 56:
    case "PP13_SEL_EVENTPRED_12":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_12;
    case 57:
    case "PP13_SEL_EVENTPRED_13":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_13;
    case 58:
    case "PP13_SEL_EVENTPRED_14":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_14;
    case 59:
    case "PP13_SEL_EVENTPRED_15":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_15;
    case 60:
    case "PP13_SEL_EVENTPRED_16":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_16;
    case 61:
    case "PP13_SEL_EVENTPRED_17":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_17;
    case 62:
    case "PP13_SEL_EVENTPRED_18":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_18;
    case 63:
    case "PP13_SEL_EVENTPRED_19":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_19;
    case 64:
    case "PP13_SEL_EVENTPRED_20":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_20;
    case 65:
    case "PP13_SEL_EVENTPRED_21":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_21;
    case 66:
    case "PP13_SEL_EVENTPRED_22":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_22;
    case 67:
    case "PP13_SEL_EVENTPRED_23":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_23;
    case 68:
    case "PP13_SEL_EVENTPRED_24":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_24;
    case 69:
    case "PP13_SEL_EVENTPRED_25":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_25;
    case 70:
    case "PP13_SEL_EVENTPRED_26":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_26;
    case 71:
    case "PP13_SEL_EVENTPRED_27":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_27;
    case 72:
    case "PP13_SEL_EVENTPRED_28":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_28;
    case 73:
    case "PP13_SEL_EVENTPRED_29":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_29;
    case 74:
    case "PP13_SEL_EVENTPRED_30":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_30;
    case 75:
    case "PP13_SEL_EVENTPRED_31":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_31;
    case 76:
    case "PP13_SEL_EVENTPRED_32":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_32;
    case 77:
    case "PP13_SEL_EVENTPRED_33":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_33;
    case 78:
    case "PP13_SEL_EVENTPRED_34":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_34;
    case 79:
    case "PP13_SEL_EVENTPRED_35":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_35;
    case 80:
    case "PP13_SEL_EVENTPRED_36":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_36;
    case 81:
    case "PP13_SEL_EVENTPRED_37":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_37;
    case 82:
    case "PP13_SEL_EVENTPRED_38":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_38;
    case 83:
    case "PP13_SEL_EVENTPRED_39":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_39;
    case 84:
    case "PP13_SEL_EVENTPRED_40":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_40;
    case 85:
    case "PP13_SEL_EVENTPRED_41":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_41;
    case 86:
    case "PP13_SEL_EVENTPRED_42":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_42;
    case 87:
    case "PP13_SEL_EVENTPRED_43":
      return DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_43;
    case 88:
    case "PP13_SEL_SOLO_0":
      return DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_0;
    case 89:
    case "PP13_SEL_SOLO_1":
      return DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_1;
    case 90:
    case "PP13_SEL_SOLO_2":
      return DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_2;
    case 91:
    case "PP13_SEL_SOLO_3":
      return DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_3;
    case 92:
    case "PP13_SEL_SOLO_4":
      return DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_4;
    case 93:
    case "PP13_SEL_SOLO_5":
      return DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_5;
    case 94:
    case "PP13_SEL_SOLO_6":
      return DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_6;
    case 95:
    case "PP13_SEL_SOLO_7":
      return DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_7;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum DOTA2013PassportSelectionIndices");
  }
}

export function dOTA2013PassportSelectionIndicesToJSON(object: DOTA2013PassportSelectionIndices): string {
  switch (object) {
    case DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_0:
      return "PP13_SEL_ALLSTAR_PLAYER_0";
    case DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_1:
      return "PP13_SEL_ALLSTAR_PLAYER_1";
    case DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_2:
      return "PP13_SEL_ALLSTAR_PLAYER_2";
    case DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_3:
      return "PP13_SEL_ALLSTAR_PLAYER_3";
    case DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_4:
      return "PP13_SEL_ALLSTAR_PLAYER_4";
    case DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_5:
      return "PP13_SEL_ALLSTAR_PLAYER_5";
    case DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_6:
      return "PP13_SEL_ALLSTAR_PLAYER_6";
    case DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_7:
      return "PP13_SEL_ALLSTAR_PLAYER_7";
    case DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_8:
      return "PP13_SEL_ALLSTAR_PLAYER_8";
    case DOTA2013PassportSelectionIndices.PP13_SEL_ALLSTAR_PLAYER_9:
      return "PP13_SEL_ALLSTAR_PLAYER_9";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_0:
      return "PP13_SEL_QUALPRED_WEST_0";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_1:
      return "PP13_SEL_QUALPRED_WEST_1";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_2:
      return "PP13_SEL_QUALPRED_WEST_2";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_3:
      return "PP13_SEL_QUALPRED_WEST_3";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_4:
      return "PP13_SEL_QUALPRED_WEST_4";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_5:
      return "PP13_SEL_QUALPRED_WEST_5";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_6:
      return "PP13_SEL_QUALPRED_WEST_6";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_7:
      return "PP13_SEL_QUALPRED_WEST_7";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_8:
      return "PP13_SEL_QUALPRED_WEST_8";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_9:
      return "PP13_SEL_QUALPRED_WEST_9";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_10:
      return "PP13_SEL_QUALPRED_WEST_10";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_11:
      return "PP13_SEL_QUALPRED_WEST_11";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_12:
      return "PP13_SEL_QUALPRED_WEST_12";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_13:
      return "PP13_SEL_QUALPRED_WEST_13";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_WEST_14:
      return "PP13_SEL_QUALPRED_WEST_14";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_0:
      return "PP13_SEL_QUALPRED_EAST_0";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_1:
      return "PP13_SEL_QUALPRED_EAST_1";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_2:
      return "PP13_SEL_QUALPRED_EAST_2";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_3:
      return "PP13_SEL_QUALPRED_EAST_3";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_4:
      return "PP13_SEL_QUALPRED_EAST_4";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_5:
      return "PP13_SEL_QUALPRED_EAST_5";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_6:
      return "PP13_SEL_QUALPRED_EAST_6";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_7:
      return "PP13_SEL_QUALPRED_EAST_7";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_8:
      return "PP13_SEL_QUALPRED_EAST_8";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_9:
      return "PP13_SEL_QUALPRED_EAST_9";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_10:
      return "PP13_SEL_QUALPRED_EAST_10";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_11:
      return "PP13_SEL_QUALPRED_EAST_11";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_12:
      return "PP13_SEL_QUALPRED_EAST_12";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_13:
      return "PP13_SEL_QUALPRED_EAST_13";
    case DOTA2013PassportSelectionIndices.PP13_SEL_QUALPRED_EAST_14:
      return "PP13_SEL_QUALPRED_EAST_14";
    case DOTA2013PassportSelectionIndices.PP13_SEL_TEAMCUP_TEAM:
      return "PP13_SEL_TEAMCUP_TEAM";
    case DOTA2013PassportSelectionIndices.PP13_SEL_TEAMCUP_PLAYER:
      return "PP13_SEL_TEAMCUP_PLAYER";
    case DOTA2013PassportSelectionIndices.PP13_SEL_TEAMCUP_TEAM_LOCK:
      return "PP13_SEL_TEAMCUP_TEAM_LOCK";
    case DOTA2013PassportSelectionIndices.PP13_SEL_TEAMCUP_PLAYER_LOCK:
      return "PP13_SEL_TEAMCUP_PLAYER_LOCK";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_0:
      return "PP13_SEL_EVENTPRED_0";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_1:
      return "PP13_SEL_EVENTPRED_1";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_2:
      return "PP13_SEL_EVENTPRED_2";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_3:
      return "PP13_SEL_EVENTPRED_3";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_4:
      return "PP13_SEL_EVENTPRED_4";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_5:
      return "PP13_SEL_EVENTPRED_5";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_6:
      return "PP13_SEL_EVENTPRED_6";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_7:
      return "PP13_SEL_EVENTPRED_7";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_8:
      return "PP13_SEL_EVENTPRED_8";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_9:
      return "PP13_SEL_EVENTPRED_9";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_10:
      return "PP13_SEL_EVENTPRED_10";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_11:
      return "PP13_SEL_EVENTPRED_11";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_12:
      return "PP13_SEL_EVENTPRED_12";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_13:
      return "PP13_SEL_EVENTPRED_13";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_14:
      return "PP13_SEL_EVENTPRED_14";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_15:
      return "PP13_SEL_EVENTPRED_15";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_16:
      return "PP13_SEL_EVENTPRED_16";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_17:
      return "PP13_SEL_EVENTPRED_17";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_18:
      return "PP13_SEL_EVENTPRED_18";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_19:
      return "PP13_SEL_EVENTPRED_19";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_20:
      return "PP13_SEL_EVENTPRED_20";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_21:
      return "PP13_SEL_EVENTPRED_21";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_22:
      return "PP13_SEL_EVENTPRED_22";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_23:
      return "PP13_SEL_EVENTPRED_23";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_24:
      return "PP13_SEL_EVENTPRED_24";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_25:
      return "PP13_SEL_EVENTPRED_25";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_26:
      return "PP13_SEL_EVENTPRED_26";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_27:
      return "PP13_SEL_EVENTPRED_27";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_28:
      return "PP13_SEL_EVENTPRED_28";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_29:
      return "PP13_SEL_EVENTPRED_29";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_30:
      return "PP13_SEL_EVENTPRED_30";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_31:
      return "PP13_SEL_EVENTPRED_31";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_32:
      return "PP13_SEL_EVENTPRED_32";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_33:
      return "PP13_SEL_EVENTPRED_33";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_34:
      return "PP13_SEL_EVENTPRED_34";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_35:
      return "PP13_SEL_EVENTPRED_35";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_36:
      return "PP13_SEL_EVENTPRED_36";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_37:
      return "PP13_SEL_EVENTPRED_37";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_38:
      return "PP13_SEL_EVENTPRED_38";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_39:
      return "PP13_SEL_EVENTPRED_39";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_40:
      return "PP13_SEL_EVENTPRED_40";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_41:
      return "PP13_SEL_EVENTPRED_41";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_42:
      return "PP13_SEL_EVENTPRED_42";
    case DOTA2013PassportSelectionIndices.PP13_SEL_EVENTPRED_43:
      return "PP13_SEL_EVENTPRED_43";
    case DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_0:
      return "PP13_SEL_SOLO_0";
    case DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_1:
      return "PP13_SEL_SOLO_1";
    case DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_2:
      return "PP13_SEL_SOLO_2";
    case DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_3:
      return "PP13_SEL_SOLO_3";
    case DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_4:
      return "PP13_SEL_SOLO_4";
    case DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_5:
      return "PP13_SEL_SOLO_5";
    case DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_6:
      return "PP13_SEL_SOLO_6";
    case DOTA2013PassportSelectionIndices.PP13_SEL_SOLO_7:
      return "PP13_SEL_SOLO_7";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum DOTA2013PassportSelectionIndices");
  }
}

export interface CMsgDOTAPlayerInfo {
  accountId?: number | undefined;
  name?: string | undefined;
  countryCode?: string | undefined;
  fantasyRole?: FantasyRoles | undefined;
  teamId?: number | undefined;
  teamName?: string | undefined;
  teamTag?: string | undefined;
  sponsor?: string | undefined;
  isLocked?: boolean | undefined;
  isPro?: boolean | undefined;
  realName?: string | undefined;
  totalEarnings?: number | undefined;
  results: CMsgDOTAPlayerInfo_Results[];
  teamUrlLogo?: string | undefined;
  auditEntries: CMsgDOTAPlayerInfo_AuditEntry[];
  teamAbbreviation?: string | undefined;
}

export interface CMsgDOTAPlayerInfo_Results {
  leagueId?: number | undefined;
  placement?: number | undefined;
  earnings?: number | undefined;
}

export interface CMsgDOTAPlayerInfo_AuditEntry {
  startTimestamp?: number | undefined;
  endTimestamp?: number | undefined;
  teamId?: number | undefined;
  teamName?: string | undefined;
  teamTag?: string | undefined;
  teamUrlLogo?: string | undefined;
}

export interface CMsgDOTAPlayerInfoList {
  playerInfos: CMsgDOTAPlayerInfo[];
}

export interface CMsgDOTATeamRoster {
  timestamp?: number | undefined;
  teamId?: number | undefined;
  memberAccountIds: number[];
  coachAccountId?: number | undefined;
}

export interface CMsgDOTADPCProfileInfo {
  playerInfo?: CMsgDOTAPlayerInfo | undefined;
  predictionInfo?: CMsgDOTADPCProfileInfo_PredictionInfo | undefined;
  fantasyInfo?: CMsgDOTADPCProfileInfo_FantasyInfo | undefined;
  disabledNotifications: number[];
}

export interface CMsgDOTADPCProfileInfo_PredictionInfo {
  percent?: number | undefined;
  shardWinnings?: number | undefined;
}

export interface CMsgDOTADPCProfileInfo_FantasyInfo {
  top90Finishes?: number | undefined;
  top75Finishes?: number | undefined;
  top50Finishes?: number | undefined;
  shardWinnings?: number | undefined;
}

export interface CMsgDOTALeaderboards {
  leaderboards: CMsgDOTALeaderboards_RegionLeaderboard[];
}

export interface CMsgDOTALeaderboards_RegionLeaderboard {
  division?: number | undefined;
  accountIds: number[];
}

export interface CMsgDOTAPassportVoteTeamGuess {
  leagueId?: number | undefined;
  winnerId?: number | undefined;
  runnerupId?: number | undefined;
}

export interface CMsgDOTAPassportVoteGenericSelection {
  selectionIndex?: DOTA2013PassportSelectionIndices | undefined;
  selection?: number | undefined;
}

export interface CMsgDOTAPassportStampedPlayer {
  steamId?: string | undefined;
  stampLevel?: number | undefined;
}

export interface CMsgDOTAPassportPlayerCardChallenge {
  challengeId?: number | undefined;
}

export interface CMsgDOTAPassportVote {
  teamVotes: CMsgDOTAPassportVoteTeamGuess[];
  genericSelections: CMsgDOTAPassportVoteGenericSelection[];
  stampedPlayers: CMsgDOTAPassportStampedPlayer[];
  playerCardChallenges: CMsgDOTAPassportPlayerCardChallenge[];
}

export interface CMsgClientToGCGetPlayerCardRosterRequest {
  leagueId?: number | undefined;
  fantasyPeriod?: number | undefined;
}

export interface CMsgClientToGCGetPlayerCardRosterResponse {
  result?: CMsgClientToGCGetPlayerCardRosterResponse_Result | undefined;
  playerCardItemId: string[];
  score?: number | undefined;
  finalized?: boolean | undefined;
  percentile?: number | undefined;
}

export enum CMsgClientToGCGetPlayerCardRosterResponse_Result {
  SUCCESS = 0,
  ERROR_UNSPECIFIED = 1,
  ERROR_INVALID_LEAGUE_ID = 2,
  ERROR_INVALID_TIMESTAMP = 3,
}

export function cMsgClientToGCGetPlayerCardRosterResponse_ResultFromJSON(
  object: any,
): CMsgClientToGCGetPlayerCardRosterResponse_Result {
  switch (object) {
    case 0:
    case "SUCCESS":
      return CMsgClientToGCGetPlayerCardRosterResponse_Result.SUCCESS;
    case 1:
    case "ERROR_UNSPECIFIED":
      return CMsgClientToGCGetPlayerCardRosterResponse_Result.ERROR_UNSPECIFIED;
    case 2:
    case "ERROR_INVALID_LEAGUE_ID":
      return CMsgClientToGCGetPlayerCardRosterResponse_Result.ERROR_INVALID_LEAGUE_ID;
    case 3:
    case "ERROR_INVALID_TIMESTAMP":
      return CMsgClientToGCGetPlayerCardRosterResponse_Result.ERROR_INVALID_TIMESTAMP;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCGetPlayerCardRosterResponse_Result",
      );
  }
}

export function cMsgClientToGCGetPlayerCardRosterResponse_ResultToJSON(
  object: CMsgClientToGCGetPlayerCardRosterResponse_Result,
): string {
  switch (object) {
    case CMsgClientToGCGetPlayerCardRosterResponse_Result.SUCCESS:
      return "SUCCESS";
    case CMsgClientToGCGetPlayerCardRosterResponse_Result.ERROR_UNSPECIFIED:
      return "ERROR_UNSPECIFIED";
    case CMsgClientToGCGetPlayerCardRosterResponse_Result.ERROR_INVALID_LEAGUE_ID:
      return "ERROR_INVALID_LEAGUE_ID";
    case CMsgClientToGCGetPlayerCardRosterResponse_Result.ERROR_INVALID_TIMESTAMP:
      return "ERROR_INVALID_TIMESTAMP";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCGetPlayerCardRosterResponse_Result",
      );
  }
}

export interface CMsgClientToGCBatchGetPlayerCardRosterRequest {
  leagueTimestamps: CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp[];
}

export interface CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp {
  leagueId?: number | undefined;
  fantasyPeriod?: number | undefined;
}

export interface CMsgClientToGCBatchGetPlayerCardRosterResponse {
  responses: CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse[];
}

export enum CMsgClientToGCBatchGetPlayerCardRosterResponse_Result {
  SUCCESS = 0,
  ERROR_UNSPECIFIED = 1,
  ERROR_INVALID_LEAGUE_ID = 2,
  ERROR_INVALID_TIMESTAMP = 3,
}

export function cMsgClientToGCBatchGetPlayerCardRosterResponse_ResultFromJSON(
  object: any,
): CMsgClientToGCBatchGetPlayerCardRosterResponse_Result {
  switch (object) {
    case 0:
    case "SUCCESS":
      return CMsgClientToGCBatchGetPlayerCardRosterResponse_Result.SUCCESS;
    case 1:
    case "ERROR_UNSPECIFIED":
      return CMsgClientToGCBatchGetPlayerCardRosterResponse_Result.ERROR_UNSPECIFIED;
    case 2:
    case "ERROR_INVALID_LEAGUE_ID":
      return CMsgClientToGCBatchGetPlayerCardRosterResponse_Result.ERROR_INVALID_LEAGUE_ID;
    case 3:
    case "ERROR_INVALID_TIMESTAMP":
      return CMsgClientToGCBatchGetPlayerCardRosterResponse_Result.ERROR_INVALID_TIMESTAMP;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCBatchGetPlayerCardRosterResponse_Result",
      );
  }
}

export function cMsgClientToGCBatchGetPlayerCardRosterResponse_ResultToJSON(
  object: CMsgClientToGCBatchGetPlayerCardRosterResponse_Result,
): string {
  switch (object) {
    case CMsgClientToGCBatchGetPlayerCardRosterResponse_Result.SUCCESS:
      return "SUCCESS";
    case CMsgClientToGCBatchGetPlayerCardRosterResponse_Result.ERROR_UNSPECIFIED:
      return "ERROR_UNSPECIFIED";
    case CMsgClientToGCBatchGetPlayerCardRosterResponse_Result.ERROR_INVALID_LEAGUE_ID:
      return "ERROR_INVALID_LEAGUE_ID";
    case CMsgClientToGCBatchGetPlayerCardRosterResponse_Result.ERROR_INVALID_TIMESTAMP:
      return "ERROR_INVALID_TIMESTAMP";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCBatchGetPlayerCardRosterResponse_Result",
      );
  }
}

export interface CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse {
  leagueId?: number | undefined;
  deprecatedTimestamp?: number | undefined;
  result?: CMsgClientToGCBatchGetPlayerCardRosterResponse_Result | undefined;
  playerCardItemId: string[];
  score?: number | undefined;
  finalized?: boolean | undefined;
  percentile?: number | undefined;
  fantasyPeriod?: number | undefined;
}

export interface CMsgClientToGCSetPlayerCardRosterRequest {
  leagueId?: number | undefined;
  deprecatedTimestamp?: number | undefined;
  slot?: number | undefined;
  playerCardItemId?: string | undefined;
  eventId?: number | undefined;
  fantasyPeriod?: number | undefined;
}

export interface CMsgClientToGCSetPlayerCardRosterResponse {
  result?: CMsgClientToGCSetPlayerCardRosterResponse_Result | undefined;
}

export enum CMsgClientToGCSetPlayerCardRosterResponse_Result {
  SUCCESS = 0,
  ERROR_UNSPECIFIED = 1,
  ERROR_INVALID_LEAGUE_ID = 2,
  ERROR_INVALID_TIMESTAMP = 3,
  ERROR_PLAYER_CARD_NOT_OWNED = 4,
  ERROR_INVALID_SLOT = 5,
  ERROR_FAILED_CARD_INFO = 6,
  ERROR_ACCOUNT_DUPLICATE = 7,
  ERROR_LOCKED_TIMESTAMP = 8,
  ERROR_INVALID_LEAGUE_FOR_PERIOD = 9,
  ERROR_INVALID_EVENT = 10,
}

export function cMsgClientToGCSetPlayerCardRosterResponse_ResultFromJSON(
  object: any,
): CMsgClientToGCSetPlayerCardRosterResponse_Result {
  switch (object) {
    case 0:
    case "SUCCESS":
      return CMsgClientToGCSetPlayerCardRosterResponse_Result.SUCCESS;
    case 1:
    case "ERROR_UNSPECIFIED":
      return CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_UNSPECIFIED;
    case 2:
    case "ERROR_INVALID_LEAGUE_ID":
      return CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_INVALID_LEAGUE_ID;
    case 3:
    case "ERROR_INVALID_TIMESTAMP":
      return CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_INVALID_TIMESTAMP;
    case 4:
    case "ERROR_PLAYER_CARD_NOT_OWNED":
      return CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_PLAYER_CARD_NOT_OWNED;
    case 5:
    case "ERROR_INVALID_SLOT":
      return CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_INVALID_SLOT;
    case 6:
    case "ERROR_FAILED_CARD_INFO":
      return CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_FAILED_CARD_INFO;
    case 7:
    case "ERROR_ACCOUNT_DUPLICATE":
      return CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_ACCOUNT_DUPLICATE;
    case 8:
    case "ERROR_LOCKED_TIMESTAMP":
      return CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_LOCKED_TIMESTAMP;
    case 9:
    case "ERROR_INVALID_LEAGUE_FOR_PERIOD":
      return CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_INVALID_LEAGUE_FOR_PERIOD;
    case 10:
    case "ERROR_INVALID_EVENT":
      return CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_INVALID_EVENT;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCSetPlayerCardRosterResponse_Result",
      );
  }
}

export function cMsgClientToGCSetPlayerCardRosterResponse_ResultToJSON(
  object: CMsgClientToGCSetPlayerCardRosterResponse_Result,
): string {
  switch (object) {
    case CMsgClientToGCSetPlayerCardRosterResponse_Result.SUCCESS:
      return "SUCCESS";
    case CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_UNSPECIFIED:
      return "ERROR_UNSPECIFIED";
    case CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_INVALID_LEAGUE_ID:
      return "ERROR_INVALID_LEAGUE_ID";
    case CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_INVALID_TIMESTAMP:
      return "ERROR_INVALID_TIMESTAMP";
    case CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_PLAYER_CARD_NOT_OWNED:
      return "ERROR_PLAYER_CARD_NOT_OWNED";
    case CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_INVALID_SLOT:
      return "ERROR_INVALID_SLOT";
    case CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_FAILED_CARD_INFO:
      return "ERROR_FAILED_CARD_INFO";
    case CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_ACCOUNT_DUPLICATE:
      return "ERROR_ACCOUNT_DUPLICATE";
    case CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_LOCKED_TIMESTAMP:
      return "ERROR_LOCKED_TIMESTAMP";
    case CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_INVALID_LEAGUE_FOR_PERIOD:
      return "ERROR_INVALID_LEAGUE_FOR_PERIOD";
    case CMsgClientToGCSetPlayerCardRosterResponse_Result.ERROR_INVALID_EVENT:
      return "ERROR_INVALID_EVENT";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCSetPlayerCardRosterResponse_Result",
      );
  }
}

export interface CMsgDOTAFantasyDPCLeagueStatus {
  leagueInfos: CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo[];
}

export enum CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus {
  UNSET = 0,
  PARTIAL = 1,
  FULL = 2,
  CONCLUDED = 3,
}

export function cMsgDOTAFantasyDPCLeagueStatus_ERosterStatusFromJSON(
  object: any,
): CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus {
  switch (object) {
    case 0:
    case "UNSET":
      return CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus.UNSET;
    case 1:
    case "PARTIAL":
      return CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus.PARTIAL;
    case 2:
    case "FULL":
      return CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus.FULL;
    case 3:
    case "CONCLUDED":
      return CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus.CONCLUDED;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus",
      );
  }
}

export function cMsgDOTAFantasyDPCLeagueStatus_ERosterStatusToJSON(
  object: CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus,
): string {
  switch (object) {
    case CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus.UNSET:
      return "UNSET";
    case CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus.PARTIAL:
      return "PARTIAL";
    case CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus.FULL:
      return "FULL";
    case CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus.CONCLUDED:
      return "CONCLUDED";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus",
      );
  }
}

export interface CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo {
  leagueId?: number | undefined;
  leagueName?: string | undefined;
  startTimestamp?: number | undefined;
  endTimestamp?: number | undefined;
  dayTimestamps: number[];
  status?: CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus | undefined;
}

export interface CMsgDOTADPCSearchResults {
  players: CMsgDOTADPCSearchResults_Player[];
  teams: CMsgDOTADPCSearchResults_Team[];
  leagues: CMsgDOTADPCSearchResults_League[];
}

export enum CMsgDOTADPCSearchResults_ESearchResultsDesired {
  k_ESearchResultsDesired_Players = 1,
  k_ESearchResultsDesired_Teams = 2,
  k_ESearchResultsDesired_Leagues = 4,
  k_ESearchResultsDesired_All = 7,
}

export function cMsgDOTADPCSearchResults_ESearchResultsDesiredFromJSON(
  object: any,
): CMsgDOTADPCSearchResults_ESearchResultsDesired {
  switch (object) {
    case 1:
    case "k_ESearchResultsDesired_Players":
      return CMsgDOTADPCSearchResults_ESearchResultsDesired.k_ESearchResultsDesired_Players;
    case 2:
    case "k_ESearchResultsDesired_Teams":
      return CMsgDOTADPCSearchResults_ESearchResultsDesired.k_ESearchResultsDesired_Teams;
    case 4:
    case "k_ESearchResultsDesired_Leagues":
      return CMsgDOTADPCSearchResults_ESearchResultsDesired.k_ESearchResultsDesired_Leagues;
    case 7:
    case "k_ESearchResultsDesired_All":
      return CMsgDOTADPCSearchResults_ESearchResultsDesired.k_ESearchResultsDesired_All;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgDOTADPCSearchResults_ESearchResultsDesired",
      );
  }
}

export function cMsgDOTADPCSearchResults_ESearchResultsDesiredToJSON(
  object: CMsgDOTADPCSearchResults_ESearchResultsDesired,
): string {
  switch (object) {
    case CMsgDOTADPCSearchResults_ESearchResultsDesired.k_ESearchResultsDesired_Players:
      return "k_ESearchResultsDesired_Players";
    case CMsgDOTADPCSearchResults_ESearchResultsDesired.k_ESearchResultsDesired_Teams:
      return "k_ESearchResultsDesired_Teams";
    case CMsgDOTADPCSearchResults_ESearchResultsDesired.k_ESearchResultsDesired_Leagues:
      return "k_ESearchResultsDesired_Leagues";
    case CMsgDOTADPCSearchResults_ESearchResultsDesired.k_ESearchResultsDesired_All:
      return "k_ESearchResultsDesired_All";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgDOTADPCSearchResults_ESearchResultsDesired",
      );
  }
}

export interface CMsgDOTADPCSearchResults_Player {
  id?: number | undefined;
  name?: string | undefined;
  realName?: string | undefined;
}

export interface CMsgDOTADPCSearchResults_Team {
  id?: number | undefined;
  name?: string | undefined;
  url?: string | undefined;
}

export interface CMsgDOTADPCSearchResults_League {
  id?: number | undefined;
  name?: string | undefined;
}

export interface CMsgDOTADPCTeamFavoriteRankings {
  teams: CMsgDOTADPCTeamFavoriteRankings_Team[];
}

export interface CMsgDOTADPCTeamFavoriteRankings_Team {
  teamId?: number | undefined;
  favorites?: number | undefined;
}

export interface CMsgDotaFantasyCraftingTabletPeriodData {
  fantasyPeriod?: number | undefined;
  tablets: CMsgDotaFantasyCraftingTabletPeriodData_Tablet[];
}

export interface CMsgDotaFantasyCraftingTabletPeriodData_Gem {
  type?: FantasyGemType | undefined;
  slot?: number | undefined;
  shape?: number | undefined;
  quality?: number | undefined;
  stat?: FantasyScoring | undefined;
}

export interface CMsgDotaFantasyCraftingTabletPeriodData_Tablet {
  tabletId?: number | undefined;
  tabletLevel?: number | undefined;
  fantasyRole?: FantasyRoles | undefined;
  accountId?: number | undefined;
  prefix?: number | undefined;
  suffix?: number | undefined;
  gems: CMsgDotaFantasyCraftingTabletPeriodData_Gem[];
  score?: number | undefined;
  bestSeries?: number | undefined;
}

export interface CMsgDotaFantasyCraftingTabletData {
  tabletPeriodData: CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry[];
}

export interface CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry {
  key?: number | undefined;
  value?: CMsgDotaFantasyCraftingTabletPeriodData | undefined;
}

export interface CMsgDotaFantasyCraftingUserData {
  availableRolls: number[];
  periodRollTokens: CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry[];
  periodScores: CMsgDotaFantasyCraftingUserData_PeriodScoresEntry[];
}

export interface CMsgDotaFantasyCraftingUserData_PeriodScore {
  totalScore?: number | undefined;
  percentile?: number | undefined;
}

export interface CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry {
  key?: number | undefined;
  value?: number | undefined;
}

export interface CMsgDotaFantasyCraftingUserData_PeriodScoresEntry {
  key?: number | undefined;
  value?: CMsgDotaFantasyCraftingUserData_PeriodScore | undefined;
}

export interface CMsgDotaFantasyCraftingDataCache {
  cacheEntries: CMsgDotaFantasyCraftingDataCache_CacheEntry[];
}

export interface CMsgDotaFantasyCraftingDataCache_CacheEntry {
  accountId?: number | undefined;
  fantasyLeague?: number | undefined;
  cacheData?: CMsgGCToClientFantasyCraftingDataUpdated | undefined;
}

export interface CMsgClientToGCFantasyCraftingGetData {
  fantasyLeague?: number | undefined;
  accountId?: number | undefined;
}

export interface CMsgClientToGCFantasyCraftingGetDataResponse {
  response?: CMsgClientToGCFantasyCraftingGetDataResponse_EResponse | undefined;
  userData?: CMsgDotaFantasyCraftingUserData | undefined;
  tabletData?: CMsgDotaFantasyCraftingTabletData | undefined;
}

export enum CMsgClientToGCFantasyCraftingGetDataResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eInvalidLeague = 5,
}

export function cMsgClientToGCFantasyCraftingGetDataResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCFantasyCraftingGetDataResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eInvalidLeague":
      return CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.k_eInvalidLeague;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCFantasyCraftingGetDataResponse_EResponse",
      );
  }
}

export function cMsgClientToGCFantasyCraftingGetDataResponse_EResponseToJSON(
  object: CMsgClientToGCFantasyCraftingGetDataResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCFantasyCraftingGetDataResponse_EResponse.k_eInvalidLeague:
      return "k_eInvalidLeague";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCFantasyCraftingGetDataResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCFantasyCraftingPerformOperation {
  fantasyLeague?: number | undefined;
  tabletId?: number | undefined;
  operationId?: number | undefined;
  extraData?: string | undefined;
}

export interface CMsgClientToGCFantasyCraftingPerformOperationResponse {
  response?: CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse | undefined;
  operationId?: number | undefined;
  tabletId?: number | undefined;
  userData?: CMsgDotaFantasyCraftingUserData | undefined;
  tabletData?: CMsgDotaFantasyCraftingTabletData | undefined;
  playerChoices: number[];
  prefixChoices: number[];
  suffixChoices: number[];
  titleChoices: CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice[];
}

export enum CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eInvalidLeague = 5,
  k_eNoTokens = 6,
  k_eMoreInfo = 7,
}

export function cMsgClientToGCFantasyCraftingPerformOperationResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eInvalidLeague":
      return CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eInvalidLeague;
    case 6:
    case "k_eNoTokens":
      return CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eNoTokens;
    case 7:
    case "k_eMoreInfo":
      return CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eMoreInfo;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " +
          object +
          " for enum CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse",
      );
  }
}

export function cMsgClientToGCFantasyCraftingPerformOperationResponse_EResponseToJSON(
  object: CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eInvalidLeague:
      return "k_eInvalidLeague";
    case CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eNoTokens:
      return "k_eNoTokens";
    case CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse.k_eMoreInfo:
      return "k_eMoreInfo";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " +
          object +
          " for enum CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice {
  prefixChoice?: number | undefined;
  suffixChoice?: number | undefined;
}

export interface CMsgGCToClientFantasyCraftingDataUpdated {
  fantasyLeague?: number | undefined;
  userData?: CMsgDotaFantasyCraftingUserData | undefined;
  tabletData?: CMsgDotaFantasyCraftingTabletData | undefined;
}

export interface CMsgClientToGCFantasyCraftingDevModifyTablet {
  fantasyLeague?: number | undefined;
  resetTablet?: boolean | undefined;
  modifyTokens?: number | undefined;
  upgradeTablets?: boolean | undefined;
  fantasyPeriod?: number | undefined;
}

export interface CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
  response?: CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse | undefined;
  userData?: CMsgDotaFantasyCraftingUserData | undefined;
  tabletData?: CMsgDotaFantasyCraftingTabletData | undefined;
}

export enum CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eInvalidLeague = 5,
}

export function cMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eInvalidLeague":
      return CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.k_eInvalidLeague;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " +
          object +
          " for enum CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse",
      );
  }
}

export function cMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponseToJSON(
  object: CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse.k_eInvalidLeague:
      return "k_eInvalidLeague";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " +
          object +
          " for enum CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCFantasyCraftingSelectPlayer {
  fantasyLeague?: number | undefined;
  accountId?: number | undefined;
}

export interface CMsgClientToGCFantasyCraftingSelectPlayerResponse {
  response?: CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse | undefined;
  tabletData?: CMsgDotaFantasyCraftingTabletData | undefined;
}

export enum CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eInvalidLeague = 5,
  k_eInvalidPlayer = 6,
}

export function cMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eInvalidLeague":
      return CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eInvalidLeague;
    case 6:
    case "k_eInvalidPlayer":
      return CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eInvalidPlayer;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse",
      );
  }
}

export function cMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponseToJSON(
  object: CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eInvalidLeague:
      return "k_eInvalidLeague";
    case CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse.k_eInvalidPlayer:
      return "k_eInvalidPlayer";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCFantasyCraftingGenerateTablets {
  fantasyLeague?: number | undefined;
  accountIds: number[];
}

export interface CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
  response?: CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse | undefined;
  userData?: CMsgDotaFantasyCraftingUserData | undefined;
  tabletData?: CMsgDotaFantasyCraftingTabletData | undefined;
}

export enum CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eInvalidLeague = 5,
  k_eInvalidPlayer = 6,
}

export function cMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eInvalidLeague":
      return CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eInvalidLeague;
    case 6:
    case "k_eInvalidPlayer":
      return CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eInvalidPlayer;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " +
          object +
          " for enum CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse",
      );
  }
}

export function cMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponseToJSON(
  object: CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eInvalidLeague:
      return "k_eInvalidLeague";
    case CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse.k_eInvalidPlayer:
      return "k_eInvalidPlayer";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " +
          object +
          " for enum CMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponse",
      );
  }
}

export interface CMsgClientToGcFantasyCraftingUpgradeTablets {
  fantasyLeague?: number | undefined;
}

export interface CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
  response?: CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse | undefined;
  tabletData?: CMsgDotaFantasyCraftingTabletData | undefined;
}

export enum CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eInvalidLeague = 5,
}

export function cMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eInvalidLeague":
      return CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.k_eInvalidLeague;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse",
      );
  }
}

export function cMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponseToJSON(
  object: CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse.k_eInvalidLeague:
      return "k_eInvalidLeague";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCFantasyCraftingRerollOptions {
  fantasyLeague?: number | undefined;
}

export interface CMsgClientToGCFantasyCraftingRerollOptionsResponse {
  response?: CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse | undefined;
  userData?: CMsgDotaFantasyCraftingUserData | undefined;
}

export enum CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eInvalidLeague = 5,
  k_eInsufficientTokens = 6,
}

export function cMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eInvalidLeague":
      return CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eInvalidLeague;
    case 6:
    case "k_eInsufficientTokens":
      return CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eInsufficientTokens;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse",
      );
  }
}

export function cMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponseToJSON(
  object: CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eInvalidLeague:
      return "k_eInvalidLeague";
    case CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse.k_eInsufficientTokens:
      return "k_eInsufficientTokens";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponse",
      );
  }
}

function createBaseCMsgDOTAPlayerInfo(): CMsgDOTAPlayerInfo {
  return {
    accountId: 0,
    name: "",
    countryCode: "",
    fantasyRole: 0,
    teamId: 0,
    teamName: "",
    teamTag: "",
    sponsor: "",
    isLocked: false,
    isPro: false,
    realName: "",
    totalEarnings: 0,
    results: [],
    teamUrlLogo: "",
    auditEntries: [],
    teamAbbreviation: "",
  };
}

export const CMsgDOTAPlayerInfo = {
  encode(message: CMsgDOTAPlayerInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.accountId !== undefined && message.accountId !== 0) {
      writer.uint32(8).uint32(message.accountId);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.countryCode !== undefined && message.countryCode !== "") {
      writer.uint32(26).string(message.countryCode);
    }
    if (message.fantasyRole !== undefined && message.fantasyRole !== 0) {
      writer.uint32(32).int32(message.fantasyRole);
    }
    if (message.teamId !== undefined && message.teamId !== 0) {
      writer.uint32(40).uint32(message.teamId);
    }
    if (message.teamName !== undefined && message.teamName !== "") {
      writer.uint32(50).string(message.teamName);
    }
    if (message.teamTag !== undefined && message.teamTag !== "") {
      writer.uint32(58).string(message.teamTag);
    }
    if (message.sponsor !== undefined && message.sponsor !== "") {
      writer.uint32(66).string(message.sponsor);
    }
    if (message.isLocked !== undefined && message.isLocked !== false) {
      writer.uint32(72).bool(message.isLocked);
    }
    if (message.isPro !== undefined && message.isPro !== false) {
      writer.uint32(80).bool(message.isPro);
    }
    if (message.realName !== undefined && message.realName !== "") {
      writer.uint32(90).string(message.realName);
    }
    if (message.totalEarnings !== undefined && message.totalEarnings !== 0) {
      writer.uint32(104).uint32(message.totalEarnings);
    }
    for (const v of message.results) {
      CMsgDOTAPlayerInfo_Results.encode(v!, writer.uint32(114).fork()).ldelim();
    }
    if (message.teamUrlLogo !== undefined && message.teamUrlLogo !== "") {
      writer.uint32(122).string(message.teamUrlLogo);
    }
    for (const v of message.auditEntries) {
      CMsgDOTAPlayerInfo_AuditEntry.encode(v!, writer.uint32(130).fork()).ldelim();
    }
    if (message.teamAbbreviation !== undefined && message.teamAbbreviation !== "") {
      writer.uint32(138).string(message.teamAbbreviation);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTAPlayerInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTAPlayerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.accountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.fantasyRole = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.teamId = reader.uint32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.teamName = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.teamTag = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.sponsor = reader.string();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.isLocked = reader.bool();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.isPro = reader.bool();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.realName = reader.string();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.totalEarnings = reader.uint32();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.results.push(CMsgDOTAPlayerInfo_Results.decode(reader, reader.uint32()));
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.teamUrlLogo = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.auditEntries.push(CMsgDOTAPlayerInfo_AuditEntry.decode(reader, reader.uint32()));
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.teamAbbreviation = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTAPlayerInfo {
    return {
      accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      fantasyRole: isSet(object.fantasyRole) ? fantasyRolesFromJSON(object.fantasyRole) : 0,
      teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
      teamName: isSet(object.teamName) ? globalThis.String(object.teamName) : "",
      teamTag: isSet(object.teamTag) ? globalThis.String(object.teamTag) : "",
      sponsor: isSet(object.sponsor) ? globalThis.String(object.sponsor) : "",
      isLocked: isSet(object.isLocked) ? globalThis.Boolean(object.isLocked) : false,
      isPro: isSet(object.isPro) ? globalThis.Boolean(object.isPro) : false,
      realName: isSet(object.realName) ? globalThis.String(object.realName) : "",
      totalEarnings: isSet(object.totalEarnings) ? globalThis.Number(object.totalEarnings) : 0,
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => CMsgDOTAPlayerInfo_Results.fromJSON(e))
        : [],
      teamUrlLogo: isSet(object.teamUrlLogo) ? globalThis.String(object.teamUrlLogo) : "",
      auditEntries: globalThis.Array.isArray(object?.auditEntries)
        ? object.auditEntries.map((e: any) => CMsgDOTAPlayerInfo_AuditEntry.fromJSON(e))
        : [],
      teamAbbreviation: isSet(object.teamAbbreviation) ? globalThis.String(object.teamAbbreviation) : "",
    };
  },

  toJSON(message: CMsgDOTAPlayerInfo): unknown {
    const obj: any = {};
    if (message.accountId !== undefined && message.accountId !== 0) {
      obj.accountId = Math.round(message.accountId);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.countryCode !== undefined && message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.fantasyRole !== undefined && message.fantasyRole !== 0) {
      obj.fantasyRole = fantasyRolesToJSON(message.fantasyRole);
    }
    if (message.teamId !== undefined && message.teamId !== 0) {
      obj.teamId = Math.round(message.teamId);
    }
    if (message.teamName !== undefined && message.teamName !== "") {
      obj.teamName = message.teamName;
    }
    if (message.teamTag !== undefined && message.teamTag !== "") {
      obj.teamTag = message.teamTag;
    }
    if (message.sponsor !== undefined && message.sponsor !== "") {
      obj.sponsor = message.sponsor;
    }
    if (message.isLocked !== undefined && message.isLocked !== false) {
      obj.isLocked = message.isLocked;
    }
    if (message.isPro !== undefined && message.isPro !== false) {
      obj.isPro = message.isPro;
    }
    if (message.realName !== undefined && message.realName !== "") {
      obj.realName = message.realName;
    }
    if (message.totalEarnings !== undefined && message.totalEarnings !== 0) {
      obj.totalEarnings = Math.round(message.totalEarnings);
    }
    if (message.results?.length) {
      obj.results = message.results.map((e) => CMsgDOTAPlayerInfo_Results.toJSON(e));
    }
    if (message.teamUrlLogo !== undefined && message.teamUrlLogo !== "") {
      obj.teamUrlLogo = message.teamUrlLogo;
    }
    if (message.auditEntries?.length) {
      obj.auditEntries = message.auditEntries.map((e) => CMsgDOTAPlayerInfo_AuditEntry.toJSON(e));
    }
    if (message.teamAbbreviation !== undefined && message.teamAbbreviation !== "") {
      obj.teamAbbreviation = message.teamAbbreviation;
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTAPlayerInfo>): CMsgDOTAPlayerInfo {
    return CMsgDOTAPlayerInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTAPlayerInfo>): CMsgDOTAPlayerInfo {
    const message = createBaseCMsgDOTAPlayerInfo();
    message.accountId = object.accountId ?? 0;
    message.name = object.name ?? "";
    message.countryCode = object.countryCode ?? "";
    message.fantasyRole = object.fantasyRole ?? 0;
    message.teamId = object.teamId ?? 0;
    message.teamName = object.teamName ?? "";
    message.teamTag = object.teamTag ?? "";
    message.sponsor = object.sponsor ?? "";
    message.isLocked = object.isLocked ?? false;
    message.isPro = object.isPro ?? false;
    message.realName = object.realName ?? "";
    message.totalEarnings = object.totalEarnings ?? 0;
    message.results = object.results?.map((e) => CMsgDOTAPlayerInfo_Results.fromPartial(e)) || [];
    message.teamUrlLogo = object.teamUrlLogo ?? "";
    message.auditEntries = object.auditEntries?.map((e) => CMsgDOTAPlayerInfo_AuditEntry.fromPartial(e)) || [];
    message.teamAbbreviation = object.teamAbbreviation ?? "";
    return message;
  },
};

function createBaseCMsgDOTAPlayerInfo_Results(): CMsgDOTAPlayerInfo_Results {
  return { leagueId: 0, placement: 0, earnings: 0 };
}

export const CMsgDOTAPlayerInfo_Results = {
  encode(message: CMsgDOTAPlayerInfo_Results, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      writer.uint32(8).uint32(message.leagueId);
    }
    if (message.placement !== undefined && message.placement !== 0) {
      writer.uint32(16).uint32(message.placement);
    }
    if (message.earnings !== undefined && message.earnings !== 0) {
      writer.uint32(24).uint32(message.earnings);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTAPlayerInfo_Results {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTAPlayerInfo_Results();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.leagueId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.placement = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.earnings = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTAPlayerInfo_Results {
    return {
      leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
      placement: isSet(object.placement) ? globalThis.Number(object.placement) : 0,
      earnings: isSet(object.earnings) ? globalThis.Number(object.earnings) : 0,
    };
  },

  toJSON(message: CMsgDOTAPlayerInfo_Results): unknown {
    const obj: any = {};
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      obj.leagueId = Math.round(message.leagueId);
    }
    if (message.placement !== undefined && message.placement !== 0) {
      obj.placement = Math.round(message.placement);
    }
    if (message.earnings !== undefined && message.earnings !== 0) {
      obj.earnings = Math.round(message.earnings);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTAPlayerInfo_Results>): CMsgDOTAPlayerInfo_Results {
    return CMsgDOTAPlayerInfo_Results.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTAPlayerInfo_Results>): CMsgDOTAPlayerInfo_Results {
    const message = createBaseCMsgDOTAPlayerInfo_Results();
    message.leagueId = object.leagueId ?? 0;
    message.placement = object.placement ?? 0;
    message.earnings = object.earnings ?? 0;
    return message;
  },
};

function createBaseCMsgDOTAPlayerInfo_AuditEntry(): CMsgDOTAPlayerInfo_AuditEntry {
  return { startTimestamp: 0, endTimestamp: 0, teamId: 0, teamName: "", teamTag: "", teamUrlLogo: "" };
}

export const CMsgDOTAPlayerInfo_AuditEntry = {
  encode(message: CMsgDOTAPlayerInfo_AuditEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.startTimestamp !== undefined && message.startTimestamp !== 0) {
      writer.uint32(8).uint32(message.startTimestamp);
    }
    if (message.endTimestamp !== undefined && message.endTimestamp !== 0) {
      writer.uint32(16).uint32(message.endTimestamp);
    }
    if (message.teamId !== undefined && message.teamId !== 0) {
      writer.uint32(24).uint32(message.teamId);
    }
    if (message.teamName !== undefined && message.teamName !== "") {
      writer.uint32(34).string(message.teamName);
    }
    if (message.teamTag !== undefined && message.teamTag !== "") {
      writer.uint32(42).string(message.teamTag);
    }
    if (message.teamUrlLogo !== undefined && message.teamUrlLogo !== "") {
      writer.uint32(50).string(message.teamUrlLogo);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTAPlayerInfo_AuditEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTAPlayerInfo_AuditEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.startTimestamp = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.endTimestamp = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.teamId = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.teamName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.teamTag = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.teamUrlLogo = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTAPlayerInfo_AuditEntry {
    return {
      startTimestamp: isSet(object.startTimestamp) ? globalThis.Number(object.startTimestamp) : 0,
      endTimestamp: isSet(object.endTimestamp) ? globalThis.Number(object.endTimestamp) : 0,
      teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
      teamName: isSet(object.teamName) ? globalThis.String(object.teamName) : "",
      teamTag: isSet(object.teamTag) ? globalThis.String(object.teamTag) : "",
      teamUrlLogo: isSet(object.teamUrlLogo) ? globalThis.String(object.teamUrlLogo) : "",
    };
  },

  toJSON(message: CMsgDOTAPlayerInfo_AuditEntry): unknown {
    const obj: any = {};
    if (message.startTimestamp !== undefined && message.startTimestamp !== 0) {
      obj.startTimestamp = Math.round(message.startTimestamp);
    }
    if (message.endTimestamp !== undefined && message.endTimestamp !== 0) {
      obj.endTimestamp = Math.round(message.endTimestamp);
    }
    if (message.teamId !== undefined && message.teamId !== 0) {
      obj.teamId = Math.round(message.teamId);
    }
    if (message.teamName !== undefined && message.teamName !== "") {
      obj.teamName = message.teamName;
    }
    if (message.teamTag !== undefined && message.teamTag !== "") {
      obj.teamTag = message.teamTag;
    }
    if (message.teamUrlLogo !== undefined && message.teamUrlLogo !== "") {
      obj.teamUrlLogo = message.teamUrlLogo;
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTAPlayerInfo_AuditEntry>): CMsgDOTAPlayerInfo_AuditEntry {
    return CMsgDOTAPlayerInfo_AuditEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTAPlayerInfo_AuditEntry>): CMsgDOTAPlayerInfo_AuditEntry {
    const message = createBaseCMsgDOTAPlayerInfo_AuditEntry();
    message.startTimestamp = object.startTimestamp ?? 0;
    message.endTimestamp = object.endTimestamp ?? 0;
    message.teamId = object.teamId ?? 0;
    message.teamName = object.teamName ?? "";
    message.teamTag = object.teamTag ?? "";
    message.teamUrlLogo = object.teamUrlLogo ?? "";
    return message;
  },
};

function createBaseCMsgDOTAPlayerInfoList(): CMsgDOTAPlayerInfoList {
  return { playerInfos: [] };
}

export const CMsgDOTAPlayerInfoList = {
  encode(message: CMsgDOTAPlayerInfoList, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.playerInfos) {
      CMsgDOTAPlayerInfo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTAPlayerInfoList {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTAPlayerInfoList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.playerInfos.push(CMsgDOTAPlayerInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTAPlayerInfoList {
    return {
      playerInfos: globalThis.Array.isArray(object?.playerInfos)
        ? object.playerInfos.map((e: any) => CMsgDOTAPlayerInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgDOTAPlayerInfoList): unknown {
    const obj: any = {};
    if (message.playerInfos?.length) {
      obj.playerInfos = message.playerInfos.map((e) => CMsgDOTAPlayerInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTAPlayerInfoList>): CMsgDOTAPlayerInfoList {
    return CMsgDOTAPlayerInfoList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTAPlayerInfoList>): CMsgDOTAPlayerInfoList {
    const message = createBaseCMsgDOTAPlayerInfoList();
    message.playerInfos = object.playerInfos?.map((e) => CMsgDOTAPlayerInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgDOTATeamRoster(): CMsgDOTATeamRoster {
  return { timestamp: 0, teamId: 0, memberAccountIds: [], coachAccountId: 0 };
}

export const CMsgDOTATeamRoster = {
  encode(message: CMsgDOTATeamRoster, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.timestamp !== undefined && message.timestamp !== 0) {
      writer.uint32(8).uint32(message.timestamp);
    }
    if (message.teamId !== undefined && message.teamId !== 0) {
      writer.uint32(16).uint32(message.teamId);
    }
    writer.uint32(26).fork();
    for (const v of message.memberAccountIds) {
      writer.uint32(v);
    }
    writer.ldelim();
    if (message.coachAccountId !== undefined && message.coachAccountId !== 0) {
      writer.uint32(32).uint32(message.coachAccountId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTATeamRoster {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTATeamRoster();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.timestamp = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.teamId = reader.uint32();
          continue;
        case 3:
          if (tag === 24) {
            message.memberAccountIds.push(reader.uint32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.memberAccountIds.push(reader.uint32());
            }

            continue;
          }

          break;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.coachAccountId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTATeamRoster {
    return {
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
      memberAccountIds: globalThis.Array.isArray(object?.memberAccountIds)
        ? object.memberAccountIds.map((e: any) => globalThis.Number(e))
        : [],
      coachAccountId: isSet(object.coachAccountId) ? globalThis.Number(object.coachAccountId) : 0,
    };
  },

  toJSON(message: CMsgDOTATeamRoster): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined && message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.teamId !== undefined && message.teamId !== 0) {
      obj.teamId = Math.round(message.teamId);
    }
    if (message.memberAccountIds?.length) {
      obj.memberAccountIds = message.memberAccountIds.map((e) => Math.round(e));
    }
    if (message.coachAccountId !== undefined && message.coachAccountId !== 0) {
      obj.coachAccountId = Math.round(message.coachAccountId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTATeamRoster>): CMsgDOTATeamRoster {
    return CMsgDOTATeamRoster.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTATeamRoster>): CMsgDOTATeamRoster {
    const message = createBaseCMsgDOTATeamRoster();
    message.timestamp = object.timestamp ?? 0;
    message.teamId = object.teamId ?? 0;
    message.memberAccountIds = object.memberAccountIds?.map((e) => e) || [];
    message.coachAccountId = object.coachAccountId ?? 0;
    return message;
  },
};

function createBaseCMsgDOTADPCProfileInfo(): CMsgDOTADPCProfileInfo {
  return { playerInfo: undefined, predictionInfo: undefined, fantasyInfo: undefined, disabledNotifications: [] };
}

export const CMsgDOTADPCProfileInfo = {
  encode(message: CMsgDOTADPCProfileInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.playerInfo !== undefined) {
      CMsgDOTAPlayerInfo.encode(message.playerInfo, writer.uint32(10).fork()).ldelim();
    }
    if (message.predictionInfo !== undefined) {
      CMsgDOTADPCProfileInfo_PredictionInfo.encode(message.predictionInfo, writer.uint32(18).fork()).ldelim();
    }
    if (message.fantasyInfo !== undefined) {
      CMsgDOTADPCProfileInfo_FantasyInfo.encode(message.fantasyInfo, writer.uint32(26).fork()).ldelim();
    }
    writer.uint32(34).fork();
    for (const v of message.disabledNotifications) {
      writer.uint32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTADPCProfileInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTADPCProfileInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.playerInfo = CMsgDOTAPlayerInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.predictionInfo = CMsgDOTADPCProfileInfo_PredictionInfo.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.fantasyInfo = CMsgDOTADPCProfileInfo_FantasyInfo.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag === 32) {
            message.disabledNotifications.push(reader.uint32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.disabledNotifications.push(reader.uint32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTADPCProfileInfo {
    return {
      playerInfo: isSet(object.playerInfo) ? CMsgDOTAPlayerInfo.fromJSON(object.playerInfo) : undefined,
      predictionInfo: isSet(object.predictionInfo)
        ? CMsgDOTADPCProfileInfo_PredictionInfo.fromJSON(object.predictionInfo)
        : undefined,
      fantasyInfo: isSet(object.fantasyInfo)
        ? CMsgDOTADPCProfileInfo_FantasyInfo.fromJSON(object.fantasyInfo)
        : undefined,
      disabledNotifications: globalThis.Array.isArray(object?.disabledNotifications)
        ? object.disabledNotifications.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: CMsgDOTADPCProfileInfo): unknown {
    const obj: any = {};
    if (message.playerInfo !== undefined) {
      obj.playerInfo = CMsgDOTAPlayerInfo.toJSON(message.playerInfo);
    }
    if (message.predictionInfo !== undefined) {
      obj.predictionInfo = CMsgDOTADPCProfileInfo_PredictionInfo.toJSON(message.predictionInfo);
    }
    if (message.fantasyInfo !== undefined) {
      obj.fantasyInfo = CMsgDOTADPCProfileInfo_FantasyInfo.toJSON(message.fantasyInfo);
    }
    if (message.disabledNotifications?.length) {
      obj.disabledNotifications = message.disabledNotifications.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTADPCProfileInfo>): CMsgDOTADPCProfileInfo {
    return CMsgDOTADPCProfileInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTADPCProfileInfo>): CMsgDOTADPCProfileInfo {
    const message = createBaseCMsgDOTADPCProfileInfo();
    message.playerInfo =
      object.playerInfo !== undefined && object.playerInfo !== null
        ? CMsgDOTAPlayerInfo.fromPartial(object.playerInfo)
        : undefined;
    message.predictionInfo =
      object.predictionInfo !== undefined && object.predictionInfo !== null
        ? CMsgDOTADPCProfileInfo_PredictionInfo.fromPartial(object.predictionInfo)
        : undefined;
    message.fantasyInfo =
      object.fantasyInfo !== undefined && object.fantasyInfo !== null
        ? CMsgDOTADPCProfileInfo_FantasyInfo.fromPartial(object.fantasyInfo)
        : undefined;
    message.disabledNotifications = object.disabledNotifications?.map((e) => e) || [];
    return message;
  },
};

function createBaseCMsgDOTADPCProfileInfo_PredictionInfo(): CMsgDOTADPCProfileInfo_PredictionInfo {
  return { percent: 0, shardWinnings: 0 };
}

export const CMsgDOTADPCProfileInfo_PredictionInfo = {
  encode(message: CMsgDOTADPCProfileInfo_PredictionInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.percent !== undefined && message.percent !== 0) {
      writer.uint32(8).uint32(message.percent);
    }
    if (message.shardWinnings !== undefined && message.shardWinnings !== 0) {
      writer.uint32(16).int32(message.shardWinnings);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTADPCProfileInfo_PredictionInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTADPCProfileInfo_PredictionInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.percent = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.shardWinnings = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTADPCProfileInfo_PredictionInfo {
    return {
      percent: isSet(object.percent) ? globalThis.Number(object.percent) : 0,
      shardWinnings: isSet(object.shardWinnings) ? globalThis.Number(object.shardWinnings) : 0,
    };
  },

  toJSON(message: CMsgDOTADPCProfileInfo_PredictionInfo): unknown {
    const obj: any = {};
    if (message.percent !== undefined && message.percent !== 0) {
      obj.percent = Math.round(message.percent);
    }
    if (message.shardWinnings !== undefined && message.shardWinnings !== 0) {
      obj.shardWinnings = Math.round(message.shardWinnings);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTADPCProfileInfo_PredictionInfo>): CMsgDOTADPCProfileInfo_PredictionInfo {
    return CMsgDOTADPCProfileInfo_PredictionInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTADPCProfileInfo_PredictionInfo>): CMsgDOTADPCProfileInfo_PredictionInfo {
    const message = createBaseCMsgDOTADPCProfileInfo_PredictionInfo();
    message.percent = object.percent ?? 0;
    message.shardWinnings = object.shardWinnings ?? 0;
    return message;
  },
};

function createBaseCMsgDOTADPCProfileInfo_FantasyInfo(): CMsgDOTADPCProfileInfo_FantasyInfo {
  return { top90Finishes: 0, top75Finishes: 0, top50Finishes: 0, shardWinnings: 0 };
}

export const CMsgDOTADPCProfileInfo_FantasyInfo = {
  encode(message: CMsgDOTADPCProfileInfo_FantasyInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.top90Finishes !== undefined && message.top90Finishes !== 0) {
      writer.uint32(8).uint32(message.top90Finishes);
    }
    if (message.top75Finishes !== undefined && message.top75Finishes !== 0) {
      writer.uint32(16).uint32(message.top75Finishes);
    }
    if (message.top50Finishes !== undefined && message.top50Finishes !== 0) {
      writer.uint32(24).uint32(message.top50Finishes);
    }
    if (message.shardWinnings !== undefined && message.shardWinnings !== 0) {
      writer.uint32(32).uint32(message.shardWinnings);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTADPCProfileInfo_FantasyInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTADPCProfileInfo_FantasyInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.top90Finishes = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.top75Finishes = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.top50Finishes = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.shardWinnings = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTADPCProfileInfo_FantasyInfo {
    return {
      top90Finishes: isSet(object.top90Finishes) ? globalThis.Number(object.top90Finishes) : 0,
      top75Finishes: isSet(object.top75Finishes) ? globalThis.Number(object.top75Finishes) : 0,
      top50Finishes: isSet(object.top50Finishes) ? globalThis.Number(object.top50Finishes) : 0,
      shardWinnings: isSet(object.shardWinnings) ? globalThis.Number(object.shardWinnings) : 0,
    };
  },

  toJSON(message: CMsgDOTADPCProfileInfo_FantasyInfo): unknown {
    const obj: any = {};
    if (message.top90Finishes !== undefined && message.top90Finishes !== 0) {
      obj.top90Finishes = Math.round(message.top90Finishes);
    }
    if (message.top75Finishes !== undefined && message.top75Finishes !== 0) {
      obj.top75Finishes = Math.round(message.top75Finishes);
    }
    if (message.top50Finishes !== undefined && message.top50Finishes !== 0) {
      obj.top50Finishes = Math.round(message.top50Finishes);
    }
    if (message.shardWinnings !== undefined && message.shardWinnings !== 0) {
      obj.shardWinnings = Math.round(message.shardWinnings);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTADPCProfileInfo_FantasyInfo>): CMsgDOTADPCProfileInfo_FantasyInfo {
    return CMsgDOTADPCProfileInfo_FantasyInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTADPCProfileInfo_FantasyInfo>): CMsgDOTADPCProfileInfo_FantasyInfo {
    const message = createBaseCMsgDOTADPCProfileInfo_FantasyInfo();
    message.top90Finishes = object.top90Finishes ?? 0;
    message.top75Finishes = object.top75Finishes ?? 0;
    message.top50Finishes = object.top50Finishes ?? 0;
    message.shardWinnings = object.shardWinnings ?? 0;
    return message;
  },
};

function createBaseCMsgDOTALeaderboards(): CMsgDOTALeaderboards {
  return { leaderboards: [] };
}

export const CMsgDOTALeaderboards = {
  encode(message: CMsgDOTALeaderboards, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.leaderboards) {
      CMsgDOTALeaderboards_RegionLeaderboard.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTALeaderboards {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTALeaderboards();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.leaderboards.push(CMsgDOTALeaderboards_RegionLeaderboard.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTALeaderboards {
    return {
      leaderboards: globalThis.Array.isArray(object?.leaderboards)
        ? object.leaderboards.map((e: any) => CMsgDOTALeaderboards_RegionLeaderboard.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgDOTALeaderboards): unknown {
    const obj: any = {};
    if (message.leaderboards?.length) {
      obj.leaderboards = message.leaderboards.map((e) => CMsgDOTALeaderboards_RegionLeaderboard.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTALeaderboards>): CMsgDOTALeaderboards {
    return CMsgDOTALeaderboards.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTALeaderboards>): CMsgDOTALeaderboards {
    const message = createBaseCMsgDOTALeaderboards();
    message.leaderboards = object.leaderboards?.map((e) => CMsgDOTALeaderboards_RegionLeaderboard.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgDOTALeaderboards_RegionLeaderboard(): CMsgDOTALeaderboards_RegionLeaderboard {
  return { division: 0, accountIds: [] };
}

export const CMsgDOTALeaderboards_RegionLeaderboard = {
  encode(message: CMsgDOTALeaderboards_RegionLeaderboard, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.division !== undefined && message.division !== 0) {
      writer.uint32(8).uint32(message.division);
    }
    writer.uint32(18).fork();
    for (const v of message.accountIds) {
      writer.uint32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTALeaderboards_RegionLeaderboard {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTALeaderboards_RegionLeaderboard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.division = reader.uint32();
          continue;
        case 2:
          if (tag === 16) {
            message.accountIds.push(reader.uint32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.accountIds.push(reader.uint32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTALeaderboards_RegionLeaderboard {
    return {
      division: isSet(object.division) ? globalThis.Number(object.division) : 0,
      accountIds: globalThis.Array.isArray(object?.accountIds)
        ? object.accountIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: CMsgDOTALeaderboards_RegionLeaderboard): unknown {
    const obj: any = {};
    if (message.division !== undefined && message.division !== 0) {
      obj.division = Math.round(message.division);
    }
    if (message.accountIds?.length) {
      obj.accountIds = message.accountIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTALeaderboards_RegionLeaderboard>): CMsgDOTALeaderboards_RegionLeaderboard {
    return CMsgDOTALeaderboards_RegionLeaderboard.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTALeaderboards_RegionLeaderboard>): CMsgDOTALeaderboards_RegionLeaderboard {
    const message = createBaseCMsgDOTALeaderboards_RegionLeaderboard();
    message.division = object.division ?? 0;
    message.accountIds = object.accountIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseCMsgDOTAPassportVoteTeamGuess(): CMsgDOTAPassportVoteTeamGuess {
  return { leagueId: 0, winnerId: 0, runnerupId: 0 };
}

export const CMsgDOTAPassportVoteTeamGuess = {
  encode(message: CMsgDOTAPassportVoteTeamGuess, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      writer.uint32(8).uint32(message.leagueId);
    }
    if (message.winnerId !== undefined && message.winnerId !== 0) {
      writer.uint32(16).uint32(message.winnerId);
    }
    if (message.runnerupId !== undefined && message.runnerupId !== 0) {
      writer.uint32(24).uint32(message.runnerupId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTAPassportVoteTeamGuess {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTAPassportVoteTeamGuess();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.leagueId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.winnerId = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.runnerupId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTAPassportVoteTeamGuess {
    return {
      leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
      winnerId: isSet(object.winnerId) ? globalThis.Number(object.winnerId) : 0,
      runnerupId: isSet(object.runnerupId) ? globalThis.Number(object.runnerupId) : 0,
    };
  },

  toJSON(message: CMsgDOTAPassportVoteTeamGuess): unknown {
    const obj: any = {};
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      obj.leagueId = Math.round(message.leagueId);
    }
    if (message.winnerId !== undefined && message.winnerId !== 0) {
      obj.winnerId = Math.round(message.winnerId);
    }
    if (message.runnerupId !== undefined && message.runnerupId !== 0) {
      obj.runnerupId = Math.round(message.runnerupId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTAPassportVoteTeamGuess>): CMsgDOTAPassportVoteTeamGuess {
    return CMsgDOTAPassportVoteTeamGuess.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTAPassportVoteTeamGuess>): CMsgDOTAPassportVoteTeamGuess {
    const message = createBaseCMsgDOTAPassportVoteTeamGuess();
    message.leagueId = object.leagueId ?? 0;
    message.winnerId = object.winnerId ?? 0;
    message.runnerupId = object.runnerupId ?? 0;
    return message;
  },
};

function createBaseCMsgDOTAPassportVoteGenericSelection(): CMsgDOTAPassportVoteGenericSelection {
  return { selectionIndex: 0, selection: 0 };
}

export const CMsgDOTAPassportVoteGenericSelection = {
  encode(message: CMsgDOTAPassportVoteGenericSelection, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.selectionIndex !== undefined && message.selectionIndex !== 0) {
      writer.uint32(8).int32(message.selectionIndex);
    }
    if (message.selection !== undefined && message.selection !== 0) {
      writer.uint32(16).uint32(message.selection);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTAPassportVoteGenericSelection {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTAPassportVoteGenericSelection();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.selectionIndex = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.selection = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTAPassportVoteGenericSelection {
    return {
      selectionIndex: isSet(object.selectionIndex)
        ? dOTA2013PassportSelectionIndicesFromJSON(object.selectionIndex)
        : 0,
      selection: isSet(object.selection) ? globalThis.Number(object.selection) : 0,
    };
  },

  toJSON(message: CMsgDOTAPassportVoteGenericSelection): unknown {
    const obj: any = {};
    if (message.selectionIndex !== undefined && message.selectionIndex !== 0) {
      obj.selectionIndex = dOTA2013PassportSelectionIndicesToJSON(message.selectionIndex);
    }
    if (message.selection !== undefined && message.selection !== 0) {
      obj.selection = Math.round(message.selection);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTAPassportVoteGenericSelection>): CMsgDOTAPassportVoteGenericSelection {
    return CMsgDOTAPassportVoteGenericSelection.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTAPassportVoteGenericSelection>): CMsgDOTAPassportVoteGenericSelection {
    const message = createBaseCMsgDOTAPassportVoteGenericSelection();
    message.selectionIndex = object.selectionIndex ?? 0;
    message.selection = object.selection ?? 0;
    return message;
  },
};

function createBaseCMsgDOTAPassportStampedPlayer(): CMsgDOTAPassportStampedPlayer {
  return { steamId: "0", stampLevel: 0 };
}

export const CMsgDOTAPassportStampedPlayer = {
  encode(message: CMsgDOTAPassportStampedPlayer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.steamId !== undefined && message.steamId !== "0") {
      writer.uint32(8).uint64(message.steamId);
    }
    if (message.stampLevel !== undefined && message.stampLevel !== 0) {
      writer.uint32(16).uint32(message.stampLevel);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTAPassportStampedPlayer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTAPassportStampedPlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.steamId = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.stampLevel = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTAPassportStampedPlayer {
    return {
      steamId: isSet(object.steamId) ? globalThis.String(object.steamId) : "0",
      stampLevel: isSet(object.stampLevel) ? globalThis.Number(object.stampLevel) : 0,
    };
  },

  toJSON(message: CMsgDOTAPassportStampedPlayer): unknown {
    const obj: any = {};
    if (message.steamId !== undefined && message.steamId !== "0") {
      obj.steamId = message.steamId;
    }
    if (message.stampLevel !== undefined && message.stampLevel !== 0) {
      obj.stampLevel = Math.round(message.stampLevel);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTAPassportStampedPlayer>): CMsgDOTAPassportStampedPlayer {
    return CMsgDOTAPassportStampedPlayer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTAPassportStampedPlayer>): CMsgDOTAPassportStampedPlayer {
    const message = createBaseCMsgDOTAPassportStampedPlayer();
    message.steamId = object.steamId ?? "0";
    message.stampLevel = object.stampLevel ?? 0;
    return message;
  },
};

function createBaseCMsgDOTAPassportPlayerCardChallenge(): CMsgDOTAPassportPlayerCardChallenge {
  return { challengeId: 0 };
}

export const CMsgDOTAPassportPlayerCardChallenge = {
  encode(message: CMsgDOTAPassportPlayerCardChallenge, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.challengeId !== undefined && message.challengeId !== 0) {
      writer.uint32(8).uint32(message.challengeId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTAPassportPlayerCardChallenge {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTAPassportPlayerCardChallenge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.challengeId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTAPassportPlayerCardChallenge {
    return { challengeId: isSet(object.challengeId) ? globalThis.Number(object.challengeId) : 0 };
  },

  toJSON(message: CMsgDOTAPassportPlayerCardChallenge): unknown {
    const obj: any = {};
    if (message.challengeId !== undefined && message.challengeId !== 0) {
      obj.challengeId = Math.round(message.challengeId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTAPassportPlayerCardChallenge>): CMsgDOTAPassportPlayerCardChallenge {
    return CMsgDOTAPassportPlayerCardChallenge.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTAPassportPlayerCardChallenge>): CMsgDOTAPassportPlayerCardChallenge {
    const message = createBaseCMsgDOTAPassportPlayerCardChallenge();
    message.challengeId = object.challengeId ?? 0;
    return message;
  },
};

function createBaseCMsgDOTAPassportVote(): CMsgDOTAPassportVote {
  return { teamVotes: [], genericSelections: [], stampedPlayers: [], playerCardChallenges: [] };
}

export const CMsgDOTAPassportVote = {
  encode(message: CMsgDOTAPassportVote, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.teamVotes) {
      CMsgDOTAPassportVoteTeamGuess.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.genericSelections) {
      CMsgDOTAPassportVoteGenericSelection.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.stampedPlayers) {
      CMsgDOTAPassportStampedPlayer.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.playerCardChallenges) {
      CMsgDOTAPassportPlayerCardChallenge.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTAPassportVote {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTAPassportVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.teamVotes.push(CMsgDOTAPassportVoteTeamGuess.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.genericSelections.push(CMsgDOTAPassportVoteGenericSelection.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.stampedPlayers.push(CMsgDOTAPassportStampedPlayer.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.playerCardChallenges.push(CMsgDOTAPassportPlayerCardChallenge.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTAPassportVote {
    return {
      teamVotes: globalThis.Array.isArray(object?.teamVotes)
        ? object.teamVotes.map((e: any) => CMsgDOTAPassportVoteTeamGuess.fromJSON(e))
        : [],
      genericSelections: globalThis.Array.isArray(object?.genericSelections)
        ? object.genericSelections.map((e: any) => CMsgDOTAPassportVoteGenericSelection.fromJSON(e))
        : [],
      stampedPlayers: globalThis.Array.isArray(object?.stampedPlayers)
        ? object.stampedPlayers.map((e: any) => CMsgDOTAPassportStampedPlayer.fromJSON(e))
        : [],
      playerCardChallenges: globalThis.Array.isArray(object?.playerCardChallenges)
        ? object.playerCardChallenges.map((e: any) => CMsgDOTAPassportPlayerCardChallenge.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgDOTAPassportVote): unknown {
    const obj: any = {};
    if (message.teamVotes?.length) {
      obj.teamVotes = message.teamVotes.map((e) => CMsgDOTAPassportVoteTeamGuess.toJSON(e));
    }
    if (message.genericSelections?.length) {
      obj.genericSelections = message.genericSelections.map((e) => CMsgDOTAPassportVoteGenericSelection.toJSON(e));
    }
    if (message.stampedPlayers?.length) {
      obj.stampedPlayers = message.stampedPlayers.map((e) => CMsgDOTAPassportStampedPlayer.toJSON(e));
    }
    if (message.playerCardChallenges?.length) {
      obj.playerCardChallenges = message.playerCardChallenges.map((e) => CMsgDOTAPassportPlayerCardChallenge.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTAPassportVote>): CMsgDOTAPassportVote {
    return CMsgDOTAPassportVote.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTAPassportVote>): CMsgDOTAPassportVote {
    const message = createBaseCMsgDOTAPassportVote();
    message.teamVotes = object.teamVotes?.map((e) => CMsgDOTAPassportVoteTeamGuess.fromPartial(e)) || [];
    message.genericSelections =
      object.genericSelections?.map((e) => CMsgDOTAPassportVoteGenericSelection.fromPartial(e)) || [];
    message.stampedPlayers = object.stampedPlayers?.map((e) => CMsgDOTAPassportStampedPlayer.fromPartial(e)) || [];
    message.playerCardChallenges =
      object.playerCardChallenges?.map((e) => CMsgDOTAPassportPlayerCardChallenge.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgClientToGCGetPlayerCardRosterRequest(): CMsgClientToGCGetPlayerCardRosterRequest {
  return { leagueId: 0, fantasyPeriod: 4294967295 };
}

export const CMsgClientToGCGetPlayerCardRosterRequest = {
  encode(message: CMsgClientToGCGetPlayerCardRosterRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      writer.uint32(8).uint32(message.leagueId);
    }
    if (message.fantasyPeriod !== undefined && message.fantasyPeriod !== 4294967295) {
      writer.uint32(24).uint32(message.fantasyPeriod);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCGetPlayerCardRosterRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCGetPlayerCardRosterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.leagueId = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.fantasyPeriod = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCGetPlayerCardRosterRequest {
    return {
      leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
      fantasyPeriod: isSet(object.fantasyPeriod) ? globalThis.Number(object.fantasyPeriod) : 4294967295,
    };
  },

  toJSON(message: CMsgClientToGCGetPlayerCardRosterRequest): unknown {
    const obj: any = {};
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      obj.leagueId = Math.round(message.leagueId);
    }
    if (message.fantasyPeriod !== undefined && message.fantasyPeriod !== 4294967295) {
      obj.fantasyPeriod = Math.round(message.fantasyPeriod);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCGetPlayerCardRosterRequest>): CMsgClientToGCGetPlayerCardRosterRequest {
    return CMsgClientToGCGetPlayerCardRosterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCGetPlayerCardRosterRequest>): CMsgClientToGCGetPlayerCardRosterRequest {
    const message = createBaseCMsgClientToGCGetPlayerCardRosterRequest();
    message.leagueId = object.leagueId ?? 0;
    message.fantasyPeriod = object.fantasyPeriod ?? 4294967295;
    return message;
  },
};

function createBaseCMsgClientToGCGetPlayerCardRosterResponse(): CMsgClientToGCGetPlayerCardRosterResponse {
  return { result: 0, playerCardItemId: [], score: 0, finalized: false, percentile: 0 };
}

export const CMsgClientToGCGetPlayerCardRosterResponse = {
  encode(message: CMsgClientToGCGetPlayerCardRosterResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.result !== undefined && message.result !== 0) {
      writer.uint32(8).int32(message.result);
    }
    writer.uint32(18).fork();
    for (const v of message.playerCardItemId) {
      writer.uint64(v);
    }
    writer.ldelim();
    if (message.score !== undefined && message.score !== 0) {
      writer.uint32(29).float(message.score);
    }
    if (message.finalized !== undefined && message.finalized !== false) {
      writer.uint32(32).bool(message.finalized);
    }
    if (message.percentile !== undefined && message.percentile !== 0) {
      writer.uint32(45).float(message.percentile);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCGetPlayerCardRosterResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCGetPlayerCardRosterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        case 2:
          if (tag === 16) {
            message.playerCardItemId.push(longToString(reader.uint64() as Long));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.playerCardItemId.push(longToString(reader.uint64() as Long));
            }

            continue;
          }

          break;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.score = reader.float();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.finalized = reader.bool();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.percentile = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCGetPlayerCardRosterResponse {
    return {
      result: isSet(object.result) ? cMsgClientToGCGetPlayerCardRosterResponse_ResultFromJSON(object.result) : 0,
      playerCardItemId: globalThis.Array.isArray(object?.playerCardItemId)
        ? object.playerCardItemId.map((e: any) => globalThis.String(e))
        : [],
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      finalized: isSet(object.finalized) ? globalThis.Boolean(object.finalized) : false,
      percentile: isSet(object.percentile) ? globalThis.Number(object.percentile) : 0,
    };
  },

  toJSON(message: CMsgClientToGCGetPlayerCardRosterResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined && message.result !== 0) {
      obj.result = cMsgClientToGCGetPlayerCardRosterResponse_ResultToJSON(message.result);
    }
    if (message.playerCardItemId?.length) {
      obj.playerCardItemId = message.playerCardItemId;
    }
    if (message.score !== undefined && message.score !== 0) {
      obj.score = message.score;
    }
    if (message.finalized !== undefined && message.finalized !== false) {
      obj.finalized = message.finalized;
    }
    if (message.percentile !== undefined && message.percentile !== 0) {
      obj.percentile = message.percentile;
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCGetPlayerCardRosterResponse>): CMsgClientToGCGetPlayerCardRosterResponse {
    return CMsgClientToGCGetPlayerCardRosterResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCGetPlayerCardRosterResponse>,
  ): CMsgClientToGCGetPlayerCardRosterResponse {
    const message = createBaseCMsgClientToGCGetPlayerCardRosterResponse();
    message.result = object.result ?? 0;
    message.playerCardItemId = object.playerCardItemId?.map((e) => e) || [];
    message.score = object.score ?? 0;
    message.finalized = object.finalized ?? false;
    message.percentile = object.percentile ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCBatchGetPlayerCardRosterRequest(): CMsgClientToGCBatchGetPlayerCardRosterRequest {
  return { leagueTimestamps: [] };
}

export const CMsgClientToGCBatchGetPlayerCardRosterRequest = {
  encode(message: CMsgClientToGCBatchGetPlayerCardRosterRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.leagueTimestamps) {
      CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCBatchGetPlayerCardRosterRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCBatchGetPlayerCardRosterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.leagueTimestamps.push(
            CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCBatchGetPlayerCardRosterRequest {
    return {
      leagueTimestamps: globalThis.Array.isArray(object?.leagueTimestamps)
        ? object.leagueTimestamps.map((e: any) =>
            CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: CMsgClientToGCBatchGetPlayerCardRosterRequest): unknown {
    const obj: any = {};
    if (message.leagueTimestamps?.length) {
      obj.leagueTimestamps = message.leagueTimestamps.map((e) =>
        CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp.toJSON(e),
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCBatchGetPlayerCardRosterRequest>,
  ): CMsgClientToGCBatchGetPlayerCardRosterRequest {
    return CMsgClientToGCBatchGetPlayerCardRosterRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCBatchGetPlayerCardRosterRequest>,
  ): CMsgClientToGCBatchGetPlayerCardRosterRequest {
    const message = createBaseCMsgClientToGCBatchGetPlayerCardRosterRequest();
    message.leagueTimestamps =
      object.leagueTimestamps?.map((e) =>
        CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseCMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp(): CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp {
  return { leagueId: 0, fantasyPeriod: 4294967295 };
}

export const CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp = {
  encode(
    message: CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      writer.uint32(8).uint32(message.leagueId);
    }
    if (message.fantasyPeriod !== undefined && message.fantasyPeriod !== 4294967295) {
      writer.uint32(24).uint32(message.fantasyPeriod);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.leagueId = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.fantasyPeriod = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp {
    return {
      leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
      fantasyPeriod: isSet(object.fantasyPeriod) ? globalThis.Number(object.fantasyPeriod) : 4294967295,
    };
  },

  toJSON(message: CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp): unknown {
    const obj: any = {};
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      obj.leagueId = Math.round(message.leagueId);
    }
    if (message.fantasyPeriod !== undefined && message.fantasyPeriod !== 4294967295) {
      obj.fantasyPeriod = Math.round(message.fantasyPeriod);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp>,
  ): CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp {
    return CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp>,
  ): CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp {
    const message = createBaseCMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp();
    message.leagueId = object.leagueId ?? 0;
    message.fantasyPeriod = object.fantasyPeriod ?? 4294967295;
    return message;
  },
};

function createBaseCMsgClientToGCBatchGetPlayerCardRosterResponse(): CMsgClientToGCBatchGetPlayerCardRosterResponse {
  return { responses: [] };
}

export const CMsgClientToGCBatchGetPlayerCardRosterResponse = {
  encode(
    message: CMsgClientToGCBatchGetPlayerCardRosterResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    for (const v of message.responses) {
      CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCBatchGetPlayerCardRosterResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCBatchGetPlayerCardRosterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.responses.push(
            CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCBatchGetPlayerCardRosterResponse {
    return {
      responses: globalThis.Array.isArray(object?.responses)
        ? object.responses.map((e: any) => CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgClientToGCBatchGetPlayerCardRosterResponse): unknown {
    const obj: any = {};
    if (message.responses?.length) {
      obj.responses = message.responses.map((e) =>
        CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse.toJSON(e),
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCBatchGetPlayerCardRosterResponse>,
  ): CMsgClientToGCBatchGetPlayerCardRosterResponse {
    return CMsgClientToGCBatchGetPlayerCardRosterResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCBatchGetPlayerCardRosterResponse>,
  ): CMsgClientToGCBatchGetPlayerCardRosterResponse {
    const message = createBaseCMsgClientToGCBatchGetPlayerCardRosterResponse();
    message.responses =
      object.responses?.map((e) => CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse(): CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse {
  return {
    leagueId: 0,
    deprecatedTimestamp: 0,
    result: 0,
    playerCardItemId: [],
    score: 0,
    finalized: false,
    percentile: 0,
    fantasyPeriod: 4294967295,
  };
}

export const CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse = {
  encode(
    message: CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      writer.uint32(8).uint32(message.leagueId);
    }
    if (message.deprecatedTimestamp !== undefined && message.deprecatedTimestamp !== 0) {
      writer.uint32(16).uint32(message.deprecatedTimestamp);
    }
    if (message.result !== undefined && message.result !== 0) {
      writer.uint32(24).int32(message.result);
    }
    writer.uint32(34).fork();
    for (const v of message.playerCardItemId) {
      writer.uint64(v);
    }
    writer.ldelim();
    if (message.score !== undefined && message.score !== 0) {
      writer.uint32(45).float(message.score);
    }
    if (message.finalized !== undefined && message.finalized !== false) {
      writer.uint32(48).bool(message.finalized);
    }
    if (message.percentile !== undefined && message.percentile !== 0) {
      writer.uint32(61).float(message.percentile);
    }
    if (message.fantasyPeriod !== undefined && message.fantasyPeriod !== 4294967295) {
      writer.uint32(64).uint32(message.fantasyPeriod);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.leagueId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.deprecatedTimestamp = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
        case 4:
          if (tag === 32) {
            message.playerCardItemId.push(longToString(reader.uint64() as Long));

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.playerCardItemId.push(longToString(reader.uint64() as Long));
            }

            continue;
          }

          break;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.score = reader.float();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.finalized = reader.bool();
          continue;
        case 7:
          if (tag !== 61) {
            break;
          }

          message.percentile = reader.float();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.fantasyPeriod = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse {
    return {
      leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
      deprecatedTimestamp: isSet(object.deprecatedTimestamp) ? globalThis.Number(object.deprecatedTimestamp) : 0,
      result: isSet(object.result) ? cMsgClientToGCBatchGetPlayerCardRosterResponse_ResultFromJSON(object.result) : 0,
      playerCardItemId: globalThis.Array.isArray(object?.playerCardItemId)
        ? object.playerCardItemId.map((e: any) => globalThis.String(e))
        : [],
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      finalized: isSet(object.finalized) ? globalThis.Boolean(object.finalized) : false,
      percentile: isSet(object.percentile) ? globalThis.Number(object.percentile) : 0,
      fantasyPeriod: isSet(object.fantasyPeriod) ? globalThis.Number(object.fantasyPeriod) : 4294967295,
    };
  },

  toJSON(message: CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse): unknown {
    const obj: any = {};
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      obj.leagueId = Math.round(message.leagueId);
    }
    if (message.deprecatedTimestamp !== undefined && message.deprecatedTimestamp !== 0) {
      obj.deprecatedTimestamp = Math.round(message.deprecatedTimestamp);
    }
    if (message.result !== undefined && message.result !== 0) {
      obj.result = cMsgClientToGCBatchGetPlayerCardRosterResponse_ResultToJSON(message.result);
    }
    if (message.playerCardItemId?.length) {
      obj.playerCardItemId = message.playerCardItemId;
    }
    if (message.score !== undefined && message.score !== 0) {
      obj.score = message.score;
    }
    if (message.finalized !== undefined && message.finalized !== false) {
      obj.finalized = message.finalized;
    }
    if (message.percentile !== undefined && message.percentile !== 0) {
      obj.percentile = message.percentile;
    }
    if (message.fantasyPeriod !== undefined && message.fantasyPeriod !== 4294967295) {
      obj.fantasyPeriod = Math.round(message.fantasyPeriod);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse>,
  ): CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse {
    return CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse>,
  ): CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse {
    const message = createBaseCMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse();
    message.leagueId = object.leagueId ?? 0;
    message.deprecatedTimestamp = object.deprecatedTimestamp ?? 0;
    message.result = object.result ?? 0;
    message.playerCardItemId = object.playerCardItemId?.map((e) => e) || [];
    message.score = object.score ?? 0;
    message.finalized = object.finalized ?? false;
    message.percentile = object.percentile ?? 0;
    message.fantasyPeriod = object.fantasyPeriod ?? 4294967295;
    return message;
  },
};

function createBaseCMsgClientToGCSetPlayerCardRosterRequest(): CMsgClientToGCSetPlayerCardRosterRequest {
  return { leagueId: 0, deprecatedTimestamp: 0, slot: 0, playerCardItemId: "0", eventId: 0, fantasyPeriod: 4294967295 };
}

export const CMsgClientToGCSetPlayerCardRosterRequest = {
  encode(message: CMsgClientToGCSetPlayerCardRosterRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      writer.uint32(8).uint32(message.leagueId);
    }
    if (message.deprecatedTimestamp !== undefined && message.deprecatedTimestamp !== 0) {
      writer.uint32(16).uint32(message.deprecatedTimestamp);
    }
    if (message.slot !== undefined && message.slot !== 0) {
      writer.uint32(24).uint32(message.slot);
    }
    if (message.playerCardItemId !== undefined && message.playerCardItemId !== "0") {
      writer.uint32(32).uint64(message.playerCardItemId);
    }
    if (message.eventId !== undefined && message.eventId !== 0) {
      writer.uint32(40).uint32(message.eventId);
    }
    if (message.fantasyPeriod !== undefined && message.fantasyPeriod !== 4294967295) {
      writer.uint32(48).uint32(message.fantasyPeriod);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCSetPlayerCardRosterRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCSetPlayerCardRosterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.leagueId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.deprecatedTimestamp = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.slot = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.playerCardItemId = longToString(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.eventId = reader.uint32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.fantasyPeriod = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCSetPlayerCardRosterRequest {
    return {
      leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
      deprecatedTimestamp: isSet(object.deprecatedTimestamp) ? globalThis.Number(object.deprecatedTimestamp) : 0,
      slot: isSet(object.slot) ? globalThis.Number(object.slot) : 0,
      playerCardItemId: isSet(object.playerCardItemId) ? globalThis.String(object.playerCardItemId) : "0",
      eventId: isSet(object.eventId) ? globalThis.Number(object.eventId) : 0,
      fantasyPeriod: isSet(object.fantasyPeriod) ? globalThis.Number(object.fantasyPeriod) : 4294967295,
    };
  },

  toJSON(message: CMsgClientToGCSetPlayerCardRosterRequest): unknown {
    const obj: any = {};
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      obj.leagueId = Math.round(message.leagueId);
    }
    if (message.deprecatedTimestamp !== undefined && message.deprecatedTimestamp !== 0) {
      obj.deprecatedTimestamp = Math.round(message.deprecatedTimestamp);
    }
    if (message.slot !== undefined && message.slot !== 0) {
      obj.slot = Math.round(message.slot);
    }
    if (message.playerCardItemId !== undefined && message.playerCardItemId !== "0") {
      obj.playerCardItemId = message.playerCardItemId;
    }
    if (message.eventId !== undefined && message.eventId !== 0) {
      obj.eventId = Math.round(message.eventId);
    }
    if (message.fantasyPeriod !== undefined && message.fantasyPeriod !== 4294967295) {
      obj.fantasyPeriod = Math.round(message.fantasyPeriod);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCSetPlayerCardRosterRequest>): CMsgClientToGCSetPlayerCardRosterRequest {
    return CMsgClientToGCSetPlayerCardRosterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCSetPlayerCardRosterRequest>): CMsgClientToGCSetPlayerCardRosterRequest {
    const message = createBaseCMsgClientToGCSetPlayerCardRosterRequest();
    message.leagueId = object.leagueId ?? 0;
    message.deprecatedTimestamp = object.deprecatedTimestamp ?? 0;
    message.slot = object.slot ?? 0;
    message.playerCardItemId = object.playerCardItemId ?? "0";
    message.eventId = object.eventId ?? 0;
    message.fantasyPeriod = object.fantasyPeriod ?? 4294967295;
    return message;
  },
};

function createBaseCMsgClientToGCSetPlayerCardRosterResponse(): CMsgClientToGCSetPlayerCardRosterResponse {
  return { result: 0 };
}

export const CMsgClientToGCSetPlayerCardRosterResponse = {
  encode(message: CMsgClientToGCSetPlayerCardRosterResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.result !== undefined && message.result !== 0) {
      writer.uint32(8).int32(message.result);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCSetPlayerCardRosterResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCSetPlayerCardRosterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.result = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCSetPlayerCardRosterResponse {
    return {
      result: isSet(object.result) ? cMsgClientToGCSetPlayerCardRosterResponse_ResultFromJSON(object.result) : 0,
    };
  },

  toJSON(message: CMsgClientToGCSetPlayerCardRosterResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined && message.result !== 0) {
      obj.result = cMsgClientToGCSetPlayerCardRosterResponse_ResultToJSON(message.result);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCSetPlayerCardRosterResponse>): CMsgClientToGCSetPlayerCardRosterResponse {
    return CMsgClientToGCSetPlayerCardRosterResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCSetPlayerCardRosterResponse>,
  ): CMsgClientToGCSetPlayerCardRosterResponse {
    const message = createBaseCMsgClientToGCSetPlayerCardRosterResponse();
    message.result = object.result ?? 0;
    return message;
  },
};

function createBaseCMsgDOTAFantasyDPCLeagueStatus(): CMsgDOTAFantasyDPCLeagueStatus {
  return { leagueInfos: [] };
}

export const CMsgDOTAFantasyDPCLeagueStatus = {
  encode(message: CMsgDOTAFantasyDPCLeagueStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.leagueInfos) {
      CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTAFantasyDPCLeagueStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTAFantasyDPCLeagueStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.leagueInfos.push(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTAFantasyDPCLeagueStatus {
    return {
      leagueInfos: globalThis.Array.isArray(object?.leagueInfos)
        ? object.leagueInfos.map((e: any) => CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgDOTAFantasyDPCLeagueStatus): unknown {
    const obj: any = {};
    if (message.leagueInfos?.length) {
      obj.leagueInfos = message.leagueInfos.map((e) => CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTAFantasyDPCLeagueStatus>): CMsgDOTAFantasyDPCLeagueStatus {
    return CMsgDOTAFantasyDPCLeagueStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTAFantasyDPCLeagueStatus>): CMsgDOTAFantasyDPCLeagueStatus {
    const message = createBaseCMsgDOTAFantasyDPCLeagueStatus();
    message.leagueInfos =
      object.leagueInfos?.map((e) => CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(): CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo {
  return { leagueId: 0, leagueName: "", startTimestamp: 0, endTimestamp: 0, dayTimestamps: [], status: 0 };
}

export const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo = {
  encode(message: CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      writer.uint32(8).uint32(message.leagueId);
    }
    if (message.leagueName !== undefined && message.leagueName !== "") {
      writer.uint32(18).string(message.leagueName);
    }
    if (message.startTimestamp !== undefined && message.startTimestamp !== 0) {
      writer.uint32(24).uint32(message.startTimestamp);
    }
    if (message.endTimestamp !== undefined && message.endTimestamp !== 0) {
      writer.uint32(32).uint32(message.endTimestamp);
    }
    writer.uint32(42).fork();
    for (const v of message.dayTimestamps) {
      writer.uint32(v);
    }
    writer.ldelim();
    if (message.status !== undefined && message.status !== 0) {
      writer.uint32(64).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTAFantasyDPCLeagueStatus_LeagueInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.leagueId = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.leagueName = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.startTimestamp = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.endTimestamp = reader.uint32();
          continue;
        case 5:
          if (tag === 40) {
            message.dayTimestamps.push(reader.uint32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.dayTimestamps.push(reader.uint32());
            }

            continue;
          }

          break;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo {
    return {
      leagueId: isSet(object.leagueId) ? globalThis.Number(object.leagueId) : 0,
      leagueName: isSet(object.leagueName) ? globalThis.String(object.leagueName) : "",
      startTimestamp: isSet(object.startTimestamp) ? globalThis.Number(object.startTimestamp) : 0,
      endTimestamp: isSet(object.endTimestamp) ? globalThis.Number(object.endTimestamp) : 0,
      dayTimestamps: globalThis.Array.isArray(object?.dayTimestamps)
        ? object.dayTimestamps.map((e: any) => globalThis.Number(e))
        : [],
      status: isSet(object.status) ? cMsgDOTAFantasyDPCLeagueStatus_ERosterStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo): unknown {
    const obj: any = {};
    if (message.leagueId !== undefined && message.leagueId !== 0) {
      obj.leagueId = Math.round(message.leagueId);
    }
    if (message.leagueName !== undefined && message.leagueName !== "") {
      obj.leagueName = message.leagueName;
    }
    if (message.startTimestamp !== undefined && message.startTimestamp !== 0) {
      obj.startTimestamp = Math.round(message.startTimestamp);
    }
    if (message.endTimestamp !== undefined && message.endTimestamp !== 0) {
      obj.endTimestamp = Math.round(message.endTimestamp);
    }
    if (message.dayTimestamps?.length) {
      obj.dayTimestamps = message.dayTimestamps.map((e) => Math.round(e));
    }
    if (message.status !== undefined && message.status !== 0) {
      obj.status = cMsgDOTAFantasyDPCLeagueStatus_ERosterStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo>): CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo {
    return CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo>,
  ): CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo {
    const message = createBaseCMsgDOTAFantasyDPCLeagueStatus_LeagueInfo();
    message.leagueId = object.leagueId ?? 0;
    message.leagueName = object.leagueName ?? "";
    message.startTimestamp = object.startTimestamp ?? 0;
    message.endTimestamp = object.endTimestamp ?? 0;
    message.dayTimestamps = object.dayTimestamps?.map((e) => e) || [];
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseCMsgDOTADPCSearchResults(): CMsgDOTADPCSearchResults {
  return { players: [], teams: [], leagues: [] };
}

export const CMsgDOTADPCSearchResults = {
  encode(message: CMsgDOTADPCSearchResults, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.players) {
      CMsgDOTADPCSearchResults_Player.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.teams) {
      CMsgDOTADPCSearchResults_Team.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.leagues) {
      CMsgDOTADPCSearchResults_League.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTADPCSearchResults {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTADPCSearchResults();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.players.push(CMsgDOTADPCSearchResults_Player.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.teams.push(CMsgDOTADPCSearchResults_Team.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.leagues.push(CMsgDOTADPCSearchResults_League.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTADPCSearchResults {
    return {
      players: globalThis.Array.isArray(object?.players)
        ? object.players.map((e: any) => CMsgDOTADPCSearchResults_Player.fromJSON(e))
        : [],
      teams: globalThis.Array.isArray(object?.teams)
        ? object.teams.map((e: any) => CMsgDOTADPCSearchResults_Team.fromJSON(e))
        : [],
      leagues: globalThis.Array.isArray(object?.leagues)
        ? object.leagues.map((e: any) => CMsgDOTADPCSearchResults_League.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgDOTADPCSearchResults): unknown {
    const obj: any = {};
    if (message.players?.length) {
      obj.players = message.players.map((e) => CMsgDOTADPCSearchResults_Player.toJSON(e));
    }
    if (message.teams?.length) {
      obj.teams = message.teams.map((e) => CMsgDOTADPCSearchResults_Team.toJSON(e));
    }
    if (message.leagues?.length) {
      obj.leagues = message.leagues.map((e) => CMsgDOTADPCSearchResults_League.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTADPCSearchResults>): CMsgDOTADPCSearchResults {
    return CMsgDOTADPCSearchResults.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTADPCSearchResults>): CMsgDOTADPCSearchResults {
    const message = createBaseCMsgDOTADPCSearchResults();
    message.players = object.players?.map((e) => CMsgDOTADPCSearchResults_Player.fromPartial(e)) || [];
    message.teams = object.teams?.map((e) => CMsgDOTADPCSearchResults_Team.fromPartial(e)) || [];
    message.leagues = object.leagues?.map((e) => CMsgDOTADPCSearchResults_League.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgDOTADPCSearchResults_Player(): CMsgDOTADPCSearchResults_Player {
  return { id: 0, name: "", realName: "" };
}

export const CMsgDOTADPCSearchResults_Player = {
  encode(message: CMsgDOTADPCSearchResults_Player, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.realName !== undefined && message.realName !== "") {
      writer.uint32(26).string(message.realName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTADPCSearchResults_Player {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTADPCSearchResults_Player();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.realName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTADPCSearchResults_Player {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      realName: isSet(object.realName) ? globalThis.String(object.realName) : "",
    };
  },

  toJSON(message: CMsgDOTADPCSearchResults_Player): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.realName !== undefined && message.realName !== "") {
      obj.realName = message.realName;
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTADPCSearchResults_Player>): CMsgDOTADPCSearchResults_Player {
    return CMsgDOTADPCSearchResults_Player.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTADPCSearchResults_Player>): CMsgDOTADPCSearchResults_Player {
    const message = createBaseCMsgDOTADPCSearchResults_Player();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.realName = object.realName ?? "";
    return message;
  },
};

function createBaseCMsgDOTADPCSearchResults_Team(): CMsgDOTADPCSearchResults_Team {
  return { id: 0, name: "", url: "" };
}

export const CMsgDOTADPCSearchResults_Team = {
  encode(message: CMsgDOTADPCSearchResults_Team, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.url !== undefined && message.url !== "") {
      writer.uint32(26).string(message.url);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTADPCSearchResults_Team {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTADPCSearchResults_Team();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTADPCSearchResults_Team {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
    };
  },

  toJSON(message: CMsgDOTADPCSearchResults_Team): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.url !== undefined && message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTADPCSearchResults_Team>): CMsgDOTADPCSearchResults_Team {
    return CMsgDOTADPCSearchResults_Team.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTADPCSearchResults_Team>): CMsgDOTADPCSearchResults_Team {
    const message = createBaseCMsgDOTADPCSearchResults_Team();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseCMsgDOTADPCSearchResults_League(): CMsgDOTADPCSearchResults_League {
  return { id: 0, name: "" };
}

export const CMsgDOTADPCSearchResults_League = {
  encode(message: CMsgDOTADPCSearchResults_League, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTADPCSearchResults_League {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTADPCSearchResults_League();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTADPCSearchResults_League {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: CMsgDOTADPCSearchResults_League): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTADPCSearchResults_League>): CMsgDOTADPCSearchResults_League {
    return CMsgDOTADPCSearchResults_League.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTADPCSearchResults_League>): CMsgDOTADPCSearchResults_League {
    const message = createBaseCMsgDOTADPCSearchResults_League();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseCMsgDOTADPCTeamFavoriteRankings(): CMsgDOTADPCTeamFavoriteRankings {
  return { teams: [] };
}

export const CMsgDOTADPCTeamFavoriteRankings = {
  encode(message: CMsgDOTADPCTeamFavoriteRankings, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.teams) {
      CMsgDOTADPCTeamFavoriteRankings_Team.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTADPCTeamFavoriteRankings {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTADPCTeamFavoriteRankings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.teams.push(CMsgDOTADPCTeamFavoriteRankings_Team.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTADPCTeamFavoriteRankings {
    return {
      teams: globalThis.Array.isArray(object?.teams)
        ? object.teams.map((e: any) => CMsgDOTADPCTeamFavoriteRankings_Team.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgDOTADPCTeamFavoriteRankings): unknown {
    const obj: any = {};
    if (message.teams?.length) {
      obj.teams = message.teams.map((e) => CMsgDOTADPCTeamFavoriteRankings_Team.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTADPCTeamFavoriteRankings>): CMsgDOTADPCTeamFavoriteRankings {
    return CMsgDOTADPCTeamFavoriteRankings.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTADPCTeamFavoriteRankings>): CMsgDOTADPCTeamFavoriteRankings {
    const message = createBaseCMsgDOTADPCTeamFavoriteRankings();
    message.teams = object.teams?.map((e) => CMsgDOTADPCTeamFavoriteRankings_Team.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgDOTADPCTeamFavoriteRankings_Team(): CMsgDOTADPCTeamFavoriteRankings_Team {
  return { teamId: 0, favorites: 0 };
}

export const CMsgDOTADPCTeamFavoriteRankings_Team = {
  encode(message: CMsgDOTADPCTeamFavoriteRankings_Team, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.teamId !== undefined && message.teamId !== 0) {
      writer.uint32(8).uint32(message.teamId);
    }
    if (message.favorites !== undefined && message.favorites !== 0) {
      writer.uint32(16).uint32(message.favorites);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDOTADPCTeamFavoriteRankings_Team {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDOTADPCTeamFavoriteRankings_Team();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.teamId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.favorites = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDOTADPCTeamFavoriteRankings_Team {
    return {
      teamId: isSet(object.teamId) ? globalThis.Number(object.teamId) : 0,
      favorites: isSet(object.favorites) ? globalThis.Number(object.favorites) : 0,
    };
  },

  toJSON(message: CMsgDOTADPCTeamFavoriteRankings_Team): unknown {
    const obj: any = {};
    if (message.teamId !== undefined && message.teamId !== 0) {
      obj.teamId = Math.round(message.teamId);
    }
    if (message.favorites !== undefined && message.favorites !== 0) {
      obj.favorites = Math.round(message.favorites);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDOTADPCTeamFavoriteRankings_Team>): CMsgDOTADPCTeamFavoriteRankings_Team {
    return CMsgDOTADPCTeamFavoriteRankings_Team.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDOTADPCTeamFavoriteRankings_Team>): CMsgDOTADPCTeamFavoriteRankings_Team {
    const message = createBaseCMsgDOTADPCTeamFavoriteRankings_Team();
    message.teamId = object.teamId ?? 0;
    message.favorites = object.favorites ?? 0;
    return message;
  },
};

function createBaseCMsgDotaFantasyCraftingTabletPeriodData(): CMsgDotaFantasyCraftingTabletPeriodData {
  return { fantasyPeriod: 4294967295, tablets: [] };
}

export const CMsgDotaFantasyCraftingTabletPeriodData = {
  encode(message: CMsgDotaFantasyCraftingTabletPeriodData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fantasyPeriod !== undefined && message.fantasyPeriod !== 4294967295) {
      writer.uint32(8).uint32(message.fantasyPeriod);
    }
    for (const v of message.tablets) {
      CMsgDotaFantasyCraftingTabletPeriodData_Tablet.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDotaFantasyCraftingTabletPeriodData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDotaFantasyCraftingTabletPeriodData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fantasyPeriod = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tablets.push(CMsgDotaFantasyCraftingTabletPeriodData_Tablet.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDotaFantasyCraftingTabletPeriodData {
    return {
      fantasyPeriod: isSet(object.fantasyPeriod) ? globalThis.Number(object.fantasyPeriod) : 4294967295,
      tablets: globalThis.Array.isArray(object?.tablets)
        ? object.tablets.map((e: any) => CMsgDotaFantasyCraftingTabletPeriodData_Tablet.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgDotaFantasyCraftingTabletPeriodData): unknown {
    const obj: any = {};
    if (message.fantasyPeriod !== undefined && message.fantasyPeriod !== 4294967295) {
      obj.fantasyPeriod = Math.round(message.fantasyPeriod);
    }
    if (message.tablets?.length) {
      obj.tablets = message.tablets.map((e) => CMsgDotaFantasyCraftingTabletPeriodData_Tablet.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDotaFantasyCraftingTabletPeriodData>): CMsgDotaFantasyCraftingTabletPeriodData {
    return CMsgDotaFantasyCraftingTabletPeriodData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDotaFantasyCraftingTabletPeriodData>): CMsgDotaFantasyCraftingTabletPeriodData {
    const message = createBaseCMsgDotaFantasyCraftingTabletPeriodData();
    message.fantasyPeriod = object.fantasyPeriod ?? 4294967295;
    message.tablets = object.tablets?.map((e) => CMsgDotaFantasyCraftingTabletPeriodData_Tablet.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgDotaFantasyCraftingTabletPeriodData_Gem(): CMsgDotaFantasyCraftingTabletPeriodData_Gem {
  return { type: 0, slot: 0, shape: 0, quality: 0, stat: 0 };
}

export const CMsgDotaFantasyCraftingTabletPeriodData_Gem = {
  encode(message: CMsgDotaFantasyCraftingTabletPeriodData_Gem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== undefined && message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.slot !== undefined && message.slot !== 0) {
      writer.uint32(16).uint32(message.slot);
    }
    if (message.shape !== undefined && message.shape !== 0) {
      writer.uint32(24).uint32(message.shape);
    }
    if (message.quality !== undefined && message.quality !== 0) {
      writer.uint32(32).uint32(message.quality);
    }
    if (message.stat !== undefined && message.stat !== 0) {
      writer.uint32(40).int32(message.stat);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDotaFantasyCraftingTabletPeriodData_Gem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDotaFantasyCraftingTabletPeriodData_Gem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.slot = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.shape = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.quality = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.stat = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDotaFantasyCraftingTabletPeriodData_Gem {
    return {
      type: isSet(object.type) ? fantasyGemTypeFromJSON(object.type) : 0,
      slot: isSet(object.slot) ? globalThis.Number(object.slot) : 0,
      shape: isSet(object.shape) ? globalThis.Number(object.shape) : 0,
      quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
      stat: isSet(object.stat) ? fantasyScoringFromJSON(object.stat) : 0,
    };
  },

  toJSON(message: CMsgDotaFantasyCraftingTabletPeriodData_Gem): unknown {
    const obj: any = {};
    if (message.type !== undefined && message.type !== 0) {
      obj.type = fantasyGemTypeToJSON(message.type);
    }
    if (message.slot !== undefined && message.slot !== 0) {
      obj.slot = Math.round(message.slot);
    }
    if (message.shape !== undefined && message.shape !== 0) {
      obj.shape = Math.round(message.shape);
    }
    if (message.quality !== undefined && message.quality !== 0) {
      obj.quality = Math.round(message.quality);
    }
    if (message.stat !== undefined && message.stat !== 0) {
      obj.stat = fantasyScoringToJSON(message.stat);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDotaFantasyCraftingTabletPeriodData_Gem>): CMsgDotaFantasyCraftingTabletPeriodData_Gem {
    return CMsgDotaFantasyCraftingTabletPeriodData_Gem.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgDotaFantasyCraftingTabletPeriodData_Gem>,
  ): CMsgDotaFantasyCraftingTabletPeriodData_Gem {
    const message = createBaseCMsgDotaFantasyCraftingTabletPeriodData_Gem();
    message.type = object.type ?? 0;
    message.slot = object.slot ?? 0;
    message.shape = object.shape ?? 0;
    message.quality = object.quality ?? 0;
    message.stat = object.stat ?? 0;
    return message;
  },
};

function createBaseCMsgDotaFantasyCraftingTabletPeriodData_Tablet(): CMsgDotaFantasyCraftingTabletPeriodData_Tablet {
  return {
    tabletId: 0,
    tabletLevel: 0,
    fantasyRole: 0,
    accountId: 0,
    prefix: 0,
    suffix: 0,
    gems: [],
    score: 0,
    bestSeries: 0,
  };
}

export const CMsgDotaFantasyCraftingTabletPeriodData_Tablet = {
  encode(
    message: CMsgDotaFantasyCraftingTabletPeriodData_Tablet,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.tabletId !== undefined && message.tabletId !== 0) {
      writer.uint32(8).uint32(message.tabletId);
    }
    if (message.tabletLevel !== undefined && message.tabletLevel !== 0) {
      writer.uint32(16).uint32(message.tabletLevel);
    }
    if (message.fantasyRole !== undefined && message.fantasyRole !== 0) {
      writer.uint32(24).int32(message.fantasyRole);
    }
    if (message.accountId !== undefined && message.accountId !== 0) {
      writer.uint32(32).uint32(message.accountId);
    }
    if (message.prefix !== undefined && message.prefix !== 0) {
      writer.uint32(40).uint32(message.prefix);
    }
    if (message.suffix !== undefined && message.suffix !== 0) {
      writer.uint32(48).uint32(message.suffix);
    }
    for (const v of message.gems) {
      CMsgDotaFantasyCraftingTabletPeriodData_Gem.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    if (message.score !== undefined && message.score !== 0) {
      writer.uint32(69).float(message.score);
    }
    if (message.bestSeries !== undefined && message.bestSeries !== 0) {
      writer.uint32(72).uint32(message.bestSeries);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDotaFantasyCraftingTabletPeriodData_Tablet {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDotaFantasyCraftingTabletPeriodData_Tablet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.tabletId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.tabletLevel = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.fantasyRole = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.accountId = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.prefix = reader.uint32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.suffix = reader.uint32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.gems.push(CMsgDotaFantasyCraftingTabletPeriodData_Gem.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 69) {
            break;
          }

          message.score = reader.float();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.bestSeries = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDotaFantasyCraftingTabletPeriodData_Tablet {
    return {
      tabletId: isSet(object.tabletId) ? globalThis.Number(object.tabletId) : 0,
      tabletLevel: isSet(object.tabletLevel) ? globalThis.Number(object.tabletLevel) : 0,
      fantasyRole: isSet(object.fantasyRole) ? fantasyRolesFromJSON(object.fantasyRole) : 0,
      accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
      prefix: isSet(object.prefix) ? globalThis.Number(object.prefix) : 0,
      suffix: isSet(object.suffix) ? globalThis.Number(object.suffix) : 0,
      gems: globalThis.Array.isArray(object?.gems)
        ? object.gems.map((e: any) => CMsgDotaFantasyCraftingTabletPeriodData_Gem.fromJSON(e))
        : [],
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      bestSeries: isSet(object.bestSeries) ? globalThis.Number(object.bestSeries) : 0,
    };
  },

  toJSON(message: CMsgDotaFantasyCraftingTabletPeriodData_Tablet): unknown {
    const obj: any = {};
    if (message.tabletId !== undefined && message.tabletId !== 0) {
      obj.tabletId = Math.round(message.tabletId);
    }
    if (message.tabletLevel !== undefined && message.tabletLevel !== 0) {
      obj.tabletLevel = Math.round(message.tabletLevel);
    }
    if (message.fantasyRole !== undefined && message.fantasyRole !== 0) {
      obj.fantasyRole = fantasyRolesToJSON(message.fantasyRole);
    }
    if (message.accountId !== undefined && message.accountId !== 0) {
      obj.accountId = Math.round(message.accountId);
    }
    if (message.prefix !== undefined && message.prefix !== 0) {
      obj.prefix = Math.round(message.prefix);
    }
    if (message.suffix !== undefined && message.suffix !== 0) {
      obj.suffix = Math.round(message.suffix);
    }
    if (message.gems?.length) {
      obj.gems = message.gems.map((e) => CMsgDotaFantasyCraftingTabletPeriodData_Gem.toJSON(e));
    }
    if (message.score !== undefined && message.score !== 0) {
      obj.score = message.score;
    }
    if (message.bestSeries !== undefined && message.bestSeries !== 0) {
      obj.bestSeries = Math.round(message.bestSeries);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgDotaFantasyCraftingTabletPeriodData_Tablet>,
  ): CMsgDotaFantasyCraftingTabletPeriodData_Tablet {
    return CMsgDotaFantasyCraftingTabletPeriodData_Tablet.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgDotaFantasyCraftingTabletPeriodData_Tablet>,
  ): CMsgDotaFantasyCraftingTabletPeriodData_Tablet {
    const message = createBaseCMsgDotaFantasyCraftingTabletPeriodData_Tablet();
    message.tabletId = object.tabletId ?? 0;
    message.tabletLevel = object.tabletLevel ?? 0;
    message.fantasyRole = object.fantasyRole ?? 0;
    message.accountId = object.accountId ?? 0;
    message.prefix = object.prefix ?? 0;
    message.suffix = object.suffix ?? 0;
    message.gems = object.gems?.map((e) => CMsgDotaFantasyCraftingTabletPeriodData_Gem.fromPartial(e)) || [];
    message.score = object.score ?? 0;
    message.bestSeries = object.bestSeries ?? 0;
    return message;
  },
};

function createBaseCMsgDotaFantasyCraftingTabletData(): CMsgDotaFantasyCraftingTabletData {
  return { tabletPeriodData: [] };
}

export const CMsgDotaFantasyCraftingTabletData = {
  encode(message: CMsgDotaFantasyCraftingTabletData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.tabletPeriodData) {
      CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDotaFantasyCraftingTabletData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDotaFantasyCraftingTabletData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tabletPeriodData.push(
            CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDotaFantasyCraftingTabletData {
    return {
      tabletPeriodData: globalThis.Array.isArray(object?.tabletPeriodData)
        ? object.tabletPeriodData.map((e: any) => CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgDotaFantasyCraftingTabletData): unknown {
    const obj: any = {};
    if (message.tabletPeriodData?.length) {
      obj.tabletPeriodData = message.tabletPeriodData.map((e) =>
        CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry.toJSON(e),
      );
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDotaFantasyCraftingTabletData>): CMsgDotaFantasyCraftingTabletData {
    return CMsgDotaFantasyCraftingTabletData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDotaFantasyCraftingTabletData>): CMsgDotaFantasyCraftingTabletData {
    const message = createBaseCMsgDotaFantasyCraftingTabletData();
    message.tabletPeriodData =
      object.tabletPeriodData?.map((e) => CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry(): CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry {
  return { key: 0, value: undefined };
}

export const CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry = {
  encode(
    message: CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== undefined && message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      CMsgDotaFantasyCraftingTabletPeriodData.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = CMsgDotaFantasyCraftingTabletPeriodData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? CMsgDotaFantasyCraftingTabletPeriodData.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined && message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = CMsgDotaFantasyCraftingTabletPeriodData.toJSON(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry>,
  ): CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry {
    return CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry>,
  ): CMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry {
    const message = createBaseCMsgDotaFantasyCraftingTabletData_TabletPeriodDataEntry();
    message.key = object.key ?? 0;
    message.value =
      object.value !== undefined && object.value !== null
        ? CMsgDotaFantasyCraftingTabletPeriodData.fromPartial(object.value)
        : undefined;
    return message;
  },
};

function createBaseCMsgDotaFantasyCraftingUserData(): CMsgDotaFantasyCraftingUserData {
  return { availableRolls: [], periodRollTokens: [], periodScores: [] };
}

export const CMsgDotaFantasyCraftingUserData = {
  encode(message: CMsgDotaFantasyCraftingUserData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.availableRolls) {
      writer.uint32(v);
    }
    writer.ldelim();
    for (const v of message.periodRollTokens) {
      CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.periodScores) {
      CMsgDotaFantasyCraftingUserData_PeriodScoresEntry.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDotaFantasyCraftingUserData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDotaFantasyCraftingUserData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 8) {
            message.availableRolls.push(reader.uint32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.availableRolls.push(reader.uint32());
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.periodRollTokens.push(
            CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry.decode(reader, reader.uint32()),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.periodScores.push(CMsgDotaFantasyCraftingUserData_PeriodScoresEntry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDotaFantasyCraftingUserData {
    return {
      availableRolls: globalThis.Array.isArray(object?.availableRolls)
        ? object.availableRolls.map((e: any) => globalThis.Number(e))
        : [],
      periodRollTokens: globalThis.Array.isArray(object?.periodRollTokens)
        ? object.periodRollTokens.map((e: any) => CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry.fromJSON(e))
        : [],
      periodScores: globalThis.Array.isArray(object?.periodScores)
        ? object.periodScores.map((e: any) => CMsgDotaFantasyCraftingUserData_PeriodScoresEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgDotaFantasyCraftingUserData): unknown {
    const obj: any = {};
    if (message.availableRolls?.length) {
      obj.availableRolls = message.availableRolls.map((e) => Math.round(e));
    }
    if (message.periodRollTokens?.length) {
      obj.periodRollTokens = message.periodRollTokens.map((e) =>
        CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry.toJSON(e),
      );
    }
    if (message.periodScores?.length) {
      obj.periodScores = message.periodScores.map((e) => CMsgDotaFantasyCraftingUserData_PeriodScoresEntry.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDotaFantasyCraftingUserData>): CMsgDotaFantasyCraftingUserData {
    return CMsgDotaFantasyCraftingUserData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDotaFantasyCraftingUserData>): CMsgDotaFantasyCraftingUserData {
    const message = createBaseCMsgDotaFantasyCraftingUserData();
    message.availableRolls = object.availableRolls?.map((e) => e) || [];
    message.periodRollTokens =
      object.periodRollTokens?.map((e) => CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry.fromPartial(e)) || [];
    message.periodScores =
      object.periodScores?.map((e) => CMsgDotaFantasyCraftingUserData_PeriodScoresEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgDotaFantasyCraftingUserData_PeriodScore(): CMsgDotaFantasyCraftingUserData_PeriodScore {
  return { totalScore: 0, percentile: 0 };
}

export const CMsgDotaFantasyCraftingUserData_PeriodScore = {
  encode(message: CMsgDotaFantasyCraftingUserData_PeriodScore, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.totalScore !== undefined && message.totalScore !== 0) {
      writer.uint32(13).float(message.totalScore);
    }
    if (message.percentile !== undefined && message.percentile !== 0) {
      writer.uint32(21).float(message.percentile);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDotaFantasyCraftingUserData_PeriodScore {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDotaFantasyCraftingUserData_PeriodScore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.totalScore = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.percentile = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDotaFantasyCraftingUserData_PeriodScore {
    return {
      totalScore: isSet(object.totalScore) ? globalThis.Number(object.totalScore) : 0,
      percentile: isSet(object.percentile) ? globalThis.Number(object.percentile) : 0,
    };
  },

  toJSON(message: CMsgDotaFantasyCraftingUserData_PeriodScore): unknown {
    const obj: any = {};
    if (message.totalScore !== undefined && message.totalScore !== 0) {
      obj.totalScore = message.totalScore;
    }
    if (message.percentile !== undefined && message.percentile !== 0) {
      obj.percentile = message.percentile;
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDotaFantasyCraftingUserData_PeriodScore>): CMsgDotaFantasyCraftingUserData_PeriodScore {
    return CMsgDotaFantasyCraftingUserData_PeriodScore.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgDotaFantasyCraftingUserData_PeriodScore>,
  ): CMsgDotaFantasyCraftingUserData_PeriodScore {
    const message = createBaseCMsgDotaFantasyCraftingUserData_PeriodScore();
    message.totalScore = object.totalScore ?? 0;
    message.percentile = object.percentile ?? 0;
    return message;
  },
};

function createBaseCMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry(): CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry {
  return { key: 0, value: 0 };
}

export const CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry = {
  encode(
    message: CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== undefined && message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined && message.value !== 0) {
      writer.uint32(16).uint32(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.value = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined && message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined && message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry>,
  ): CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry {
    return CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry>,
  ): CMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry {
    const message = createBaseCMsgDotaFantasyCraftingUserData_PeriodRollTokensEntry();
    message.key = object.key ?? 0;
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseCMsgDotaFantasyCraftingUserData_PeriodScoresEntry(): CMsgDotaFantasyCraftingUserData_PeriodScoresEntry {
  return { key: 0, value: undefined };
}

export const CMsgDotaFantasyCraftingUserData_PeriodScoresEntry = {
  encode(
    message: CMsgDotaFantasyCraftingUserData_PeriodScoresEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== undefined && message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      CMsgDotaFantasyCraftingUserData_PeriodScore.encode(message.value, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDotaFantasyCraftingUserData_PeriodScoresEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDotaFantasyCraftingUserData_PeriodScoresEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = CMsgDotaFantasyCraftingUserData_PeriodScore.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDotaFantasyCraftingUserData_PeriodScoresEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? CMsgDotaFantasyCraftingUserData_PeriodScore.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: CMsgDotaFantasyCraftingUserData_PeriodScoresEntry): unknown {
    const obj: any = {};
    if (message.key !== undefined && message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = CMsgDotaFantasyCraftingUserData_PeriodScore.toJSON(message.value);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgDotaFantasyCraftingUserData_PeriodScoresEntry>,
  ): CMsgDotaFantasyCraftingUserData_PeriodScoresEntry {
    return CMsgDotaFantasyCraftingUserData_PeriodScoresEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgDotaFantasyCraftingUserData_PeriodScoresEntry>,
  ): CMsgDotaFantasyCraftingUserData_PeriodScoresEntry {
    const message = createBaseCMsgDotaFantasyCraftingUserData_PeriodScoresEntry();
    message.key = object.key ?? 0;
    message.value =
      object.value !== undefined && object.value !== null
        ? CMsgDotaFantasyCraftingUserData_PeriodScore.fromPartial(object.value)
        : undefined;
    return message;
  },
};

function createBaseCMsgDotaFantasyCraftingDataCache(): CMsgDotaFantasyCraftingDataCache {
  return { cacheEntries: [] };
}

export const CMsgDotaFantasyCraftingDataCache = {
  encode(message: CMsgDotaFantasyCraftingDataCache, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.cacheEntries) {
      CMsgDotaFantasyCraftingDataCache_CacheEntry.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDotaFantasyCraftingDataCache {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDotaFantasyCraftingDataCache();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cacheEntries.push(CMsgDotaFantasyCraftingDataCache_CacheEntry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDotaFantasyCraftingDataCache {
    return {
      cacheEntries: globalThis.Array.isArray(object?.cacheEntries)
        ? object.cacheEntries.map((e: any) => CMsgDotaFantasyCraftingDataCache_CacheEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgDotaFantasyCraftingDataCache): unknown {
    const obj: any = {};
    if (message.cacheEntries?.length) {
      obj.cacheEntries = message.cacheEntries.map((e) => CMsgDotaFantasyCraftingDataCache_CacheEntry.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDotaFantasyCraftingDataCache>): CMsgDotaFantasyCraftingDataCache {
    return CMsgDotaFantasyCraftingDataCache.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgDotaFantasyCraftingDataCache>): CMsgDotaFantasyCraftingDataCache {
    const message = createBaseCMsgDotaFantasyCraftingDataCache();
    message.cacheEntries =
      object.cacheEntries?.map((e) => CMsgDotaFantasyCraftingDataCache_CacheEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgDotaFantasyCraftingDataCache_CacheEntry(): CMsgDotaFantasyCraftingDataCache_CacheEntry {
  return { accountId: 0, fantasyLeague: 0, cacheData: undefined };
}

export const CMsgDotaFantasyCraftingDataCache_CacheEntry = {
  encode(message: CMsgDotaFantasyCraftingDataCache_CacheEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.accountId !== undefined && message.accountId !== 0) {
      writer.uint32(8).uint32(message.accountId);
    }
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      writer.uint32(16).uint32(message.fantasyLeague);
    }
    if (message.cacheData !== undefined) {
      CMsgGCToClientFantasyCraftingDataUpdated.encode(message.cacheData, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgDotaFantasyCraftingDataCache_CacheEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgDotaFantasyCraftingDataCache_CacheEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.accountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.fantasyLeague = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cacheData = CMsgGCToClientFantasyCraftingDataUpdated.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgDotaFantasyCraftingDataCache_CacheEntry {
    return {
      accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
      fantasyLeague: isSet(object.fantasyLeague) ? globalThis.Number(object.fantasyLeague) : 0,
      cacheData: isSet(object.cacheData)
        ? CMsgGCToClientFantasyCraftingDataUpdated.fromJSON(object.cacheData)
        : undefined,
    };
  },

  toJSON(message: CMsgDotaFantasyCraftingDataCache_CacheEntry): unknown {
    const obj: any = {};
    if (message.accountId !== undefined && message.accountId !== 0) {
      obj.accountId = Math.round(message.accountId);
    }
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      obj.fantasyLeague = Math.round(message.fantasyLeague);
    }
    if (message.cacheData !== undefined) {
      obj.cacheData = CMsgGCToClientFantasyCraftingDataUpdated.toJSON(message.cacheData);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgDotaFantasyCraftingDataCache_CacheEntry>): CMsgDotaFantasyCraftingDataCache_CacheEntry {
    return CMsgDotaFantasyCraftingDataCache_CacheEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgDotaFantasyCraftingDataCache_CacheEntry>,
  ): CMsgDotaFantasyCraftingDataCache_CacheEntry {
    const message = createBaseCMsgDotaFantasyCraftingDataCache_CacheEntry();
    message.accountId = object.accountId ?? 0;
    message.fantasyLeague = object.fantasyLeague ?? 0;
    message.cacheData =
      object.cacheData !== undefined && object.cacheData !== null
        ? CMsgGCToClientFantasyCraftingDataUpdated.fromPartial(object.cacheData)
        : undefined;
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingGetData(): CMsgClientToGCFantasyCraftingGetData {
  return { fantasyLeague: 0, accountId: 0 };
}

export const CMsgClientToGCFantasyCraftingGetData = {
  encode(message: CMsgClientToGCFantasyCraftingGetData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      writer.uint32(8).uint32(message.fantasyLeague);
    }
    if (message.accountId !== undefined && message.accountId !== 0) {
      writer.uint32(16).uint32(message.accountId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFantasyCraftingGetData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingGetData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fantasyLeague = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.accountId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingGetData {
    return {
      fantasyLeague: isSet(object.fantasyLeague) ? globalThis.Number(object.fantasyLeague) : 0,
      accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
    };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingGetData): unknown {
    const obj: any = {};
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      obj.fantasyLeague = Math.round(message.fantasyLeague);
    }
    if (message.accountId !== undefined && message.accountId !== 0) {
      obj.accountId = Math.round(message.accountId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCFantasyCraftingGetData>): CMsgClientToGCFantasyCraftingGetData {
    return CMsgClientToGCFantasyCraftingGetData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCFantasyCraftingGetData>): CMsgClientToGCFantasyCraftingGetData {
    const message = createBaseCMsgClientToGCFantasyCraftingGetData();
    message.fantasyLeague = object.fantasyLeague ?? 0;
    message.accountId = object.accountId ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingGetDataResponse(): CMsgClientToGCFantasyCraftingGetDataResponse {
  return { response: 0, userData: undefined, tabletData: undefined };
}

export const CMsgClientToGCFantasyCraftingGetDataResponse = {
  encode(message: CMsgClientToGCFantasyCraftingGetDataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.userData !== undefined) {
      CMsgDotaFantasyCraftingUserData.encode(message.userData, writer.uint32(18).fork()).ldelim();
    }
    if (message.tabletData !== undefined) {
      CMsgDotaFantasyCraftingTabletData.encode(message.tabletData, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFantasyCraftingGetDataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingGetDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userData = CMsgDotaFantasyCraftingUserData.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tabletData = CMsgDotaFantasyCraftingTabletData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingGetDataResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCFantasyCraftingGetDataResponse_EResponseFromJSON(object.response)
        : 0,
      userData: isSet(object.userData) ? CMsgDotaFantasyCraftingUserData.fromJSON(object.userData) : undefined,
      tabletData: isSet(object.tabletData) ? CMsgDotaFantasyCraftingTabletData.fromJSON(object.tabletData) : undefined,
    };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingGetDataResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCFantasyCraftingGetDataResponse_EResponseToJSON(message.response);
    }
    if (message.userData !== undefined) {
      obj.userData = CMsgDotaFantasyCraftingUserData.toJSON(message.userData);
    }
    if (message.tabletData !== undefined) {
      obj.tabletData = CMsgDotaFantasyCraftingTabletData.toJSON(message.tabletData);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFantasyCraftingGetDataResponse>,
  ): CMsgClientToGCFantasyCraftingGetDataResponse {
    return CMsgClientToGCFantasyCraftingGetDataResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFantasyCraftingGetDataResponse>,
  ): CMsgClientToGCFantasyCraftingGetDataResponse {
    const message = createBaseCMsgClientToGCFantasyCraftingGetDataResponse();
    message.response = object.response ?? 0;
    message.userData =
      object.userData !== undefined && object.userData !== null
        ? CMsgDotaFantasyCraftingUserData.fromPartial(object.userData)
        : undefined;
    message.tabletData =
      object.tabletData !== undefined && object.tabletData !== null
        ? CMsgDotaFantasyCraftingTabletData.fromPartial(object.tabletData)
        : undefined;
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingPerformOperation(): CMsgClientToGCFantasyCraftingPerformOperation {
  return { fantasyLeague: 0, tabletId: 0, operationId: 0, extraData: "0" };
}

export const CMsgClientToGCFantasyCraftingPerformOperation = {
  encode(message: CMsgClientToGCFantasyCraftingPerformOperation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      writer.uint32(8).uint32(message.fantasyLeague);
    }
    if (message.tabletId !== undefined && message.tabletId !== 0) {
      writer.uint32(16).uint32(message.tabletId);
    }
    if (message.operationId !== undefined && message.operationId !== 0) {
      writer.uint32(24).uint32(message.operationId);
    }
    if (message.extraData !== undefined && message.extraData !== "0") {
      writer.uint32(32).uint64(message.extraData);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFantasyCraftingPerformOperation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingPerformOperation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fantasyLeague = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.tabletId = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.operationId = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.extraData = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingPerformOperation {
    return {
      fantasyLeague: isSet(object.fantasyLeague) ? globalThis.Number(object.fantasyLeague) : 0,
      tabletId: isSet(object.tabletId) ? globalThis.Number(object.tabletId) : 0,
      operationId: isSet(object.operationId) ? globalThis.Number(object.operationId) : 0,
      extraData: isSet(object.extraData) ? globalThis.String(object.extraData) : "0",
    };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingPerformOperation): unknown {
    const obj: any = {};
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      obj.fantasyLeague = Math.round(message.fantasyLeague);
    }
    if (message.tabletId !== undefined && message.tabletId !== 0) {
      obj.tabletId = Math.round(message.tabletId);
    }
    if (message.operationId !== undefined && message.operationId !== 0) {
      obj.operationId = Math.round(message.operationId);
    }
    if (message.extraData !== undefined && message.extraData !== "0") {
      obj.extraData = message.extraData;
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFantasyCraftingPerformOperation>,
  ): CMsgClientToGCFantasyCraftingPerformOperation {
    return CMsgClientToGCFantasyCraftingPerformOperation.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFantasyCraftingPerformOperation>,
  ): CMsgClientToGCFantasyCraftingPerformOperation {
    const message = createBaseCMsgClientToGCFantasyCraftingPerformOperation();
    message.fantasyLeague = object.fantasyLeague ?? 0;
    message.tabletId = object.tabletId ?? 0;
    message.operationId = object.operationId ?? 0;
    message.extraData = object.extraData ?? "0";
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingPerformOperationResponse(): CMsgClientToGCFantasyCraftingPerformOperationResponse {
  return {
    response: 0,
    operationId: 0,
    tabletId: 0,
    userData: undefined,
    tabletData: undefined,
    playerChoices: [],
    prefixChoices: [],
    suffixChoices: [],
    titleChoices: [],
  };
}

export const CMsgClientToGCFantasyCraftingPerformOperationResponse = {
  encode(
    message: CMsgClientToGCFantasyCraftingPerformOperationResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.operationId !== undefined && message.operationId !== 0) {
      writer.uint32(16).uint32(message.operationId);
    }
    if (message.tabletId !== undefined && message.tabletId !== 0) {
      writer.uint32(56).uint32(message.tabletId);
    }
    if (message.userData !== undefined) {
      CMsgDotaFantasyCraftingUserData.encode(message.userData, writer.uint32(66).fork()).ldelim();
    }
    if (message.tabletData !== undefined) {
      CMsgDotaFantasyCraftingTabletData.encode(message.tabletData, writer.uint32(74).fork()).ldelim();
    }
    writer.uint32(26).fork();
    for (const v of message.playerChoices) {
      writer.uint32(v);
    }
    writer.ldelim();
    writer.uint32(34).fork();
    for (const v of message.prefixChoices) {
      writer.uint32(v);
    }
    writer.ldelim();
    writer.uint32(42).fork();
    for (const v of message.suffixChoices) {
      writer.uint32(v);
    }
    writer.ldelim();
    for (const v of message.titleChoices) {
      CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice.encode(v!, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFantasyCraftingPerformOperationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingPerformOperationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.operationId = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.tabletId = reader.uint32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.userData = CMsgDotaFantasyCraftingUserData.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.tabletData = CMsgDotaFantasyCraftingTabletData.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag === 24) {
            message.playerChoices.push(reader.uint32());

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.playerChoices.push(reader.uint32());
            }

            continue;
          }

          break;
        case 4:
          if (tag === 32) {
            message.prefixChoices.push(reader.uint32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.prefixChoices.push(reader.uint32());
            }

            continue;
          }

          break;
        case 5:
          if (tag === 40) {
            message.suffixChoices.push(reader.uint32());

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.suffixChoices.push(reader.uint32());
            }

            continue;
          }

          break;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.titleChoices.push(
            CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingPerformOperationResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCFantasyCraftingPerformOperationResponse_EResponseFromJSON(object.response)
        : 0,
      operationId: isSet(object.operationId) ? globalThis.Number(object.operationId) : 0,
      tabletId: isSet(object.tabletId) ? globalThis.Number(object.tabletId) : 0,
      userData: isSet(object.userData) ? CMsgDotaFantasyCraftingUserData.fromJSON(object.userData) : undefined,
      tabletData: isSet(object.tabletData) ? CMsgDotaFantasyCraftingTabletData.fromJSON(object.tabletData) : undefined,
      playerChoices: globalThis.Array.isArray(object?.playerChoices)
        ? object.playerChoices.map((e: any) => globalThis.Number(e))
        : [],
      prefixChoices: globalThis.Array.isArray(object?.prefixChoices)
        ? object.prefixChoices.map((e: any) => globalThis.Number(e))
        : [],
      suffixChoices: globalThis.Array.isArray(object?.suffixChoices)
        ? object.suffixChoices.map((e: any) => globalThis.Number(e))
        : [],
      titleChoices: globalThis.Array.isArray(object?.titleChoices)
        ? object.titleChoices.map((e: any) =>
            CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingPerformOperationResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCFantasyCraftingPerformOperationResponse_EResponseToJSON(message.response);
    }
    if (message.operationId !== undefined && message.operationId !== 0) {
      obj.operationId = Math.round(message.operationId);
    }
    if (message.tabletId !== undefined && message.tabletId !== 0) {
      obj.tabletId = Math.round(message.tabletId);
    }
    if (message.userData !== undefined) {
      obj.userData = CMsgDotaFantasyCraftingUserData.toJSON(message.userData);
    }
    if (message.tabletData !== undefined) {
      obj.tabletData = CMsgDotaFantasyCraftingTabletData.toJSON(message.tabletData);
    }
    if (message.playerChoices?.length) {
      obj.playerChoices = message.playerChoices.map((e) => Math.round(e));
    }
    if (message.prefixChoices?.length) {
      obj.prefixChoices = message.prefixChoices.map((e) => Math.round(e));
    }
    if (message.suffixChoices?.length) {
      obj.suffixChoices = message.suffixChoices.map((e) => Math.round(e));
    }
    if (message.titleChoices?.length) {
      obj.titleChoices = message.titleChoices.map((e) =>
        CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice.toJSON(e),
      );
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFantasyCraftingPerformOperationResponse>,
  ): CMsgClientToGCFantasyCraftingPerformOperationResponse {
    return CMsgClientToGCFantasyCraftingPerformOperationResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFantasyCraftingPerformOperationResponse>,
  ): CMsgClientToGCFantasyCraftingPerformOperationResponse {
    const message = createBaseCMsgClientToGCFantasyCraftingPerformOperationResponse();
    message.response = object.response ?? 0;
    message.operationId = object.operationId ?? 0;
    message.tabletId = object.tabletId ?? 0;
    message.userData =
      object.userData !== undefined && object.userData !== null
        ? CMsgDotaFantasyCraftingUserData.fromPartial(object.userData)
        : undefined;
    message.tabletData =
      object.tabletData !== undefined && object.tabletData !== null
        ? CMsgDotaFantasyCraftingTabletData.fromPartial(object.tabletData)
        : undefined;
    message.playerChoices = object.playerChoices?.map((e) => e) || [];
    message.prefixChoices = object.prefixChoices?.map((e) => e) || [];
    message.suffixChoices = object.suffixChoices?.map((e) => e) || [];
    message.titleChoices =
      object.titleChoices?.map((e) =>
        CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice(): CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice {
  return { prefixChoice: 0, suffixChoice: 0 };
}

export const CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice = {
  encode(
    message: CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.prefixChoice !== undefined && message.prefixChoice !== 0) {
      writer.uint32(8).uint32(message.prefixChoice);
    }
    if (message.suffixChoice !== undefined && message.suffixChoice !== 0) {
      writer.uint32(16).uint32(message.suffixChoice);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.prefixChoice = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.suffixChoice = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice {
    return {
      prefixChoice: isSet(object.prefixChoice) ? globalThis.Number(object.prefixChoice) : 0,
      suffixChoice: isSet(object.suffixChoice) ? globalThis.Number(object.suffixChoice) : 0,
    };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice): unknown {
    const obj: any = {};
    if (message.prefixChoice !== undefined && message.prefixChoice !== 0) {
      obj.prefixChoice = Math.round(message.prefixChoice);
    }
    if (message.suffixChoice !== undefined && message.suffixChoice !== 0) {
      obj.suffixChoice = Math.round(message.suffixChoice);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice>,
  ): CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice {
    return CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice>,
  ): CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice {
    const message = createBaseCMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice();
    message.prefixChoice = object.prefixChoice ?? 0;
    message.suffixChoice = object.suffixChoice ?? 0;
    return message;
  },
};

function createBaseCMsgGCToClientFantasyCraftingDataUpdated(): CMsgGCToClientFantasyCraftingDataUpdated {
  return { fantasyLeague: 0, userData: undefined, tabletData: undefined };
}

export const CMsgGCToClientFantasyCraftingDataUpdated = {
  encode(message: CMsgGCToClientFantasyCraftingDataUpdated, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      writer.uint32(8).uint32(message.fantasyLeague);
    }
    if (message.userData !== undefined) {
      CMsgDotaFantasyCraftingUserData.encode(message.userData, writer.uint32(18).fork()).ldelim();
    }
    if (message.tabletData !== undefined) {
      CMsgDotaFantasyCraftingTabletData.encode(message.tabletData, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgGCToClientFantasyCraftingDataUpdated {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgGCToClientFantasyCraftingDataUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fantasyLeague = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userData = CMsgDotaFantasyCraftingUserData.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.tabletData = CMsgDotaFantasyCraftingTabletData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgGCToClientFantasyCraftingDataUpdated {
    return {
      fantasyLeague: isSet(object.fantasyLeague) ? globalThis.Number(object.fantasyLeague) : 0,
      userData: isSet(object.userData) ? CMsgDotaFantasyCraftingUserData.fromJSON(object.userData) : undefined,
      tabletData: isSet(object.tabletData) ? CMsgDotaFantasyCraftingTabletData.fromJSON(object.tabletData) : undefined,
    };
  },

  toJSON(message: CMsgGCToClientFantasyCraftingDataUpdated): unknown {
    const obj: any = {};
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      obj.fantasyLeague = Math.round(message.fantasyLeague);
    }
    if (message.userData !== undefined) {
      obj.userData = CMsgDotaFantasyCraftingUserData.toJSON(message.userData);
    }
    if (message.tabletData !== undefined) {
      obj.tabletData = CMsgDotaFantasyCraftingTabletData.toJSON(message.tabletData);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgGCToClientFantasyCraftingDataUpdated>): CMsgGCToClientFantasyCraftingDataUpdated {
    return CMsgGCToClientFantasyCraftingDataUpdated.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgGCToClientFantasyCraftingDataUpdated>): CMsgGCToClientFantasyCraftingDataUpdated {
    const message = createBaseCMsgGCToClientFantasyCraftingDataUpdated();
    message.fantasyLeague = object.fantasyLeague ?? 0;
    message.userData =
      object.userData !== undefined && object.userData !== null
        ? CMsgDotaFantasyCraftingUserData.fromPartial(object.userData)
        : undefined;
    message.tabletData =
      object.tabletData !== undefined && object.tabletData !== null
        ? CMsgDotaFantasyCraftingTabletData.fromPartial(object.tabletData)
        : undefined;
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingDevModifyTablet(): CMsgClientToGCFantasyCraftingDevModifyTablet {
  return { fantasyLeague: 0, resetTablet: false, modifyTokens: 0, upgradeTablets: false, fantasyPeriod: 4294967295 };
}

export const CMsgClientToGCFantasyCraftingDevModifyTablet = {
  encode(message: CMsgClientToGCFantasyCraftingDevModifyTablet, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      writer.uint32(8).uint32(message.fantasyLeague);
    }
    if (message.resetTablet !== undefined && message.resetTablet !== false) {
      writer.uint32(16).bool(message.resetTablet);
    }
    if (message.modifyTokens !== undefined && message.modifyTokens !== 0) {
      writer.uint32(24).uint32(message.modifyTokens);
    }
    if (message.upgradeTablets !== undefined && message.upgradeTablets !== false) {
      writer.uint32(48).bool(message.upgradeTablets);
    }
    if (message.fantasyPeriod !== undefined && message.fantasyPeriod !== 4294967295) {
      writer.uint32(40).uint32(message.fantasyPeriod);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFantasyCraftingDevModifyTablet {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingDevModifyTablet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fantasyLeague = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.resetTablet = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.modifyTokens = reader.uint32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.upgradeTablets = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.fantasyPeriod = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingDevModifyTablet {
    return {
      fantasyLeague: isSet(object.fantasyLeague) ? globalThis.Number(object.fantasyLeague) : 0,
      resetTablet: isSet(object.resetTablet) ? globalThis.Boolean(object.resetTablet) : false,
      modifyTokens: isSet(object.modifyTokens) ? globalThis.Number(object.modifyTokens) : 0,
      upgradeTablets: isSet(object.upgradeTablets) ? globalThis.Boolean(object.upgradeTablets) : false,
      fantasyPeriod: isSet(object.fantasyPeriod) ? globalThis.Number(object.fantasyPeriod) : 4294967295,
    };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingDevModifyTablet): unknown {
    const obj: any = {};
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      obj.fantasyLeague = Math.round(message.fantasyLeague);
    }
    if (message.resetTablet !== undefined && message.resetTablet !== false) {
      obj.resetTablet = message.resetTablet;
    }
    if (message.modifyTokens !== undefined && message.modifyTokens !== 0) {
      obj.modifyTokens = Math.round(message.modifyTokens);
    }
    if (message.upgradeTablets !== undefined && message.upgradeTablets !== false) {
      obj.upgradeTablets = message.upgradeTablets;
    }
    if (message.fantasyPeriod !== undefined && message.fantasyPeriod !== 4294967295) {
      obj.fantasyPeriod = Math.round(message.fantasyPeriod);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFantasyCraftingDevModifyTablet>,
  ): CMsgClientToGCFantasyCraftingDevModifyTablet {
    return CMsgClientToGCFantasyCraftingDevModifyTablet.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFantasyCraftingDevModifyTablet>,
  ): CMsgClientToGCFantasyCraftingDevModifyTablet {
    const message = createBaseCMsgClientToGCFantasyCraftingDevModifyTablet();
    message.fantasyLeague = object.fantasyLeague ?? 0;
    message.resetTablet = object.resetTablet ?? false;
    message.modifyTokens = object.modifyTokens ?? 0;
    message.upgradeTablets = object.upgradeTablets ?? false;
    message.fantasyPeriod = object.fantasyPeriod ?? 4294967295;
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingDevModifyTabletResponse(): CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
  return { response: 0, userData: undefined, tabletData: undefined };
}

export const CMsgClientToGCFantasyCraftingDevModifyTabletResponse = {
  encode(
    message: CMsgClientToGCFantasyCraftingDevModifyTabletResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.userData !== undefined) {
      CMsgDotaFantasyCraftingUserData.encode(message.userData, writer.uint32(18).fork()).ldelim();
    }
    if (message.tabletData !== undefined) {
      CMsgDotaFantasyCraftingTabletData.encode(message.tabletData, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingDevModifyTabletResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userData = CMsgDotaFantasyCraftingUserData.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tabletData = CMsgDotaFantasyCraftingTabletData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponseFromJSON(object.response)
        : 0,
      userData: isSet(object.userData) ? CMsgDotaFantasyCraftingUserData.fromJSON(object.userData) : undefined,
      tabletData: isSet(object.tabletData) ? CMsgDotaFantasyCraftingTabletData.fromJSON(object.tabletData) : undefined,
    };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingDevModifyTabletResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponseToJSON(message.response);
    }
    if (message.userData !== undefined) {
      obj.userData = CMsgDotaFantasyCraftingUserData.toJSON(message.userData);
    }
    if (message.tabletData !== undefined) {
      obj.tabletData = CMsgDotaFantasyCraftingTabletData.toJSON(message.tabletData);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFantasyCraftingDevModifyTabletResponse>,
  ): CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
    return CMsgClientToGCFantasyCraftingDevModifyTabletResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFantasyCraftingDevModifyTabletResponse>,
  ): CMsgClientToGCFantasyCraftingDevModifyTabletResponse {
    const message = createBaseCMsgClientToGCFantasyCraftingDevModifyTabletResponse();
    message.response = object.response ?? 0;
    message.userData =
      object.userData !== undefined && object.userData !== null
        ? CMsgDotaFantasyCraftingUserData.fromPartial(object.userData)
        : undefined;
    message.tabletData =
      object.tabletData !== undefined && object.tabletData !== null
        ? CMsgDotaFantasyCraftingTabletData.fromPartial(object.tabletData)
        : undefined;
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingSelectPlayer(): CMsgClientToGCFantasyCraftingSelectPlayer {
  return { fantasyLeague: 0, accountId: 0 };
}

export const CMsgClientToGCFantasyCraftingSelectPlayer = {
  encode(message: CMsgClientToGCFantasyCraftingSelectPlayer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      writer.uint32(8).uint32(message.fantasyLeague);
    }
    if (message.accountId !== undefined && message.accountId !== 0) {
      writer.uint32(16).uint32(message.accountId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFantasyCraftingSelectPlayer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingSelectPlayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fantasyLeague = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.accountId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingSelectPlayer {
    return {
      fantasyLeague: isSet(object.fantasyLeague) ? globalThis.Number(object.fantasyLeague) : 0,
      accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
    };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingSelectPlayer): unknown {
    const obj: any = {};
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      obj.fantasyLeague = Math.round(message.fantasyLeague);
    }
    if (message.accountId !== undefined && message.accountId !== 0) {
      obj.accountId = Math.round(message.accountId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCFantasyCraftingSelectPlayer>): CMsgClientToGCFantasyCraftingSelectPlayer {
    return CMsgClientToGCFantasyCraftingSelectPlayer.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFantasyCraftingSelectPlayer>,
  ): CMsgClientToGCFantasyCraftingSelectPlayer {
    const message = createBaseCMsgClientToGCFantasyCraftingSelectPlayer();
    message.fantasyLeague = object.fantasyLeague ?? 0;
    message.accountId = object.accountId ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingSelectPlayerResponse(): CMsgClientToGCFantasyCraftingSelectPlayerResponse {
  return { response: 0, tabletData: undefined };
}

export const CMsgClientToGCFantasyCraftingSelectPlayerResponse = {
  encode(
    message: CMsgClientToGCFantasyCraftingSelectPlayerResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.tabletData !== undefined) {
      CMsgDotaFantasyCraftingTabletData.encode(message.tabletData, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFantasyCraftingSelectPlayerResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingSelectPlayerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.tabletData = CMsgDotaFantasyCraftingTabletData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingSelectPlayerResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponseFromJSON(object.response)
        : 0,
      tabletData: isSet(object.tabletData) ? CMsgDotaFantasyCraftingTabletData.fromJSON(object.tabletData) : undefined,
    };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingSelectPlayerResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCFantasyCraftingSelectPlayerResponse_EResponseToJSON(message.response);
    }
    if (message.tabletData !== undefined) {
      obj.tabletData = CMsgDotaFantasyCraftingTabletData.toJSON(message.tabletData);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFantasyCraftingSelectPlayerResponse>,
  ): CMsgClientToGCFantasyCraftingSelectPlayerResponse {
    return CMsgClientToGCFantasyCraftingSelectPlayerResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFantasyCraftingSelectPlayerResponse>,
  ): CMsgClientToGCFantasyCraftingSelectPlayerResponse {
    const message = createBaseCMsgClientToGCFantasyCraftingSelectPlayerResponse();
    message.response = object.response ?? 0;
    message.tabletData =
      object.tabletData !== undefined && object.tabletData !== null
        ? CMsgDotaFantasyCraftingTabletData.fromPartial(object.tabletData)
        : undefined;
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingGenerateTablets(): CMsgClientToGCFantasyCraftingGenerateTablets {
  return { fantasyLeague: 0, accountIds: [] };
}

export const CMsgClientToGCFantasyCraftingGenerateTablets = {
  encode(message: CMsgClientToGCFantasyCraftingGenerateTablets, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      writer.uint32(8).uint32(message.fantasyLeague);
    }
    writer.uint32(18).fork();
    for (const v of message.accountIds) {
      writer.uint32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFantasyCraftingGenerateTablets {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingGenerateTablets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fantasyLeague = reader.uint32();
          continue;
        case 2:
          if (tag === 16) {
            message.accountIds.push(reader.uint32());

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.accountIds.push(reader.uint32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingGenerateTablets {
    return {
      fantasyLeague: isSet(object.fantasyLeague) ? globalThis.Number(object.fantasyLeague) : 0,
      accountIds: globalThis.Array.isArray(object?.accountIds)
        ? object.accountIds.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingGenerateTablets): unknown {
    const obj: any = {};
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      obj.fantasyLeague = Math.round(message.fantasyLeague);
    }
    if (message.accountIds?.length) {
      obj.accountIds = message.accountIds.map((e) => Math.round(e));
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFantasyCraftingGenerateTablets>,
  ): CMsgClientToGCFantasyCraftingGenerateTablets {
    return CMsgClientToGCFantasyCraftingGenerateTablets.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFantasyCraftingGenerateTablets>,
  ): CMsgClientToGCFantasyCraftingGenerateTablets {
    const message = createBaseCMsgClientToGCFantasyCraftingGenerateTablets();
    message.fantasyLeague = object.fantasyLeague ?? 0;
    message.accountIds = object.accountIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingGenerateTabletsResponse(): CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
  return { response: 0, userData: undefined, tabletData: undefined };
}

export const CMsgClientToGCFantasyCraftingGenerateTabletsResponse = {
  encode(
    message: CMsgClientToGCFantasyCraftingGenerateTabletsResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.userData !== undefined) {
      CMsgDotaFantasyCraftingUserData.encode(message.userData, writer.uint32(18).fork()).ldelim();
    }
    if (message.tabletData !== undefined) {
      CMsgDotaFantasyCraftingTabletData.encode(message.tabletData, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingGenerateTabletsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userData = CMsgDotaFantasyCraftingUserData.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tabletData = CMsgDotaFantasyCraftingTabletData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponseFromJSON(object.response)
        : 0,
      userData: isSet(object.userData) ? CMsgDotaFantasyCraftingUserData.fromJSON(object.userData) : undefined,
      tabletData: isSet(object.tabletData) ? CMsgDotaFantasyCraftingTabletData.fromJSON(object.tabletData) : undefined,
    };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingGenerateTabletsResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCFantasyCraftingGenerateTabletsResponse_EResponseToJSON(message.response);
    }
    if (message.userData !== undefined) {
      obj.userData = CMsgDotaFantasyCraftingUserData.toJSON(message.userData);
    }
    if (message.tabletData !== undefined) {
      obj.tabletData = CMsgDotaFantasyCraftingTabletData.toJSON(message.tabletData);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFantasyCraftingGenerateTabletsResponse>,
  ): CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
    return CMsgClientToGCFantasyCraftingGenerateTabletsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFantasyCraftingGenerateTabletsResponse>,
  ): CMsgClientToGCFantasyCraftingGenerateTabletsResponse {
    const message = createBaseCMsgClientToGCFantasyCraftingGenerateTabletsResponse();
    message.response = object.response ?? 0;
    message.userData =
      object.userData !== undefined && object.userData !== null
        ? CMsgDotaFantasyCraftingUserData.fromPartial(object.userData)
        : undefined;
    message.tabletData =
      object.tabletData !== undefined && object.tabletData !== null
        ? CMsgDotaFantasyCraftingTabletData.fromPartial(object.tabletData)
        : undefined;
    return message;
  },
};

function createBaseCMsgClientToGcFantasyCraftingUpgradeTablets(): CMsgClientToGcFantasyCraftingUpgradeTablets {
  return { fantasyLeague: 0 };
}

export const CMsgClientToGcFantasyCraftingUpgradeTablets = {
  encode(message: CMsgClientToGcFantasyCraftingUpgradeTablets, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      writer.uint32(8).uint32(message.fantasyLeague);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGcFantasyCraftingUpgradeTablets {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGcFantasyCraftingUpgradeTablets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fantasyLeague = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGcFantasyCraftingUpgradeTablets {
    return { fantasyLeague: isSet(object.fantasyLeague) ? globalThis.Number(object.fantasyLeague) : 0 };
  },

  toJSON(message: CMsgClientToGcFantasyCraftingUpgradeTablets): unknown {
    const obj: any = {};
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      obj.fantasyLeague = Math.round(message.fantasyLeague);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGcFantasyCraftingUpgradeTablets>): CMsgClientToGcFantasyCraftingUpgradeTablets {
    return CMsgClientToGcFantasyCraftingUpgradeTablets.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGcFantasyCraftingUpgradeTablets>,
  ): CMsgClientToGcFantasyCraftingUpgradeTablets {
    const message = createBaseCMsgClientToGcFantasyCraftingUpgradeTablets();
    message.fantasyLeague = object.fantasyLeague ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGcFantasyCraftingUpgradeTabletsResponse(): CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
  return { response: 0, tabletData: undefined };
}

export const CMsgClientToGcFantasyCraftingUpgradeTabletsResponse = {
  encode(
    message: CMsgClientToGcFantasyCraftingUpgradeTabletsResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.tabletData !== undefined) {
      CMsgDotaFantasyCraftingTabletData.encode(message.tabletData, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGcFantasyCraftingUpgradeTabletsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tabletData = CMsgDotaFantasyCraftingTabletData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponseFromJSON(object.response)
        : 0,
      tabletData: isSet(object.tabletData) ? CMsgDotaFantasyCraftingTabletData.fromJSON(object.tabletData) : undefined,
    };
  },

  toJSON(message: CMsgClientToGcFantasyCraftingUpgradeTabletsResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGcFantasyCraftingUpgradeTabletsResponse_EResponseToJSON(message.response);
    }
    if (message.tabletData !== undefined) {
      obj.tabletData = CMsgDotaFantasyCraftingTabletData.toJSON(message.tabletData);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGcFantasyCraftingUpgradeTabletsResponse>,
  ): CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
    return CMsgClientToGcFantasyCraftingUpgradeTabletsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGcFantasyCraftingUpgradeTabletsResponse>,
  ): CMsgClientToGcFantasyCraftingUpgradeTabletsResponse {
    const message = createBaseCMsgClientToGcFantasyCraftingUpgradeTabletsResponse();
    message.response = object.response ?? 0;
    message.tabletData =
      object.tabletData !== undefined && object.tabletData !== null
        ? CMsgDotaFantasyCraftingTabletData.fromPartial(object.tabletData)
        : undefined;
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingRerollOptions(): CMsgClientToGCFantasyCraftingRerollOptions {
  return { fantasyLeague: 0 };
}

export const CMsgClientToGCFantasyCraftingRerollOptions = {
  encode(message: CMsgClientToGCFantasyCraftingRerollOptions, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      writer.uint32(8).uint32(message.fantasyLeague);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFantasyCraftingRerollOptions {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingRerollOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fantasyLeague = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingRerollOptions {
    return { fantasyLeague: isSet(object.fantasyLeague) ? globalThis.Number(object.fantasyLeague) : 0 };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingRerollOptions): unknown {
    const obj: any = {};
    if (message.fantasyLeague !== undefined && message.fantasyLeague !== 0) {
      obj.fantasyLeague = Math.round(message.fantasyLeague);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCFantasyCraftingRerollOptions>): CMsgClientToGCFantasyCraftingRerollOptions {
    return CMsgClientToGCFantasyCraftingRerollOptions.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFantasyCraftingRerollOptions>,
  ): CMsgClientToGCFantasyCraftingRerollOptions {
    const message = createBaseCMsgClientToGCFantasyCraftingRerollOptions();
    message.fantasyLeague = object.fantasyLeague ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCFantasyCraftingRerollOptionsResponse(): CMsgClientToGCFantasyCraftingRerollOptionsResponse {
  return { response: 0, userData: undefined };
}

export const CMsgClientToGCFantasyCraftingRerollOptionsResponse = {
  encode(
    message: CMsgClientToGCFantasyCraftingRerollOptionsResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.userData !== undefined) {
      CMsgDotaFantasyCraftingUserData.encode(message.userData, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCFantasyCraftingRerollOptionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCFantasyCraftingRerollOptionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userData = CMsgDotaFantasyCraftingUserData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCFantasyCraftingRerollOptionsResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponseFromJSON(object.response)
        : 0,
      userData: isSet(object.userData) ? CMsgDotaFantasyCraftingUserData.fromJSON(object.userData) : undefined,
    };
  },

  toJSON(message: CMsgClientToGCFantasyCraftingRerollOptionsResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCFantasyCraftingRerollOptionsResponse_EResponseToJSON(message.response);
    }
    if (message.userData !== undefined) {
      obj.userData = CMsgDotaFantasyCraftingUserData.toJSON(message.userData);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCFantasyCraftingRerollOptionsResponse>,
  ): CMsgClientToGCFantasyCraftingRerollOptionsResponse {
    return CMsgClientToGCFantasyCraftingRerollOptionsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCFantasyCraftingRerollOptionsResponse>,
  ): CMsgClientToGCFantasyCraftingRerollOptionsResponse {
    const message = createBaseCMsgClientToGCFantasyCraftingRerollOptionsResponse();
    message.response = object.response ?? 0;
    message.userData =
      object.userData !== undefined && object.userData !== null
        ? CMsgDotaFantasyCraftingUserData.fromPartial(object.userData)
        : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

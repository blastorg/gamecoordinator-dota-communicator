// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: connectionless_netmessages.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { CCLCMsgSplitPlayerConnect } from "./netmessages";

export interface C2SCONNECTMessage {
  hostVersion?: number | undefined;
  authProtocol?: number | undefined;
  challengeNumber?: number | undefined;
  reservationCookie?: string | undefined;
  lowViolence?: boolean | undefined;
  encryptedPassword?: Buffer | undefined;
  splitplayers: CCLCMsgSplitPlayerConnect[];
  authSteam?: Buffer | undefined;
  challengeContext?: string | undefined;
}

export interface C2SCONNECTIONMessage {
  addonName?: string | undefined;
}

function createBaseC2SCONNECTMessage(): C2SCONNECTMessage {
  return {
    hostVersion: 0,
    authProtocol: 0,
    challengeNumber: 0,
    reservationCookie: "0",
    lowViolence: false,
    encryptedPassword: Buffer.alloc(0),
    splitplayers: [],
    authSteam: Buffer.alloc(0),
    challengeContext: "",
  };
}

export const C2SCONNECTMessage = {
  encode(message: C2SCONNECTMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.hostVersion !== undefined && message.hostVersion !== 0) {
      writer.uint32(8).uint32(message.hostVersion);
    }
    if (message.authProtocol !== undefined && message.authProtocol !== 0) {
      writer.uint32(16).uint32(message.authProtocol);
    }
    if (message.challengeNumber !== undefined && message.challengeNumber !== 0) {
      writer.uint32(24).uint32(message.challengeNumber);
    }
    if (message.reservationCookie !== undefined && message.reservationCookie !== "0") {
      writer.uint32(33).fixed64(message.reservationCookie);
    }
    if (message.lowViolence !== undefined && message.lowViolence !== false) {
      writer.uint32(40).bool(message.lowViolence);
    }
    if (message.encryptedPassword !== undefined && message.encryptedPassword.length !== 0) {
      writer.uint32(50).bytes(message.encryptedPassword);
    }
    for (const v of message.splitplayers) {
      CCLCMsgSplitPlayerConnect.encode(v!, writer.uint32(58).fork()).ldelim();
    }
    if (message.authSteam !== undefined && message.authSteam.length !== 0) {
      writer.uint32(66).bytes(message.authSteam);
    }
    if (message.challengeContext !== undefined && message.challengeContext !== "") {
      writer.uint32(74).string(message.challengeContext);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): C2SCONNECTMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseC2SCONNECTMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.hostVersion = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.authProtocol = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.challengeNumber = reader.uint32();
          continue;
        case 4:
          if (tag !== 33) {
            break;
          }

          message.reservationCookie = longToString(reader.fixed64() as Long);
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.lowViolence = reader.bool();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.encryptedPassword = reader.bytes() as Buffer;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.splitplayers.push(CCLCMsgSplitPlayerConnect.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.authSteam = reader.bytes() as Buffer;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.challengeContext = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): C2SCONNECTMessage {
    return {
      hostVersion: isSet(object.hostVersion) ? globalThis.Number(object.hostVersion) : 0,
      authProtocol: isSet(object.authProtocol) ? globalThis.Number(object.authProtocol) : 0,
      challengeNumber: isSet(object.challengeNumber) ? globalThis.Number(object.challengeNumber) : 0,
      reservationCookie: isSet(object.reservationCookie) ? globalThis.String(object.reservationCookie) : "0",
      lowViolence: isSet(object.lowViolence) ? globalThis.Boolean(object.lowViolence) : false,
      encryptedPassword: isSet(object.encryptedPassword)
        ? Buffer.from(bytesFromBase64(object.encryptedPassword))
        : Buffer.alloc(0),
      splitplayers: globalThis.Array.isArray(object?.splitplayers)
        ? object.splitplayers.map((e: any) => CCLCMsgSplitPlayerConnect.fromJSON(e))
        : [],
      authSteam: isSet(object.authSteam) ? Buffer.from(bytesFromBase64(object.authSteam)) : Buffer.alloc(0),
      challengeContext: isSet(object.challengeContext) ? globalThis.String(object.challengeContext) : "",
    };
  },

  toJSON(message: C2SCONNECTMessage): unknown {
    const obj: any = {};
    if (message.hostVersion !== undefined && message.hostVersion !== 0) {
      obj.hostVersion = Math.round(message.hostVersion);
    }
    if (message.authProtocol !== undefined && message.authProtocol !== 0) {
      obj.authProtocol = Math.round(message.authProtocol);
    }
    if (message.challengeNumber !== undefined && message.challengeNumber !== 0) {
      obj.challengeNumber = Math.round(message.challengeNumber);
    }
    if (message.reservationCookie !== undefined && message.reservationCookie !== "0") {
      obj.reservationCookie = message.reservationCookie;
    }
    if (message.lowViolence !== undefined && message.lowViolence !== false) {
      obj.lowViolence = message.lowViolence;
    }
    if (message.encryptedPassword !== undefined && message.encryptedPassword.length !== 0) {
      obj.encryptedPassword = base64FromBytes(message.encryptedPassword);
    }
    if (message.splitplayers?.length) {
      obj.splitplayers = message.splitplayers.map((e) => CCLCMsgSplitPlayerConnect.toJSON(e));
    }
    if (message.authSteam !== undefined && message.authSteam.length !== 0) {
      obj.authSteam = base64FromBytes(message.authSteam);
    }
    if (message.challengeContext !== undefined && message.challengeContext !== "") {
      obj.challengeContext = message.challengeContext;
    }
    return obj;
  },

  create(base?: DeepPartial<C2SCONNECTMessage>): C2SCONNECTMessage {
    return C2SCONNECTMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<C2SCONNECTMessage>): C2SCONNECTMessage {
    const message = createBaseC2SCONNECTMessage();
    message.hostVersion = object.hostVersion ?? 0;
    message.authProtocol = object.authProtocol ?? 0;
    message.challengeNumber = object.challengeNumber ?? 0;
    message.reservationCookie = object.reservationCookie ?? "0";
    message.lowViolence = object.lowViolence ?? false;
    message.encryptedPassword = object.encryptedPassword ?? Buffer.alloc(0);
    message.splitplayers = object.splitplayers?.map((e) => CCLCMsgSplitPlayerConnect.fromPartial(e)) || [];
    message.authSteam = object.authSteam ?? Buffer.alloc(0);
    message.challengeContext = object.challengeContext ?? "";
    return message;
  },
};

function createBaseC2SCONNECTIONMessage(): C2SCONNECTIONMessage {
  return { addonName: "" };
}

export const C2SCONNECTIONMessage = {
  encode(message: C2SCONNECTIONMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.addonName !== undefined && message.addonName !== "") {
      writer.uint32(10).string(message.addonName);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): C2SCONNECTIONMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseC2SCONNECTIONMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.addonName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): C2SCONNECTIONMessage {
    return { addonName: isSet(object.addonName) ? globalThis.String(object.addonName) : "" };
  },

  toJSON(message: C2SCONNECTIONMessage): unknown {
    const obj: any = {};
    if (message.addonName !== undefined && message.addonName !== "") {
      obj.addonName = message.addonName;
    }
    return obj;
  },

  create(base?: DeepPartial<C2SCONNECTIONMessage>): C2SCONNECTIONMessage {
    return C2SCONNECTIONMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<C2SCONNECTIONMessage>): C2SCONNECTIONMessage {
    const message = createBaseC2SCONNECTIONMessage();
    message.addonName = object.addonName ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

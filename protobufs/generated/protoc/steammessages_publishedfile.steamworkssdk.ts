// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: steammessages_publishedfile.steamworkssdk.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export interface CPublishedFileSubscribeRequest {
  publishedfileid?: string | undefined;
  listType?: number | undefined;
  appid?: number | undefined;
  notifyClient?: boolean | undefined;
}

export interface CPublishedFileSubscribeResponse {}

export interface CPublishedFileUnsubscribeRequest {
  publishedfileid?: string | undefined;
  listType?: number | undefined;
  appid?: number | undefined;
  notifyClient?: boolean | undefined;
}

export interface CPublishedFileUnsubscribeResponse {}

export interface CPublishedFilePublishRequest {
  appid?: number | undefined;
  consumerAppid?: number | undefined;
  cloudfilename?: string | undefined;
  previewCloudfilename?: string | undefined;
  title?: string | undefined;
  fileDescription?: string | undefined;
  fileType?: number | undefined;
  consumerShortcutName?: string | undefined;
  youtubeUsername?: string | undefined;
  youtubeVideoid?: string | undefined;
  visibility?: number | undefined;
  redirectUri?: string | undefined;
  tags: string[];
  collectionType?: string | undefined;
  gameType?: string | undefined;
  url?: string | undefined;
}

export interface CPublishedFilePublishResponse {
  publishedfileid?: string | undefined;
  redirectUri?: string | undefined;
}

export interface CPublishedFileGetDetailsRequest {
  publishedfileids: string[];
  includetags?: boolean | undefined;
  includeadditionalpreviews?: boolean | undefined;
  includechildren?: boolean | undefined;
  includekvtags?: boolean | undefined;
  includevotes?: boolean | undefined;
  shortDescription?: boolean | undefined;
}

export interface PublishedFileDetails {
  result?: number | undefined;
  publishedfileid?: string | undefined;
  creator?: string | undefined;
  creatorAppid?: number | undefined;
  consumerAppid?: number | undefined;
  consumerShortcutid?: number | undefined;
  filename?: string | undefined;
  fileSize?: string | undefined;
  previewFileSize?: string | undefined;
  fileUrl?: string | undefined;
  previewUrl?: string | undefined;
  youtubevideoid?: string | undefined;
  url?: string | undefined;
  hcontentFile?: string | undefined;
  hcontentPreview?: string | undefined;
  title?: string | undefined;
  fileDescription?: string | undefined;
  shortDescription?: string | undefined;
  timeCreated?: number | undefined;
  timeUpdated?: number | undefined;
  visibility?: number | undefined;
  flags?: number | undefined;
  workshopFile?: boolean | undefined;
  workshopAccepted?: boolean | undefined;
  showSubscribeAll?: boolean | undefined;
  numCommentsDeveloper?: number | undefined;
  numCommentsPublic?: number | undefined;
  banned?: boolean | undefined;
  banReason?: string | undefined;
  banner?: string | undefined;
  canBeDeleted?: boolean | undefined;
  incompatible?: boolean | undefined;
  appName?: string | undefined;
  fileType?: number | undefined;
  canSubscribe?: boolean | undefined;
  subscriptions?: number | undefined;
  favorited?: number | undefined;
  followers?: number | undefined;
  lifetimeSubscriptions?: number | undefined;
  lifetimeFavorited?: number | undefined;
  lifetimeFollowers?: number | undefined;
  views?: number | undefined;
  imageWidth?: number | undefined;
  imageHeight?: number | undefined;
  imageUrl?: string | undefined;
  spoilerTag?: boolean | undefined;
  shortcutid?: number | undefined;
  shortcutname?: string | undefined;
  numChildren?: number | undefined;
  numReports?: number | undefined;
  previews: PublishedFileDetails_Preview[];
  tags: PublishedFileDetails_Tag[];
  children: PublishedFileDetails_Child[];
  kvtags: PublishedFileDetails_KVTag[];
  voteData?: PublishedFileDetails_VoteData | undefined;
  timeSubscribed?: number | undefined;
}

export interface PublishedFileDetails_Tag {
  tag?: string | undefined;
  adminonly?: boolean | undefined;
}

export interface PublishedFileDetails_Preview {
  previewid?: string | undefined;
  sortorder?: number | undefined;
  url?: string | undefined;
  size?: number | undefined;
  filename?: string | undefined;
  youtubevideoid?: string | undefined;
}

export interface PublishedFileDetails_Child {
  publishedfileid?: string | undefined;
  sortorder?: number | undefined;
  fileType?: number | undefined;
}

export interface PublishedFileDetails_KVTag {
  key?: string | undefined;
  value?: string | undefined;
}

export interface PublishedFileDetails_VoteData {
  score?: number | undefined;
  votesUp?: number | undefined;
  votesDown?: number | undefined;
}

export interface CPublishedFileGetDetailsResponse {
  publishedfiledetails: PublishedFileDetails[];
}

export interface CPublishedFileGetUserFilesRequest {
  appid?: number | undefined;
  page?: number | undefined;
  numperpage?: number | undefined;
  sortmethod?: string | undefined;
  totalonly?: boolean | undefined;
  privacy?: number | undefined;
  idsOnly?: boolean | undefined;
  requiredtags: string[];
  excludedtags: string[];
}

export interface CPublishedFileGetUserFilesResponse {
  total?: number | undefined;
  startindex?: number | undefined;
  publishedfiledetails: PublishedFileDetails[];
  apps: CPublishedFileGetUserFilesResponse_App[];
}

export interface CPublishedFileGetUserFilesResponse_App {
  appid?: number | undefined;
  name?: string | undefined;
  shortcutid?: number | undefined;
  private?: boolean | undefined;
}

export interface CPublishedFileUpdateRequest {
  appid?: number | undefined;
  publishedfileid?: string | undefined;
  title?: string | undefined;
  fileDescription?: string | undefined;
  visibility?: number | undefined;
  tags: string[];
  filename?: string | undefined;
  previewFilename?: string | undefined;
}

export interface CPublishedFileUpdateResponse {}

export interface CPublishedFileRefreshVotingQueueRequest {
  appid?: number | undefined;
  matchingFileType?: number | undefined;
  tags: string[];
  matchAllTags?: boolean | undefined;
  excludedTags: string[];
  desiredQueueSize?: number | undefined;
}

export interface CPublishedFileRefreshVotingQueueResponse {}

function createBaseCPublishedFileSubscribeRequest(): CPublishedFileSubscribeRequest {
  return { publishedfileid: "0", listType: 0, appid: 0, notifyClient: false };
}

export const CPublishedFileSubscribeRequest = {
  encode(message: CPublishedFileSubscribeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.publishedfileid !== undefined && message.publishedfileid !== "0") {
      writer.uint32(8).uint64(message.publishedfileid);
    }
    if (message.listType !== undefined && message.listType !== 0) {
      writer.uint32(16).uint32(message.listType);
    }
    if (message.appid !== undefined && message.appid !== 0) {
      writer.uint32(24).int32(message.appid);
    }
    if (message.notifyClient !== undefined && message.notifyClient !== false) {
      writer.uint32(32).bool(message.notifyClient);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileSubscribeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileSubscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.publishedfileid = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.listType = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.appid = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.notifyClient = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPublishedFileSubscribeRequest {
    return {
      publishedfileid: isSet(object.publishedfileid) ? globalThis.String(object.publishedfileid) : "0",
      listType: isSet(object.listType) ? globalThis.Number(object.listType) : 0,
      appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
      notifyClient: isSet(object.notifyClient) ? globalThis.Boolean(object.notifyClient) : false,
    };
  },

  toJSON(message: CPublishedFileSubscribeRequest): unknown {
    const obj: any = {};
    if (message.publishedfileid !== undefined && message.publishedfileid !== "0") {
      obj.publishedfileid = message.publishedfileid;
    }
    if (message.listType !== undefined && message.listType !== 0) {
      obj.listType = Math.round(message.listType);
    }
    if (message.appid !== undefined && message.appid !== 0) {
      obj.appid = Math.round(message.appid);
    }
    if (message.notifyClient !== undefined && message.notifyClient !== false) {
      obj.notifyClient = message.notifyClient;
    }
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileSubscribeRequest>): CPublishedFileSubscribeRequest {
    return CPublishedFileSubscribeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPublishedFileSubscribeRequest>): CPublishedFileSubscribeRequest {
    const message = createBaseCPublishedFileSubscribeRequest();
    message.publishedfileid = object.publishedfileid ?? "0";
    message.listType = object.listType ?? 0;
    message.appid = object.appid ?? 0;
    message.notifyClient = object.notifyClient ?? false;
    return message;
  },
};

function createBaseCPublishedFileSubscribeResponse(): CPublishedFileSubscribeResponse {
  return {};
}

export const CPublishedFileSubscribeResponse = {
  encode(_: CPublishedFileSubscribeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileSubscribeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileSubscribeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CPublishedFileSubscribeResponse {
    return {};
  },

  toJSON(_: CPublishedFileSubscribeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileSubscribeResponse>): CPublishedFileSubscribeResponse {
    return CPublishedFileSubscribeResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CPublishedFileSubscribeResponse>): CPublishedFileSubscribeResponse {
    const message = createBaseCPublishedFileSubscribeResponse();
    return message;
  },
};

function createBaseCPublishedFileUnsubscribeRequest(): CPublishedFileUnsubscribeRequest {
  return { publishedfileid: "0", listType: 0, appid: 0, notifyClient: false };
}

export const CPublishedFileUnsubscribeRequest = {
  encode(message: CPublishedFileUnsubscribeRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.publishedfileid !== undefined && message.publishedfileid !== "0") {
      writer.uint32(8).uint64(message.publishedfileid);
    }
    if (message.listType !== undefined && message.listType !== 0) {
      writer.uint32(16).uint32(message.listType);
    }
    if (message.appid !== undefined && message.appid !== 0) {
      writer.uint32(24).int32(message.appid);
    }
    if (message.notifyClient !== undefined && message.notifyClient !== false) {
      writer.uint32(32).bool(message.notifyClient);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileUnsubscribeRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileUnsubscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.publishedfileid = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.listType = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.appid = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.notifyClient = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPublishedFileUnsubscribeRequest {
    return {
      publishedfileid: isSet(object.publishedfileid) ? globalThis.String(object.publishedfileid) : "0",
      listType: isSet(object.listType) ? globalThis.Number(object.listType) : 0,
      appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
      notifyClient: isSet(object.notifyClient) ? globalThis.Boolean(object.notifyClient) : false,
    };
  },

  toJSON(message: CPublishedFileUnsubscribeRequest): unknown {
    const obj: any = {};
    if (message.publishedfileid !== undefined && message.publishedfileid !== "0") {
      obj.publishedfileid = message.publishedfileid;
    }
    if (message.listType !== undefined && message.listType !== 0) {
      obj.listType = Math.round(message.listType);
    }
    if (message.appid !== undefined && message.appid !== 0) {
      obj.appid = Math.round(message.appid);
    }
    if (message.notifyClient !== undefined && message.notifyClient !== false) {
      obj.notifyClient = message.notifyClient;
    }
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileUnsubscribeRequest>): CPublishedFileUnsubscribeRequest {
    return CPublishedFileUnsubscribeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPublishedFileUnsubscribeRequest>): CPublishedFileUnsubscribeRequest {
    const message = createBaseCPublishedFileUnsubscribeRequest();
    message.publishedfileid = object.publishedfileid ?? "0";
    message.listType = object.listType ?? 0;
    message.appid = object.appid ?? 0;
    message.notifyClient = object.notifyClient ?? false;
    return message;
  },
};

function createBaseCPublishedFileUnsubscribeResponse(): CPublishedFileUnsubscribeResponse {
  return {};
}

export const CPublishedFileUnsubscribeResponse = {
  encode(_: CPublishedFileUnsubscribeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileUnsubscribeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileUnsubscribeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CPublishedFileUnsubscribeResponse {
    return {};
  },

  toJSON(_: CPublishedFileUnsubscribeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileUnsubscribeResponse>): CPublishedFileUnsubscribeResponse {
    return CPublishedFileUnsubscribeResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CPublishedFileUnsubscribeResponse>): CPublishedFileUnsubscribeResponse {
    const message = createBaseCPublishedFileUnsubscribeResponse();
    return message;
  },
};

function createBaseCPublishedFilePublishRequest(): CPublishedFilePublishRequest {
  return {
    appid: 0,
    consumerAppid: 0,
    cloudfilename: "",
    previewCloudfilename: "",
    title: "",
    fileDescription: "",
    fileType: 0,
    consumerShortcutName: "",
    youtubeUsername: "",
    youtubeVideoid: "",
    visibility: 0,
    redirectUri: "",
    tags: [],
    collectionType: "",
    gameType: "",
    url: "",
  };
}

export const CPublishedFilePublishRequest = {
  encode(message: CPublishedFilePublishRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appid !== undefined && message.appid !== 0) {
      writer.uint32(8).uint32(message.appid);
    }
    if (message.consumerAppid !== undefined && message.consumerAppid !== 0) {
      writer.uint32(16).uint32(message.consumerAppid);
    }
    if (message.cloudfilename !== undefined && message.cloudfilename !== "") {
      writer.uint32(26).string(message.cloudfilename);
    }
    if (message.previewCloudfilename !== undefined && message.previewCloudfilename !== "") {
      writer.uint32(34).string(message.previewCloudfilename);
    }
    if (message.title !== undefined && message.title !== "") {
      writer.uint32(42).string(message.title);
    }
    if (message.fileDescription !== undefined && message.fileDescription !== "") {
      writer.uint32(50).string(message.fileDescription);
    }
    if (message.fileType !== undefined && message.fileType !== 0) {
      writer.uint32(56).uint32(message.fileType);
    }
    if (message.consumerShortcutName !== undefined && message.consumerShortcutName !== "") {
      writer.uint32(66).string(message.consumerShortcutName);
    }
    if (message.youtubeUsername !== undefined && message.youtubeUsername !== "") {
      writer.uint32(74).string(message.youtubeUsername);
    }
    if (message.youtubeVideoid !== undefined && message.youtubeVideoid !== "") {
      writer.uint32(82).string(message.youtubeVideoid);
    }
    if (message.visibility !== undefined && message.visibility !== 0) {
      writer.uint32(88).uint32(message.visibility);
    }
    if (message.redirectUri !== undefined && message.redirectUri !== "") {
      writer.uint32(98).string(message.redirectUri);
    }
    for (const v of message.tags) {
      writer.uint32(106).string(v!);
    }
    if (message.collectionType !== undefined && message.collectionType !== "") {
      writer.uint32(114).string(message.collectionType);
    }
    if (message.gameType !== undefined && message.gameType !== "") {
      writer.uint32(122).string(message.gameType);
    }
    if (message.url !== undefined && message.url !== "") {
      writer.uint32(130).string(message.url);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFilePublishRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFilePublishRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.appid = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.consumerAppid = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.cloudfilename = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.previewCloudfilename = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.title = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.fileDescription = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.fileType = reader.uint32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.consumerShortcutName = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.youtubeUsername = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.youtubeVideoid = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.visibility = reader.uint32();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.redirectUri = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.collectionType = reader.string();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.gameType = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.url = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPublishedFilePublishRequest {
    return {
      appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
      consumerAppid: isSet(object.consumerAppid) ? globalThis.Number(object.consumerAppid) : 0,
      cloudfilename: isSet(object.cloudfilename) ? globalThis.String(object.cloudfilename) : "",
      previewCloudfilename: isSet(object.previewCloudfilename) ? globalThis.String(object.previewCloudfilename) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      fileDescription: isSet(object.fileDescription) ? globalThis.String(object.fileDescription) : "",
      fileType: isSet(object.fileType) ? globalThis.Number(object.fileType) : 0,
      consumerShortcutName: isSet(object.consumerShortcutName) ? globalThis.String(object.consumerShortcutName) : "",
      youtubeUsername: isSet(object.youtubeUsername) ? globalThis.String(object.youtubeUsername) : "",
      youtubeVideoid: isSet(object.youtubeVideoid) ? globalThis.String(object.youtubeVideoid) : "",
      visibility: isSet(object.visibility) ? globalThis.Number(object.visibility) : 0,
      redirectUri: isSet(object.redirectUri) ? globalThis.String(object.redirectUri) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      collectionType: isSet(object.collectionType) ? globalThis.String(object.collectionType) : "",
      gameType: isSet(object.gameType) ? globalThis.String(object.gameType) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
    };
  },

  toJSON(message: CPublishedFilePublishRequest): unknown {
    const obj: any = {};
    if (message.appid !== undefined && message.appid !== 0) {
      obj.appid = Math.round(message.appid);
    }
    if (message.consumerAppid !== undefined && message.consumerAppid !== 0) {
      obj.consumerAppid = Math.round(message.consumerAppid);
    }
    if (message.cloudfilename !== undefined && message.cloudfilename !== "") {
      obj.cloudfilename = message.cloudfilename;
    }
    if (message.previewCloudfilename !== undefined && message.previewCloudfilename !== "") {
      obj.previewCloudfilename = message.previewCloudfilename;
    }
    if (message.title !== undefined && message.title !== "") {
      obj.title = message.title;
    }
    if (message.fileDescription !== undefined && message.fileDescription !== "") {
      obj.fileDescription = message.fileDescription;
    }
    if (message.fileType !== undefined && message.fileType !== 0) {
      obj.fileType = Math.round(message.fileType);
    }
    if (message.consumerShortcutName !== undefined && message.consumerShortcutName !== "") {
      obj.consumerShortcutName = message.consumerShortcutName;
    }
    if (message.youtubeUsername !== undefined && message.youtubeUsername !== "") {
      obj.youtubeUsername = message.youtubeUsername;
    }
    if (message.youtubeVideoid !== undefined && message.youtubeVideoid !== "") {
      obj.youtubeVideoid = message.youtubeVideoid;
    }
    if (message.visibility !== undefined && message.visibility !== 0) {
      obj.visibility = Math.round(message.visibility);
    }
    if (message.redirectUri !== undefined && message.redirectUri !== "") {
      obj.redirectUri = message.redirectUri;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.collectionType !== undefined && message.collectionType !== "") {
      obj.collectionType = message.collectionType;
    }
    if (message.gameType !== undefined && message.gameType !== "") {
      obj.gameType = message.gameType;
    }
    if (message.url !== undefined && message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create(base?: DeepPartial<CPublishedFilePublishRequest>): CPublishedFilePublishRequest {
    return CPublishedFilePublishRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPublishedFilePublishRequest>): CPublishedFilePublishRequest {
    const message = createBaseCPublishedFilePublishRequest();
    message.appid = object.appid ?? 0;
    message.consumerAppid = object.consumerAppid ?? 0;
    message.cloudfilename = object.cloudfilename ?? "";
    message.previewCloudfilename = object.previewCloudfilename ?? "";
    message.title = object.title ?? "";
    message.fileDescription = object.fileDescription ?? "";
    message.fileType = object.fileType ?? 0;
    message.consumerShortcutName = object.consumerShortcutName ?? "";
    message.youtubeUsername = object.youtubeUsername ?? "";
    message.youtubeVideoid = object.youtubeVideoid ?? "";
    message.visibility = object.visibility ?? 0;
    message.redirectUri = object.redirectUri ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.collectionType = object.collectionType ?? "";
    message.gameType = object.gameType ?? "";
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseCPublishedFilePublishResponse(): CPublishedFilePublishResponse {
  return { publishedfileid: "0", redirectUri: "" };
}

export const CPublishedFilePublishResponse = {
  encode(message: CPublishedFilePublishResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.publishedfileid !== undefined && message.publishedfileid !== "0") {
      writer.uint32(8).uint64(message.publishedfileid);
    }
    if (message.redirectUri !== undefined && message.redirectUri !== "") {
      writer.uint32(18).string(message.redirectUri);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFilePublishResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFilePublishResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.publishedfileid = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.redirectUri = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPublishedFilePublishResponse {
    return {
      publishedfileid: isSet(object.publishedfileid) ? globalThis.String(object.publishedfileid) : "0",
      redirectUri: isSet(object.redirectUri) ? globalThis.String(object.redirectUri) : "",
    };
  },

  toJSON(message: CPublishedFilePublishResponse): unknown {
    const obj: any = {};
    if (message.publishedfileid !== undefined && message.publishedfileid !== "0") {
      obj.publishedfileid = message.publishedfileid;
    }
    if (message.redirectUri !== undefined && message.redirectUri !== "") {
      obj.redirectUri = message.redirectUri;
    }
    return obj;
  },

  create(base?: DeepPartial<CPublishedFilePublishResponse>): CPublishedFilePublishResponse {
    return CPublishedFilePublishResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPublishedFilePublishResponse>): CPublishedFilePublishResponse {
    const message = createBaseCPublishedFilePublishResponse();
    message.publishedfileid = object.publishedfileid ?? "0";
    message.redirectUri = object.redirectUri ?? "";
    return message;
  },
};

function createBaseCPublishedFileGetDetailsRequest(): CPublishedFileGetDetailsRequest {
  return {
    publishedfileids: [],
    includetags: false,
    includeadditionalpreviews: false,
    includechildren: false,
    includekvtags: false,
    includevotes: false,
    shortDescription: false,
  };
}

export const CPublishedFileGetDetailsRequest = {
  encode(message: CPublishedFileGetDetailsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.publishedfileids) {
      writer.fixed64(v);
    }
    writer.ldelim();
    if (message.includetags !== undefined && message.includetags !== false) {
      writer.uint32(16).bool(message.includetags);
    }
    if (message.includeadditionalpreviews !== undefined && message.includeadditionalpreviews !== false) {
      writer.uint32(24).bool(message.includeadditionalpreviews);
    }
    if (message.includechildren !== undefined && message.includechildren !== false) {
      writer.uint32(32).bool(message.includechildren);
    }
    if (message.includekvtags !== undefined && message.includekvtags !== false) {
      writer.uint32(40).bool(message.includekvtags);
    }
    if (message.includevotes !== undefined && message.includevotes !== false) {
      writer.uint32(48).bool(message.includevotes);
    }
    if (message.shortDescription !== undefined && message.shortDescription !== false) {
      writer.uint32(64).bool(message.shortDescription);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileGetDetailsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileGetDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 9) {
            message.publishedfileids.push(longToString(reader.fixed64() as Long));

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.publishedfileids.push(longToString(reader.fixed64() as Long));
            }

            continue;
          }

          break;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.includetags = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.includeadditionalpreviews = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.includechildren = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.includekvtags = reader.bool();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.includevotes = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.shortDescription = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPublishedFileGetDetailsRequest {
    return {
      publishedfileids: globalThis.Array.isArray(object?.publishedfileids)
        ? object.publishedfileids.map((e: any) => globalThis.String(e))
        : [],
      includetags: isSet(object.includetags) ? globalThis.Boolean(object.includetags) : false,
      includeadditionalpreviews: isSet(object.includeadditionalpreviews)
        ? globalThis.Boolean(object.includeadditionalpreviews)
        : false,
      includechildren: isSet(object.includechildren) ? globalThis.Boolean(object.includechildren) : false,
      includekvtags: isSet(object.includekvtags) ? globalThis.Boolean(object.includekvtags) : false,
      includevotes: isSet(object.includevotes) ? globalThis.Boolean(object.includevotes) : false,
      shortDescription: isSet(object.shortDescription) ? globalThis.Boolean(object.shortDescription) : false,
    };
  },

  toJSON(message: CPublishedFileGetDetailsRequest): unknown {
    const obj: any = {};
    if (message.publishedfileids?.length) {
      obj.publishedfileids = message.publishedfileids;
    }
    if (message.includetags !== undefined && message.includetags !== false) {
      obj.includetags = message.includetags;
    }
    if (message.includeadditionalpreviews !== undefined && message.includeadditionalpreviews !== false) {
      obj.includeadditionalpreviews = message.includeadditionalpreviews;
    }
    if (message.includechildren !== undefined && message.includechildren !== false) {
      obj.includechildren = message.includechildren;
    }
    if (message.includekvtags !== undefined && message.includekvtags !== false) {
      obj.includekvtags = message.includekvtags;
    }
    if (message.includevotes !== undefined && message.includevotes !== false) {
      obj.includevotes = message.includevotes;
    }
    if (message.shortDescription !== undefined && message.shortDescription !== false) {
      obj.shortDescription = message.shortDescription;
    }
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileGetDetailsRequest>): CPublishedFileGetDetailsRequest {
    return CPublishedFileGetDetailsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPublishedFileGetDetailsRequest>): CPublishedFileGetDetailsRequest {
    const message = createBaseCPublishedFileGetDetailsRequest();
    message.publishedfileids = object.publishedfileids?.map((e) => e) || [];
    message.includetags = object.includetags ?? false;
    message.includeadditionalpreviews = object.includeadditionalpreviews ?? false;
    message.includechildren = object.includechildren ?? false;
    message.includekvtags = object.includekvtags ?? false;
    message.includevotes = object.includevotes ?? false;
    message.shortDescription = object.shortDescription ?? false;
    return message;
  },
};

function createBasePublishedFileDetails(): PublishedFileDetails {
  return {
    result: 0,
    publishedfileid: "0",
    creator: "0",
    creatorAppid: 0,
    consumerAppid: 0,
    consumerShortcutid: 0,
    filename: "",
    fileSize: "0",
    previewFileSize: "0",
    fileUrl: "",
    previewUrl: "",
    youtubevideoid: "",
    url: "",
    hcontentFile: "0",
    hcontentPreview: "0",
    title: "",
    fileDescription: "",
    shortDescription: "",
    timeCreated: 0,
    timeUpdated: 0,
    visibility: 0,
    flags: 0,
    workshopFile: false,
    workshopAccepted: false,
    showSubscribeAll: false,
    numCommentsDeveloper: 0,
    numCommentsPublic: 0,
    banned: false,
    banReason: "",
    banner: "0",
    canBeDeleted: false,
    incompatible: false,
    appName: "",
    fileType: 0,
    canSubscribe: false,
    subscriptions: 0,
    favorited: 0,
    followers: 0,
    lifetimeSubscriptions: 0,
    lifetimeFavorited: 0,
    lifetimeFollowers: 0,
    views: 0,
    imageWidth: 0,
    imageHeight: 0,
    imageUrl: "",
    spoilerTag: false,
    shortcutid: 0,
    shortcutname: "",
    numChildren: 0,
    numReports: 0,
    previews: [],
    tags: [],
    children: [],
    kvtags: [],
    voteData: undefined,
    timeSubscribed: 0,
  };
}

export const PublishedFileDetails = {
  encode(message: PublishedFileDetails, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.result !== undefined && message.result !== 0) {
      writer.uint32(8).uint32(message.result);
    }
    if (message.publishedfileid !== undefined && message.publishedfileid !== "0") {
      writer.uint32(16).uint64(message.publishedfileid);
    }
    if (message.creator !== undefined && message.creator !== "0") {
      writer.uint32(25).fixed64(message.creator);
    }
    if (message.creatorAppid !== undefined && message.creatorAppid !== 0) {
      writer.uint32(32).uint32(message.creatorAppid);
    }
    if (message.consumerAppid !== undefined && message.consumerAppid !== 0) {
      writer.uint32(40).uint32(message.consumerAppid);
    }
    if (message.consumerShortcutid !== undefined && message.consumerShortcutid !== 0) {
      writer.uint32(48).uint32(message.consumerShortcutid);
    }
    if (message.filename !== undefined && message.filename !== "") {
      writer.uint32(58).string(message.filename);
    }
    if (message.fileSize !== undefined && message.fileSize !== "0") {
      writer.uint32(64).uint64(message.fileSize);
    }
    if (message.previewFileSize !== undefined && message.previewFileSize !== "0") {
      writer.uint32(72).uint64(message.previewFileSize);
    }
    if (message.fileUrl !== undefined && message.fileUrl !== "") {
      writer.uint32(82).string(message.fileUrl);
    }
    if (message.previewUrl !== undefined && message.previewUrl !== "") {
      writer.uint32(90).string(message.previewUrl);
    }
    if (message.youtubevideoid !== undefined && message.youtubevideoid !== "") {
      writer.uint32(98).string(message.youtubevideoid);
    }
    if (message.url !== undefined && message.url !== "") {
      writer.uint32(106).string(message.url);
    }
    if (message.hcontentFile !== undefined && message.hcontentFile !== "0") {
      writer.uint32(113).fixed64(message.hcontentFile);
    }
    if (message.hcontentPreview !== undefined && message.hcontentPreview !== "0") {
      writer.uint32(121).fixed64(message.hcontentPreview);
    }
    if (message.title !== undefined && message.title !== "") {
      writer.uint32(130).string(message.title);
    }
    if (message.fileDescription !== undefined && message.fileDescription !== "") {
      writer.uint32(138).string(message.fileDescription);
    }
    if (message.shortDescription !== undefined && message.shortDescription !== "") {
      writer.uint32(146).string(message.shortDescription);
    }
    if (message.timeCreated !== undefined && message.timeCreated !== 0) {
      writer.uint32(152).uint32(message.timeCreated);
    }
    if (message.timeUpdated !== undefined && message.timeUpdated !== 0) {
      writer.uint32(160).uint32(message.timeUpdated);
    }
    if (message.visibility !== undefined && message.visibility !== 0) {
      writer.uint32(168).uint32(message.visibility);
    }
    if (message.flags !== undefined && message.flags !== 0) {
      writer.uint32(176).uint32(message.flags);
    }
    if (message.workshopFile !== undefined && message.workshopFile !== false) {
      writer.uint32(184).bool(message.workshopFile);
    }
    if (message.workshopAccepted !== undefined && message.workshopAccepted !== false) {
      writer.uint32(192).bool(message.workshopAccepted);
    }
    if (message.showSubscribeAll !== undefined && message.showSubscribeAll !== false) {
      writer.uint32(200).bool(message.showSubscribeAll);
    }
    if (message.numCommentsDeveloper !== undefined && message.numCommentsDeveloper !== 0) {
      writer.uint32(208).int32(message.numCommentsDeveloper);
    }
    if (message.numCommentsPublic !== undefined && message.numCommentsPublic !== 0) {
      writer.uint32(216).int32(message.numCommentsPublic);
    }
    if (message.banned !== undefined && message.banned !== false) {
      writer.uint32(224).bool(message.banned);
    }
    if (message.banReason !== undefined && message.banReason !== "") {
      writer.uint32(234).string(message.banReason);
    }
    if (message.banner !== undefined && message.banner !== "0") {
      writer.uint32(241).fixed64(message.banner);
    }
    if (message.canBeDeleted !== undefined && message.canBeDeleted !== false) {
      writer.uint32(248).bool(message.canBeDeleted);
    }
    if (message.incompatible !== undefined && message.incompatible !== false) {
      writer.uint32(256).bool(message.incompatible);
    }
    if (message.appName !== undefined && message.appName !== "") {
      writer.uint32(266).string(message.appName);
    }
    if (message.fileType !== undefined && message.fileType !== 0) {
      writer.uint32(272).uint32(message.fileType);
    }
    if (message.canSubscribe !== undefined && message.canSubscribe !== false) {
      writer.uint32(280).bool(message.canSubscribe);
    }
    if (message.subscriptions !== undefined && message.subscriptions !== 0) {
      writer.uint32(288).uint32(message.subscriptions);
    }
    if (message.favorited !== undefined && message.favorited !== 0) {
      writer.uint32(296).uint32(message.favorited);
    }
    if (message.followers !== undefined && message.followers !== 0) {
      writer.uint32(304).uint32(message.followers);
    }
    if (message.lifetimeSubscriptions !== undefined && message.lifetimeSubscriptions !== 0) {
      writer.uint32(312).uint32(message.lifetimeSubscriptions);
    }
    if (message.lifetimeFavorited !== undefined && message.lifetimeFavorited !== 0) {
      writer.uint32(320).uint32(message.lifetimeFavorited);
    }
    if (message.lifetimeFollowers !== undefined && message.lifetimeFollowers !== 0) {
      writer.uint32(328).uint32(message.lifetimeFollowers);
    }
    if (message.views !== undefined && message.views !== 0) {
      writer.uint32(336).uint32(message.views);
    }
    if (message.imageWidth !== undefined && message.imageWidth !== 0) {
      writer.uint32(344).uint32(message.imageWidth);
    }
    if (message.imageHeight !== undefined && message.imageHeight !== 0) {
      writer.uint32(352).uint32(message.imageHeight);
    }
    if (message.imageUrl !== undefined && message.imageUrl !== "") {
      writer.uint32(362).string(message.imageUrl);
    }
    if (message.spoilerTag !== undefined && message.spoilerTag !== false) {
      writer.uint32(368).bool(message.spoilerTag);
    }
    if (message.shortcutid !== undefined && message.shortcutid !== 0) {
      writer.uint32(376).uint32(message.shortcutid);
    }
    if (message.shortcutname !== undefined && message.shortcutname !== "") {
      writer.uint32(386).string(message.shortcutname);
    }
    if (message.numChildren !== undefined && message.numChildren !== 0) {
      writer.uint32(392).uint32(message.numChildren);
    }
    if (message.numReports !== undefined && message.numReports !== 0) {
      writer.uint32(400).uint32(message.numReports);
    }
    for (const v of message.previews) {
      PublishedFileDetails_Preview.encode(v!, writer.uint32(410).fork()).ldelim();
    }
    for (const v of message.tags) {
      PublishedFileDetails_Tag.encode(v!, writer.uint32(418).fork()).ldelim();
    }
    for (const v of message.children) {
      PublishedFileDetails_Child.encode(v!, writer.uint32(426).fork()).ldelim();
    }
    for (const v of message.kvtags) {
      PublishedFileDetails_KVTag.encode(v!, writer.uint32(434).fork()).ldelim();
    }
    if (message.voteData !== undefined) {
      PublishedFileDetails_VoteData.encode(message.voteData, writer.uint32(442).fork()).ldelim();
    }
    if (message.timeSubscribed !== undefined && message.timeSubscribed !== 0) {
      writer.uint32(448).uint32(message.timeSubscribed);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PublishedFileDetails {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishedFileDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.result = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.publishedfileid = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.creator = longToString(reader.fixed64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.creatorAppid = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.consumerAppid = reader.uint32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.consumerShortcutid = reader.uint32();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.filename = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.fileSize = longToString(reader.uint64() as Long);
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.previewFileSize = longToString(reader.uint64() as Long);
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.fileUrl = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.previewUrl = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.youtubevideoid = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.url = reader.string();
          continue;
        case 14:
          if (tag !== 113) {
            break;
          }

          message.hcontentFile = longToString(reader.fixed64() as Long);
          continue;
        case 15:
          if (tag !== 121) {
            break;
          }

          message.hcontentPreview = longToString(reader.fixed64() as Long);
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.title = reader.string();
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.fileDescription = reader.string();
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.shortDescription = reader.string();
          continue;
        case 19:
          if (tag !== 152) {
            break;
          }

          message.timeCreated = reader.uint32();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.timeUpdated = reader.uint32();
          continue;
        case 21:
          if (tag !== 168) {
            break;
          }

          message.visibility = reader.uint32();
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.flags = reader.uint32();
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.workshopFile = reader.bool();
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.workshopAccepted = reader.bool();
          continue;
        case 25:
          if (tag !== 200) {
            break;
          }

          message.showSubscribeAll = reader.bool();
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.numCommentsDeveloper = reader.int32();
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }

          message.numCommentsPublic = reader.int32();
          continue;
        case 28:
          if (tag !== 224) {
            break;
          }

          message.banned = reader.bool();
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.banReason = reader.string();
          continue;
        case 30:
          if (tag !== 241) {
            break;
          }

          message.banner = longToString(reader.fixed64() as Long);
          continue;
        case 31:
          if (tag !== 248) {
            break;
          }

          message.canBeDeleted = reader.bool();
          continue;
        case 32:
          if (tag !== 256) {
            break;
          }

          message.incompatible = reader.bool();
          continue;
        case 33:
          if (tag !== 266) {
            break;
          }

          message.appName = reader.string();
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }

          message.fileType = reader.uint32();
          continue;
        case 35:
          if (tag !== 280) {
            break;
          }

          message.canSubscribe = reader.bool();
          continue;
        case 36:
          if (tag !== 288) {
            break;
          }

          message.subscriptions = reader.uint32();
          continue;
        case 37:
          if (tag !== 296) {
            break;
          }

          message.favorited = reader.uint32();
          continue;
        case 38:
          if (tag !== 304) {
            break;
          }

          message.followers = reader.uint32();
          continue;
        case 39:
          if (tag !== 312) {
            break;
          }

          message.lifetimeSubscriptions = reader.uint32();
          continue;
        case 40:
          if (tag !== 320) {
            break;
          }

          message.lifetimeFavorited = reader.uint32();
          continue;
        case 41:
          if (tag !== 328) {
            break;
          }

          message.lifetimeFollowers = reader.uint32();
          continue;
        case 42:
          if (tag !== 336) {
            break;
          }

          message.views = reader.uint32();
          continue;
        case 43:
          if (tag !== 344) {
            break;
          }

          message.imageWidth = reader.uint32();
          continue;
        case 44:
          if (tag !== 352) {
            break;
          }

          message.imageHeight = reader.uint32();
          continue;
        case 45:
          if (tag !== 362) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        case 46:
          if (tag !== 368) {
            break;
          }

          message.spoilerTag = reader.bool();
          continue;
        case 47:
          if (tag !== 376) {
            break;
          }

          message.shortcutid = reader.uint32();
          continue;
        case 48:
          if (tag !== 386) {
            break;
          }

          message.shortcutname = reader.string();
          continue;
        case 49:
          if (tag !== 392) {
            break;
          }

          message.numChildren = reader.uint32();
          continue;
        case 50:
          if (tag !== 400) {
            break;
          }

          message.numReports = reader.uint32();
          continue;
        case 51:
          if (tag !== 410) {
            break;
          }

          message.previews.push(PublishedFileDetails_Preview.decode(reader, reader.uint32()));
          continue;
        case 52:
          if (tag !== 418) {
            break;
          }

          message.tags.push(PublishedFileDetails_Tag.decode(reader, reader.uint32()));
          continue;
        case 53:
          if (tag !== 426) {
            break;
          }

          message.children.push(PublishedFileDetails_Child.decode(reader, reader.uint32()));
          continue;
        case 54:
          if (tag !== 434) {
            break;
          }

          message.kvtags.push(PublishedFileDetails_KVTag.decode(reader, reader.uint32()));
          continue;
        case 55:
          if (tag !== 442) {
            break;
          }

          message.voteData = PublishedFileDetails_VoteData.decode(reader, reader.uint32());
          continue;
        case 56:
          if (tag !== 448) {
            break;
          }

          message.timeSubscribed = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishedFileDetails {
    return {
      result: isSet(object.result) ? globalThis.Number(object.result) : 0,
      publishedfileid: isSet(object.publishedfileid) ? globalThis.String(object.publishedfileid) : "0",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "0",
      creatorAppid: isSet(object.creatorAppid) ? globalThis.Number(object.creatorAppid) : 0,
      consumerAppid: isSet(object.consumerAppid) ? globalThis.Number(object.consumerAppid) : 0,
      consumerShortcutid: isSet(object.consumerShortcutid) ? globalThis.Number(object.consumerShortcutid) : 0,
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      fileSize: isSet(object.fileSize) ? globalThis.String(object.fileSize) : "0",
      previewFileSize: isSet(object.previewFileSize) ? globalThis.String(object.previewFileSize) : "0",
      fileUrl: isSet(object.fileUrl) ? globalThis.String(object.fileUrl) : "",
      previewUrl: isSet(object.previewUrl) ? globalThis.String(object.previewUrl) : "",
      youtubevideoid: isSet(object.youtubevideoid) ? globalThis.String(object.youtubevideoid) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      hcontentFile: isSet(object.hcontentFile) ? globalThis.String(object.hcontentFile) : "0",
      hcontentPreview: isSet(object.hcontentPreview) ? globalThis.String(object.hcontentPreview) : "0",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      fileDescription: isSet(object.fileDescription) ? globalThis.String(object.fileDescription) : "",
      shortDescription: isSet(object.shortDescription) ? globalThis.String(object.shortDescription) : "",
      timeCreated: isSet(object.timeCreated) ? globalThis.Number(object.timeCreated) : 0,
      timeUpdated: isSet(object.timeUpdated) ? globalThis.Number(object.timeUpdated) : 0,
      visibility: isSet(object.visibility) ? globalThis.Number(object.visibility) : 0,
      flags: isSet(object.flags) ? globalThis.Number(object.flags) : 0,
      workshopFile: isSet(object.workshopFile) ? globalThis.Boolean(object.workshopFile) : false,
      workshopAccepted: isSet(object.workshopAccepted) ? globalThis.Boolean(object.workshopAccepted) : false,
      showSubscribeAll: isSet(object.showSubscribeAll) ? globalThis.Boolean(object.showSubscribeAll) : false,
      numCommentsDeveloper: isSet(object.numCommentsDeveloper) ? globalThis.Number(object.numCommentsDeveloper) : 0,
      numCommentsPublic: isSet(object.numCommentsPublic) ? globalThis.Number(object.numCommentsPublic) : 0,
      banned: isSet(object.banned) ? globalThis.Boolean(object.banned) : false,
      banReason: isSet(object.banReason) ? globalThis.String(object.banReason) : "",
      banner: isSet(object.banner) ? globalThis.String(object.banner) : "0",
      canBeDeleted: isSet(object.canBeDeleted) ? globalThis.Boolean(object.canBeDeleted) : false,
      incompatible: isSet(object.incompatible) ? globalThis.Boolean(object.incompatible) : false,
      appName: isSet(object.appName) ? globalThis.String(object.appName) : "",
      fileType: isSet(object.fileType) ? globalThis.Number(object.fileType) : 0,
      canSubscribe: isSet(object.canSubscribe) ? globalThis.Boolean(object.canSubscribe) : false,
      subscriptions: isSet(object.subscriptions) ? globalThis.Number(object.subscriptions) : 0,
      favorited: isSet(object.favorited) ? globalThis.Number(object.favorited) : 0,
      followers: isSet(object.followers) ? globalThis.Number(object.followers) : 0,
      lifetimeSubscriptions: isSet(object.lifetimeSubscriptions) ? globalThis.Number(object.lifetimeSubscriptions) : 0,
      lifetimeFavorited: isSet(object.lifetimeFavorited) ? globalThis.Number(object.lifetimeFavorited) : 0,
      lifetimeFollowers: isSet(object.lifetimeFollowers) ? globalThis.Number(object.lifetimeFollowers) : 0,
      views: isSet(object.views) ? globalThis.Number(object.views) : 0,
      imageWidth: isSet(object.imageWidth) ? globalThis.Number(object.imageWidth) : 0,
      imageHeight: isSet(object.imageHeight) ? globalThis.Number(object.imageHeight) : 0,
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      spoilerTag: isSet(object.spoilerTag) ? globalThis.Boolean(object.spoilerTag) : false,
      shortcutid: isSet(object.shortcutid) ? globalThis.Number(object.shortcutid) : 0,
      shortcutname: isSet(object.shortcutname) ? globalThis.String(object.shortcutname) : "",
      numChildren: isSet(object.numChildren) ? globalThis.Number(object.numChildren) : 0,
      numReports: isSet(object.numReports) ? globalThis.Number(object.numReports) : 0,
      previews: globalThis.Array.isArray(object?.previews)
        ? object.previews.map((e: any) => PublishedFileDetails_Preview.fromJSON(e))
        : [],
      tags: globalThis.Array.isArray(object?.tags)
        ? object.tags.map((e: any) => PublishedFileDetails_Tag.fromJSON(e))
        : [],
      children: globalThis.Array.isArray(object?.children)
        ? object.children.map((e: any) => PublishedFileDetails_Child.fromJSON(e))
        : [],
      kvtags: globalThis.Array.isArray(object?.kvtags)
        ? object.kvtags.map((e: any) => PublishedFileDetails_KVTag.fromJSON(e))
        : [],
      voteData: isSet(object.voteData) ? PublishedFileDetails_VoteData.fromJSON(object.voteData) : undefined,
      timeSubscribed: isSet(object.timeSubscribed) ? globalThis.Number(object.timeSubscribed) : 0,
    };
  },

  toJSON(message: PublishedFileDetails): unknown {
    const obj: any = {};
    if (message.result !== undefined && message.result !== 0) {
      obj.result = Math.round(message.result);
    }
    if (message.publishedfileid !== undefined && message.publishedfileid !== "0") {
      obj.publishedfileid = message.publishedfileid;
    }
    if (message.creator !== undefined && message.creator !== "0") {
      obj.creator = message.creator;
    }
    if (message.creatorAppid !== undefined && message.creatorAppid !== 0) {
      obj.creatorAppid = Math.round(message.creatorAppid);
    }
    if (message.consumerAppid !== undefined && message.consumerAppid !== 0) {
      obj.consumerAppid = Math.round(message.consumerAppid);
    }
    if (message.consumerShortcutid !== undefined && message.consumerShortcutid !== 0) {
      obj.consumerShortcutid = Math.round(message.consumerShortcutid);
    }
    if (message.filename !== undefined && message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.fileSize !== undefined && message.fileSize !== "0") {
      obj.fileSize = message.fileSize;
    }
    if (message.previewFileSize !== undefined && message.previewFileSize !== "0") {
      obj.previewFileSize = message.previewFileSize;
    }
    if (message.fileUrl !== undefined && message.fileUrl !== "") {
      obj.fileUrl = message.fileUrl;
    }
    if (message.previewUrl !== undefined && message.previewUrl !== "") {
      obj.previewUrl = message.previewUrl;
    }
    if (message.youtubevideoid !== undefined && message.youtubevideoid !== "") {
      obj.youtubevideoid = message.youtubevideoid;
    }
    if (message.url !== undefined && message.url !== "") {
      obj.url = message.url;
    }
    if (message.hcontentFile !== undefined && message.hcontentFile !== "0") {
      obj.hcontentFile = message.hcontentFile;
    }
    if (message.hcontentPreview !== undefined && message.hcontentPreview !== "0") {
      obj.hcontentPreview = message.hcontentPreview;
    }
    if (message.title !== undefined && message.title !== "") {
      obj.title = message.title;
    }
    if (message.fileDescription !== undefined && message.fileDescription !== "") {
      obj.fileDescription = message.fileDescription;
    }
    if (message.shortDescription !== undefined && message.shortDescription !== "") {
      obj.shortDescription = message.shortDescription;
    }
    if (message.timeCreated !== undefined && message.timeCreated !== 0) {
      obj.timeCreated = Math.round(message.timeCreated);
    }
    if (message.timeUpdated !== undefined && message.timeUpdated !== 0) {
      obj.timeUpdated = Math.round(message.timeUpdated);
    }
    if (message.visibility !== undefined && message.visibility !== 0) {
      obj.visibility = Math.round(message.visibility);
    }
    if (message.flags !== undefined && message.flags !== 0) {
      obj.flags = Math.round(message.flags);
    }
    if (message.workshopFile !== undefined && message.workshopFile !== false) {
      obj.workshopFile = message.workshopFile;
    }
    if (message.workshopAccepted !== undefined && message.workshopAccepted !== false) {
      obj.workshopAccepted = message.workshopAccepted;
    }
    if (message.showSubscribeAll !== undefined && message.showSubscribeAll !== false) {
      obj.showSubscribeAll = message.showSubscribeAll;
    }
    if (message.numCommentsDeveloper !== undefined && message.numCommentsDeveloper !== 0) {
      obj.numCommentsDeveloper = Math.round(message.numCommentsDeveloper);
    }
    if (message.numCommentsPublic !== undefined && message.numCommentsPublic !== 0) {
      obj.numCommentsPublic = Math.round(message.numCommentsPublic);
    }
    if (message.banned !== undefined && message.banned !== false) {
      obj.banned = message.banned;
    }
    if (message.banReason !== undefined && message.banReason !== "") {
      obj.banReason = message.banReason;
    }
    if (message.banner !== undefined && message.banner !== "0") {
      obj.banner = message.banner;
    }
    if (message.canBeDeleted !== undefined && message.canBeDeleted !== false) {
      obj.canBeDeleted = message.canBeDeleted;
    }
    if (message.incompatible !== undefined && message.incompatible !== false) {
      obj.incompatible = message.incompatible;
    }
    if (message.appName !== undefined && message.appName !== "") {
      obj.appName = message.appName;
    }
    if (message.fileType !== undefined && message.fileType !== 0) {
      obj.fileType = Math.round(message.fileType);
    }
    if (message.canSubscribe !== undefined && message.canSubscribe !== false) {
      obj.canSubscribe = message.canSubscribe;
    }
    if (message.subscriptions !== undefined && message.subscriptions !== 0) {
      obj.subscriptions = Math.round(message.subscriptions);
    }
    if (message.favorited !== undefined && message.favorited !== 0) {
      obj.favorited = Math.round(message.favorited);
    }
    if (message.followers !== undefined && message.followers !== 0) {
      obj.followers = Math.round(message.followers);
    }
    if (message.lifetimeSubscriptions !== undefined && message.lifetimeSubscriptions !== 0) {
      obj.lifetimeSubscriptions = Math.round(message.lifetimeSubscriptions);
    }
    if (message.lifetimeFavorited !== undefined && message.lifetimeFavorited !== 0) {
      obj.lifetimeFavorited = Math.round(message.lifetimeFavorited);
    }
    if (message.lifetimeFollowers !== undefined && message.lifetimeFollowers !== 0) {
      obj.lifetimeFollowers = Math.round(message.lifetimeFollowers);
    }
    if (message.views !== undefined && message.views !== 0) {
      obj.views = Math.round(message.views);
    }
    if (message.imageWidth !== undefined && message.imageWidth !== 0) {
      obj.imageWidth = Math.round(message.imageWidth);
    }
    if (message.imageHeight !== undefined && message.imageHeight !== 0) {
      obj.imageHeight = Math.round(message.imageHeight);
    }
    if (message.imageUrl !== undefined && message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.spoilerTag !== undefined && message.spoilerTag !== false) {
      obj.spoilerTag = message.spoilerTag;
    }
    if (message.shortcutid !== undefined && message.shortcutid !== 0) {
      obj.shortcutid = Math.round(message.shortcutid);
    }
    if (message.shortcutname !== undefined && message.shortcutname !== "") {
      obj.shortcutname = message.shortcutname;
    }
    if (message.numChildren !== undefined && message.numChildren !== 0) {
      obj.numChildren = Math.round(message.numChildren);
    }
    if (message.numReports !== undefined && message.numReports !== 0) {
      obj.numReports = Math.round(message.numReports);
    }
    if (message.previews?.length) {
      obj.previews = message.previews.map((e) => PublishedFileDetails_Preview.toJSON(e));
    }
    if (message.tags?.length) {
      obj.tags = message.tags.map((e) => PublishedFileDetails_Tag.toJSON(e));
    }
    if (message.children?.length) {
      obj.children = message.children.map((e) => PublishedFileDetails_Child.toJSON(e));
    }
    if (message.kvtags?.length) {
      obj.kvtags = message.kvtags.map((e) => PublishedFileDetails_KVTag.toJSON(e));
    }
    if (message.voteData !== undefined) {
      obj.voteData = PublishedFileDetails_VoteData.toJSON(message.voteData);
    }
    if (message.timeSubscribed !== undefined && message.timeSubscribed !== 0) {
      obj.timeSubscribed = Math.round(message.timeSubscribed);
    }
    return obj;
  },

  create(base?: DeepPartial<PublishedFileDetails>): PublishedFileDetails {
    return PublishedFileDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PublishedFileDetails>): PublishedFileDetails {
    const message = createBasePublishedFileDetails();
    message.result = object.result ?? 0;
    message.publishedfileid = object.publishedfileid ?? "0";
    message.creator = object.creator ?? "0";
    message.creatorAppid = object.creatorAppid ?? 0;
    message.consumerAppid = object.consumerAppid ?? 0;
    message.consumerShortcutid = object.consumerShortcutid ?? 0;
    message.filename = object.filename ?? "";
    message.fileSize = object.fileSize ?? "0";
    message.previewFileSize = object.previewFileSize ?? "0";
    message.fileUrl = object.fileUrl ?? "";
    message.previewUrl = object.previewUrl ?? "";
    message.youtubevideoid = object.youtubevideoid ?? "";
    message.url = object.url ?? "";
    message.hcontentFile = object.hcontentFile ?? "0";
    message.hcontentPreview = object.hcontentPreview ?? "0";
    message.title = object.title ?? "";
    message.fileDescription = object.fileDescription ?? "";
    message.shortDescription = object.shortDescription ?? "";
    message.timeCreated = object.timeCreated ?? 0;
    message.timeUpdated = object.timeUpdated ?? 0;
    message.visibility = object.visibility ?? 0;
    message.flags = object.flags ?? 0;
    message.workshopFile = object.workshopFile ?? false;
    message.workshopAccepted = object.workshopAccepted ?? false;
    message.showSubscribeAll = object.showSubscribeAll ?? false;
    message.numCommentsDeveloper = object.numCommentsDeveloper ?? 0;
    message.numCommentsPublic = object.numCommentsPublic ?? 0;
    message.banned = object.banned ?? false;
    message.banReason = object.banReason ?? "";
    message.banner = object.banner ?? "0";
    message.canBeDeleted = object.canBeDeleted ?? false;
    message.incompatible = object.incompatible ?? false;
    message.appName = object.appName ?? "";
    message.fileType = object.fileType ?? 0;
    message.canSubscribe = object.canSubscribe ?? false;
    message.subscriptions = object.subscriptions ?? 0;
    message.favorited = object.favorited ?? 0;
    message.followers = object.followers ?? 0;
    message.lifetimeSubscriptions = object.lifetimeSubscriptions ?? 0;
    message.lifetimeFavorited = object.lifetimeFavorited ?? 0;
    message.lifetimeFollowers = object.lifetimeFollowers ?? 0;
    message.views = object.views ?? 0;
    message.imageWidth = object.imageWidth ?? 0;
    message.imageHeight = object.imageHeight ?? 0;
    message.imageUrl = object.imageUrl ?? "";
    message.spoilerTag = object.spoilerTag ?? false;
    message.shortcutid = object.shortcutid ?? 0;
    message.shortcutname = object.shortcutname ?? "";
    message.numChildren = object.numChildren ?? 0;
    message.numReports = object.numReports ?? 0;
    message.previews = object.previews?.map((e) => PublishedFileDetails_Preview.fromPartial(e)) || [];
    message.tags = object.tags?.map((e) => PublishedFileDetails_Tag.fromPartial(e)) || [];
    message.children = object.children?.map((e) => PublishedFileDetails_Child.fromPartial(e)) || [];
    message.kvtags = object.kvtags?.map((e) => PublishedFileDetails_KVTag.fromPartial(e)) || [];
    message.voteData =
      object.voteData !== undefined && object.voteData !== null
        ? PublishedFileDetails_VoteData.fromPartial(object.voteData)
        : undefined;
    message.timeSubscribed = object.timeSubscribed ?? 0;
    return message;
  },
};

function createBasePublishedFileDetails_Tag(): PublishedFileDetails_Tag {
  return { tag: "", adminonly: false };
}

export const PublishedFileDetails_Tag = {
  encode(message: PublishedFileDetails_Tag, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.tag !== undefined && message.tag !== "") {
      writer.uint32(10).string(message.tag);
    }
    if (message.adminonly !== undefined && message.adminonly !== false) {
      writer.uint32(16).bool(message.adminonly);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PublishedFileDetails_Tag {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishedFileDetails_Tag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.tag = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.adminonly = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishedFileDetails_Tag {
    return {
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      adminonly: isSet(object.adminonly) ? globalThis.Boolean(object.adminonly) : false,
    };
  },

  toJSON(message: PublishedFileDetails_Tag): unknown {
    const obj: any = {};
    if (message.tag !== undefined && message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.adminonly !== undefined && message.adminonly !== false) {
      obj.adminonly = message.adminonly;
    }
    return obj;
  },

  create(base?: DeepPartial<PublishedFileDetails_Tag>): PublishedFileDetails_Tag {
    return PublishedFileDetails_Tag.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PublishedFileDetails_Tag>): PublishedFileDetails_Tag {
    const message = createBasePublishedFileDetails_Tag();
    message.tag = object.tag ?? "";
    message.adminonly = object.adminonly ?? false;
    return message;
  },
};

function createBasePublishedFileDetails_Preview(): PublishedFileDetails_Preview {
  return { previewid: "0", sortorder: 0, url: "", size: 0, filename: "", youtubevideoid: "" };
}

export const PublishedFileDetails_Preview = {
  encode(message: PublishedFileDetails_Preview, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.previewid !== undefined && message.previewid !== "0") {
      writer.uint32(8).uint64(message.previewid);
    }
    if (message.sortorder !== undefined && message.sortorder !== 0) {
      writer.uint32(16).uint32(message.sortorder);
    }
    if (message.url !== undefined && message.url !== "") {
      writer.uint32(26).string(message.url);
    }
    if (message.size !== undefined && message.size !== 0) {
      writer.uint32(32).uint32(message.size);
    }
    if (message.filename !== undefined && message.filename !== "") {
      writer.uint32(42).string(message.filename);
    }
    if (message.youtubevideoid !== undefined && message.youtubevideoid !== "") {
      writer.uint32(50).string(message.youtubevideoid);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PublishedFileDetails_Preview {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishedFileDetails_Preview();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.previewid = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortorder = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.size = reader.uint32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.filename = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.youtubevideoid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishedFileDetails_Preview {
    return {
      previewid: isSet(object.previewid) ? globalThis.String(object.previewid) : "0",
      sortorder: isSet(object.sortorder) ? globalThis.Number(object.sortorder) : 0,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      youtubevideoid: isSet(object.youtubevideoid) ? globalThis.String(object.youtubevideoid) : "",
    };
  },

  toJSON(message: PublishedFileDetails_Preview): unknown {
    const obj: any = {};
    if (message.previewid !== undefined && message.previewid !== "0") {
      obj.previewid = message.previewid;
    }
    if (message.sortorder !== undefined && message.sortorder !== 0) {
      obj.sortorder = Math.round(message.sortorder);
    }
    if (message.url !== undefined && message.url !== "") {
      obj.url = message.url;
    }
    if (message.size !== undefined && message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    if (message.filename !== undefined && message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.youtubevideoid !== undefined && message.youtubevideoid !== "") {
      obj.youtubevideoid = message.youtubevideoid;
    }
    return obj;
  },

  create(base?: DeepPartial<PublishedFileDetails_Preview>): PublishedFileDetails_Preview {
    return PublishedFileDetails_Preview.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PublishedFileDetails_Preview>): PublishedFileDetails_Preview {
    const message = createBasePublishedFileDetails_Preview();
    message.previewid = object.previewid ?? "0";
    message.sortorder = object.sortorder ?? 0;
    message.url = object.url ?? "";
    message.size = object.size ?? 0;
    message.filename = object.filename ?? "";
    message.youtubevideoid = object.youtubevideoid ?? "";
    return message;
  },
};

function createBasePublishedFileDetails_Child(): PublishedFileDetails_Child {
  return { publishedfileid: "0", sortorder: 0, fileType: 0 };
}

export const PublishedFileDetails_Child = {
  encode(message: PublishedFileDetails_Child, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.publishedfileid !== undefined && message.publishedfileid !== "0") {
      writer.uint32(8).uint64(message.publishedfileid);
    }
    if (message.sortorder !== undefined && message.sortorder !== 0) {
      writer.uint32(16).uint32(message.sortorder);
    }
    if (message.fileType !== undefined && message.fileType !== 0) {
      writer.uint32(24).uint32(message.fileType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PublishedFileDetails_Child {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishedFileDetails_Child();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.publishedfileid = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sortorder = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.fileType = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishedFileDetails_Child {
    return {
      publishedfileid: isSet(object.publishedfileid) ? globalThis.String(object.publishedfileid) : "0",
      sortorder: isSet(object.sortorder) ? globalThis.Number(object.sortorder) : 0,
      fileType: isSet(object.fileType) ? globalThis.Number(object.fileType) : 0,
    };
  },

  toJSON(message: PublishedFileDetails_Child): unknown {
    const obj: any = {};
    if (message.publishedfileid !== undefined && message.publishedfileid !== "0") {
      obj.publishedfileid = message.publishedfileid;
    }
    if (message.sortorder !== undefined && message.sortorder !== 0) {
      obj.sortorder = Math.round(message.sortorder);
    }
    if (message.fileType !== undefined && message.fileType !== 0) {
      obj.fileType = Math.round(message.fileType);
    }
    return obj;
  },

  create(base?: DeepPartial<PublishedFileDetails_Child>): PublishedFileDetails_Child {
    return PublishedFileDetails_Child.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PublishedFileDetails_Child>): PublishedFileDetails_Child {
    const message = createBasePublishedFileDetails_Child();
    message.publishedfileid = object.publishedfileid ?? "0";
    message.sortorder = object.sortorder ?? 0;
    message.fileType = object.fileType ?? 0;
    return message;
  },
};

function createBasePublishedFileDetails_KVTag(): PublishedFileDetails_KVTag {
  return { key: "", value: "" };
}

export const PublishedFileDetails_KVTag = {
  encode(message: PublishedFileDetails_KVTag, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== undefined && message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined && message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PublishedFileDetails_KVTag {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishedFileDetails_KVTag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishedFileDetails_KVTag {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: PublishedFileDetails_KVTag): unknown {
    const obj: any = {};
    if (message.key !== undefined && message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined && message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<PublishedFileDetails_KVTag>): PublishedFileDetails_KVTag {
    return PublishedFileDetails_KVTag.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PublishedFileDetails_KVTag>): PublishedFileDetails_KVTag {
    const message = createBasePublishedFileDetails_KVTag();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBasePublishedFileDetails_VoteData(): PublishedFileDetails_VoteData {
  return { score: 0, votesUp: 0, votesDown: 0 };
}

export const PublishedFileDetails_VoteData = {
  encode(message: PublishedFileDetails_VoteData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.score !== undefined && message.score !== 0) {
      writer.uint32(13).float(message.score);
    }
    if (message.votesUp !== undefined && message.votesUp !== 0) {
      writer.uint32(16).uint32(message.votesUp);
    }
    if (message.votesDown !== undefined && message.votesDown !== 0) {
      writer.uint32(24).uint32(message.votesDown);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PublishedFileDetails_VoteData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePublishedFileDetails_VoteData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.score = reader.float();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.votesUp = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.votesDown = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PublishedFileDetails_VoteData {
    return {
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      votesUp: isSet(object.votesUp) ? globalThis.Number(object.votesUp) : 0,
      votesDown: isSet(object.votesDown) ? globalThis.Number(object.votesDown) : 0,
    };
  },

  toJSON(message: PublishedFileDetails_VoteData): unknown {
    const obj: any = {};
    if (message.score !== undefined && message.score !== 0) {
      obj.score = message.score;
    }
    if (message.votesUp !== undefined && message.votesUp !== 0) {
      obj.votesUp = Math.round(message.votesUp);
    }
    if (message.votesDown !== undefined && message.votesDown !== 0) {
      obj.votesDown = Math.round(message.votesDown);
    }
    return obj;
  },

  create(base?: DeepPartial<PublishedFileDetails_VoteData>): PublishedFileDetails_VoteData {
    return PublishedFileDetails_VoteData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PublishedFileDetails_VoteData>): PublishedFileDetails_VoteData {
    const message = createBasePublishedFileDetails_VoteData();
    message.score = object.score ?? 0;
    message.votesUp = object.votesUp ?? 0;
    message.votesDown = object.votesDown ?? 0;
    return message;
  },
};

function createBaseCPublishedFileGetDetailsResponse(): CPublishedFileGetDetailsResponse {
  return { publishedfiledetails: [] };
}

export const CPublishedFileGetDetailsResponse = {
  encode(message: CPublishedFileGetDetailsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.publishedfiledetails) {
      PublishedFileDetails.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileGetDetailsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileGetDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.publishedfiledetails.push(PublishedFileDetails.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPublishedFileGetDetailsResponse {
    return {
      publishedfiledetails: globalThis.Array.isArray(object?.publishedfiledetails)
        ? object.publishedfiledetails.map((e: any) => PublishedFileDetails.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CPublishedFileGetDetailsResponse): unknown {
    const obj: any = {};
    if (message.publishedfiledetails?.length) {
      obj.publishedfiledetails = message.publishedfiledetails.map((e) => PublishedFileDetails.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileGetDetailsResponse>): CPublishedFileGetDetailsResponse {
    return CPublishedFileGetDetailsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPublishedFileGetDetailsResponse>): CPublishedFileGetDetailsResponse {
    const message = createBaseCPublishedFileGetDetailsResponse();
    message.publishedfiledetails = object.publishedfiledetails?.map((e) => PublishedFileDetails.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCPublishedFileGetUserFilesRequest(): CPublishedFileGetUserFilesRequest {
  return {
    appid: 0,
    page: 1,
    numperpage: 1,
    sortmethod: "lastupdated",
    totalonly: false,
    privacy: 0,
    idsOnly: false,
    requiredtags: [],
    excludedtags: [],
  };
}

export const CPublishedFileGetUserFilesRequest = {
  encode(message: CPublishedFileGetUserFilesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appid !== undefined && message.appid !== 0) {
      writer.uint32(8).uint32(message.appid);
    }
    if (message.page !== undefined && message.page !== 1) {
      writer.uint32(24).uint32(message.page);
    }
    if (message.numperpage !== undefined && message.numperpage !== 1) {
      writer.uint32(32).uint32(message.numperpage);
    }
    if (message.sortmethod !== undefined && message.sortmethod !== "lastupdated") {
      writer.uint32(50).string(message.sortmethod);
    }
    if (message.totalonly !== undefined && message.totalonly !== false) {
      writer.uint32(56).bool(message.totalonly);
    }
    if (message.privacy !== undefined && message.privacy !== 0) {
      writer.uint32(72).uint32(message.privacy);
    }
    if (message.idsOnly !== undefined && message.idsOnly !== false) {
      writer.uint32(80).bool(message.idsOnly);
    }
    for (const v of message.requiredtags) {
      writer.uint32(90).string(v!);
    }
    for (const v of message.excludedtags) {
      writer.uint32(98).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileGetUserFilesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileGetUserFilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.appid = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.page = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.numperpage = reader.uint32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.sortmethod = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.totalonly = reader.bool();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.privacy = reader.uint32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.idsOnly = reader.bool();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.requiredtags.push(reader.string());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.excludedtags.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPublishedFileGetUserFilesRequest {
    return {
      appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 1,
      numperpage: isSet(object.numperpage) ? globalThis.Number(object.numperpage) : 1,
      sortmethod: isSet(object.sortmethod) ? globalThis.String(object.sortmethod) : "lastupdated",
      totalonly: isSet(object.totalonly) ? globalThis.Boolean(object.totalonly) : false,
      privacy: isSet(object.privacy) ? globalThis.Number(object.privacy) : 0,
      idsOnly: isSet(object.idsOnly) ? globalThis.Boolean(object.idsOnly) : false,
      requiredtags: globalThis.Array.isArray(object?.requiredtags)
        ? object.requiredtags.map((e: any) => globalThis.String(e))
        : [],
      excludedtags: globalThis.Array.isArray(object?.excludedtags)
        ? object.excludedtags.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CPublishedFileGetUserFilesRequest): unknown {
    const obj: any = {};
    if (message.appid !== undefined && message.appid !== 0) {
      obj.appid = Math.round(message.appid);
    }
    if (message.page !== undefined && message.page !== 1) {
      obj.page = Math.round(message.page);
    }
    if (message.numperpage !== undefined && message.numperpage !== 1) {
      obj.numperpage = Math.round(message.numperpage);
    }
    if (message.sortmethod !== undefined && message.sortmethod !== "lastupdated") {
      obj.sortmethod = message.sortmethod;
    }
    if (message.totalonly !== undefined && message.totalonly !== false) {
      obj.totalonly = message.totalonly;
    }
    if (message.privacy !== undefined && message.privacy !== 0) {
      obj.privacy = Math.round(message.privacy);
    }
    if (message.idsOnly !== undefined && message.idsOnly !== false) {
      obj.idsOnly = message.idsOnly;
    }
    if (message.requiredtags?.length) {
      obj.requiredtags = message.requiredtags;
    }
    if (message.excludedtags?.length) {
      obj.excludedtags = message.excludedtags;
    }
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileGetUserFilesRequest>): CPublishedFileGetUserFilesRequest {
    return CPublishedFileGetUserFilesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPublishedFileGetUserFilesRequest>): CPublishedFileGetUserFilesRequest {
    const message = createBaseCPublishedFileGetUserFilesRequest();
    message.appid = object.appid ?? 0;
    message.page = object.page ?? 1;
    message.numperpage = object.numperpage ?? 1;
    message.sortmethod = object.sortmethod ?? "lastupdated";
    message.totalonly = object.totalonly ?? false;
    message.privacy = object.privacy ?? 0;
    message.idsOnly = object.idsOnly ?? false;
    message.requiredtags = object.requiredtags?.map((e) => e) || [];
    message.excludedtags = object.excludedtags?.map((e) => e) || [];
    return message;
  },
};

function createBaseCPublishedFileGetUserFilesResponse(): CPublishedFileGetUserFilesResponse {
  return { total: 0, startindex: 0, publishedfiledetails: [], apps: [] };
}

export const CPublishedFileGetUserFilesResponse = {
  encode(message: CPublishedFileGetUserFilesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.total !== undefined && message.total !== 0) {
      writer.uint32(8).uint32(message.total);
    }
    if (message.startindex !== undefined && message.startindex !== 0) {
      writer.uint32(16).uint32(message.startindex);
    }
    for (const v of message.publishedfiledetails) {
      PublishedFileDetails.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.apps) {
      CPublishedFileGetUserFilesResponse_App.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileGetUserFilesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileGetUserFilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.total = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.startindex = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.publishedfiledetails.push(PublishedFileDetails.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.apps.push(CPublishedFileGetUserFilesResponse_App.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPublishedFileGetUserFilesResponse {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      startindex: isSet(object.startindex) ? globalThis.Number(object.startindex) : 0,
      publishedfiledetails: globalThis.Array.isArray(object?.publishedfiledetails)
        ? object.publishedfiledetails.map((e: any) => PublishedFileDetails.fromJSON(e))
        : [],
      apps: globalThis.Array.isArray(object?.apps)
        ? object.apps.map((e: any) => CPublishedFileGetUserFilesResponse_App.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CPublishedFileGetUserFilesResponse): unknown {
    const obj: any = {};
    if (message.total !== undefined && message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.startindex !== undefined && message.startindex !== 0) {
      obj.startindex = Math.round(message.startindex);
    }
    if (message.publishedfiledetails?.length) {
      obj.publishedfiledetails = message.publishedfiledetails.map((e) => PublishedFileDetails.toJSON(e));
    }
    if (message.apps?.length) {
      obj.apps = message.apps.map((e) => CPublishedFileGetUserFilesResponse_App.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileGetUserFilesResponse>): CPublishedFileGetUserFilesResponse {
    return CPublishedFileGetUserFilesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPublishedFileGetUserFilesResponse>): CPublishedFileGetUserFilesResponse {
    const message = createBaseCPublishedFileGetUserFilesResponse();
    message.total = object.total ?? 0;
    message.startindex = object.startindex ?? 0;
    message.publishedfiledetails = object.publishedfiledetails?.map((e) => PublishedFileDetails.fromPartial(e)) || [];
    message.apps = object.apps?.map((e) => CPublishedFileGetUserFilesResponse_App.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCPublishedFileGetUserFilesResponse_App(): CPublishedFileGetUserFilesResponse_App {
  return { appid: 0, name: "", shortcutid: 0, private: false };
}

export const CPublishedFileGetUserFilesResponse_App = {
  encode(message: CPublishedFileGetUserFilesResponse_App, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appid !== undefined && message.appid !== 0) {
      writer.uint32(8).uint32(message.appid);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.shortcutid !== undefined && message.shortcutid !== 0) {
      writer.uint32(24).uint32(message.shortcutid);
    }
    if (message.private !== undefined && message.private !== false) {
      writer.uint32(32).bool(message.private);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileGetUserFilesResponse_App {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileGetUserFilesResponse_App();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.appid = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.shortcutid = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.private = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPublishedFileGetUserFilesResponse_App {
    return {
      appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      shortcutid: isSet(object.shortcutid) ? globalThis.Number(object.shortcutid) : 0,
      private: isSet(object.private) ? globalThis.Boolean(object.private) : false,
    };
  },

  toJSON(message: CPublishedFileGetUserFilesResponse_App): unknown {
    const obj: any = {};
    if (message.appid !== undefined && message.appid !== 0) {
      obj.appid = Math.round(message.appid);
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    if (message.shortcutid !== undefined && message.shortcutid !== 0) {
      obj.shortcutid = Math.round(message.shortcutid);
    }
    if (message.private !== undefined && message.private !== false) {
      obj.private = message.private;
    }
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileGetUserFilesResponse_App>): CPublishedFileGetUserFilesResponse_App {
    return CPublishedFileGetUserFilesResponse_App.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPublishedFileGetUserFilesResponse_App>): CPublishedFileGetUserFilesResponse_App {
    const message = createBaseCPublishedFileGetUserFilesResponse_App();
    message.appid = object.appid ?? 0;
    message.name = object.name ?? "";
    message.shortcutid = object.shortcutid ?? 0;
    message.private = object.private ?? false;
    return message;
  },
};

function createBaseCPublishedFileUpdateRequest(): CPublishedFileUpdateRequest {
  return {
    appid: 0,
    publishedfileid: "0",
    title: "",
    fileDescription: "",
    visibility: 0,
    tags: [],
    filename: "",
    previewFilename: "",
  };
}

export const CPublishedFileUpdateRequest = {
  encode(message: CPublishedFileUpdateRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appid !== undefined && message.appid !== 0) {
      writer.uint32(8).uint32(message.appid);
    }
    if (message.publishedfileid !== undefined && message.publishedfileid !== "0") {
      writer.uint32(17).fixed64(message.publishedfileid);
    }
    if (message.title !== undefined && message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.fileDescription !== undefined && message.fileDescription !== "") {
      writer.uint32(34).string(message.fileDescription);
    }
    if (message.visibility !== undefined && message.visibility !== 0) {
      writer.uint32(40).uint32(message.visibility);
    }
    for (const v of message.tags) {
      writer.uint32(50).string(v!);
    }
    if (message.filename !== undefined && message.filename !== "") {
      writer.uint32(58).string(message.filename);
    }
    if (message.previewFilename !== undefined && message.previewFilename !== "") {
      writer.uint32(66).string(message.previewFilename);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileUpdateRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.appid = reader.uint32();
          continue;
        case 2:
          if (tag !== 17) {
            break;
          }

          message.publishedfileid = longToString(reader.fixed64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.fileDescription = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.visibility = reader.uint32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.filename = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.previewFilename = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPublishedFileUpdateRequest {
    return {
      appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
      publishedfileid: isSet(object.publishedfileid) ? globalThis.String(object.publishedfileid) : "0",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      fileDescription: isSet(object.fileDescription) ? globalThis.String(object.fileDescription) : "",
      visibility: isSet(object.visibility) ? globalThis.Number(object.visibility) : 0,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      previewFilename: isSet(object.previewFilename) ? globalThis.String(object.previewFilename) : "",
    };
  },

  toJSON(message: CPublishedFileUpdateRequest): unknown {
    const obj: any = {};
    if (message.appid !== undefined && message.appid !== 0) {
      obj.appid = Math.round(message.appid);
    }
    if (message.publishedfileid !== undefined && message.publishedfileid !== "0") {
      obj.publishedfileid = message.publishedfileid;
    }
    if (message.title !== undefined && message.title !== "") {
      obj.title = message.title;
    }
    if (message.fileDescription !== undefined && message.fileDescription !== "") {
      obj.fileDescription = message.fileDescription;
    }
    if (message.visibility !== undefined && message.visibility !== 0) {
      obj.visibility = Math.round(message.visibility);
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.filename !== undefined && message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.previewFilename !== undefined && message.previewFilename !== "") {
      obj.previewFilename = message.previewFilename;
    }
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileUpdateRequest>): CPublishedFileUpdateRequest {
    return CPublishedFileUpdateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPublishedFileUpdateRequest>): CPublishedFileUpdateRequest {
    const message = createBaseCPublishedFileUpdateRequest();
    message.appid = object.appid ?? 0;
    message.publishedfileid = object.publishedfileid ?? "0";
    message.title = object.title ?? "";
    message.fileDescription = object.fileDescription ?? "";
    message.visibility = object.visibility ?? 0;
    message.tags = object.tags?.map((e) => e) || [];
    message.filename = object.filename ?? "";
    message.previewFilename = object.previewFilename ?? "";
    return message;
  },
};

function createBaseCPublishedFileUpdateResponse(): CPublishedFileUpdateResponse {
  return {};
}

export const CPublishedFileUpdateResponse = {
  encode(_: CPublishedFileUpdateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileUpdateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileUpdateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CPublishedFileUpdateResponse {
    return {};
  },

  toJSON(_: CPublishedFileUpdateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileUpdateResponse>): CPublishedFileUpdateResponse {
    return CPublishedFileUpdateResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CPublishedFileUpdateResponse>): CPublishedFileUpdateResponse {
    const message = createBaseCPublishedFileUpdateResponse();
    return message;
  },
};

function createBaseCPublishedFileRefreshVotingQueueRequest(): CPublishedFileRefreshVotingQueueRequest {
  return { appid: 0, matchingFileType: 0, tags: [], matchAllTags: true, excludedTags: [], desiredQueueSize: 0 };
}

export const CPublishedFileRefreshVotingQueueRequest = {
  encode(message: CPublishedFileRefreshVotingQueueRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appid !== undefined && message.appid !== 0) {
      writer.uint32(8).uint32(message.appid);
    }
    if (message.matchingFileType !== undefined && message.matchingFileType !== 0) {
      writer.uint32(16).uint32(message.matchingFileType);
    }
    for (const v of message.tags) {
      writer.uint32(26).string(v!);
    }
    if (message.matchAllTags !== undefined && message.matchAllTags !== true) {
      writer.uint32(32).bool(message.matchAllTags);
    }
    for (const v of message.excludedTags) {
      writer.uint32(42).string(v!);
    }
    if (message.desiredQueueSize !== undefined && message.desiredQueueSize !== 0) {
      writer.uint32(48).uint32(message.desiredQueueSize);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileRefreshVotingQueueRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileRefreshVotingQueueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.appid = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.matchingFileType = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.matchAllTags = reader.bool();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.excludedTags.push(reader.string());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.desiredQueueSize = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPublishedFileRefreshVotingQueueRequest {
    return {
      appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
      matchingFileType: isSet(object.matchingFileType) ? globalThis.Number(object.matchingFileType) : 0,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      matchAllTags: isSet(object.matchAllTags) ? globalThis.Boolean(object.matchAllTags) : true,
      excludedTags: globalThis.Array.isArray(object?.excludedTags)
        ? object.excludedTags.map((e: any) => globalThis.String(e))
        : [],
      desiredQueueSize: isSet(object.desiredQueueSize) ? globalThis.Number(object.desiredQueueSize) : 0,
    };
  },

  toJSON(message: CPublishedFileRefreshVotingQueueRequest): unknown {
    const obj: any = {};
    if (message.appid !== undefined && message.appid !== 0) {
      obj.appid = Math.round(message.appid);
    }
    if (message.matchingFileType !== undefined && message.matchingFileType !== 0) {
      obj.matchingFileType = Math.round(message.matchingFileType);
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.matchAllTags !== undefined && message.matchAllTags !== true) {
      obj.matchAllTags = message.matchAllTags;
    }
    if (message.excludedTags?.length) {
      obj.excludedTags = message.excludedTags;
    }
    if (message.desiredQueueSize !== undefined && message.desiredQueueSize !== 0) {
      obj.desiredQueueSize = Math.round(message.desiredQueueSize);
    }
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileRefreshVotingQueueRequest>): CPublishedFileRefreshVotingQueueRequest {
    return CPublishedFileRefreshVotingQueueRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPublishedFileRefreshVotingQueueRequest>): CPublishedFileRefreshVotingQueueRequest {
    const message = createBaseCPublishedFileRefreshVotingQueueRequest();
    message.appid = object.appid ?? 0;
    message.matchingFileType = object.matchingFileType ?? 0;
    message.tags = object.tags?.map((e) => e) || [];
    message.matchAllTags = object.matchAllTags ?? true;
    message.excludedTags = object.excludedTags?.map((e) => e) || [];
    message.desiredQueueSize = object.desiredQueueSize ?? 0;
    return message;
  },
};

function createBaseCPublishedFileRefreshVotingQueueResponse(): CPublishedFileRefreshVotingQueueResponse {
  return {};
}

export const CPublishedFileRefreshVotingQueueResponse = {
  encode(_: CPublishedFileRefreshVotingQueueResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPublishedFileRefreshVotingQueueResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPublishedFileRefreshVotingQueueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CPublishedFileRefreshVotingQueueResponse {
    return {};
  },

  toJSON(_: CPublishedFileRefreshVotingQueueResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CPublishedFileRefreshVotingQueueResponse>): CPublishedFileRefreshVotingQueueResponse {
    return CPublishedFileRefreshVotingQueueResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CPublishedFileRefreshVotingQueueResponse>): CPublishedFileRefreshVotingQueueResponse {
    const message = createBaseCPublishedFileRefreshVotingQueueResponse();
    return message;
  },
};

export interface PublishedFile {
  Subscribe(request: CPublishedFileSubscribeRequest): Promise<CPublishedFileSubscribeResponse>;
  Unsubscribe(request: CPublishedFileUnsubscribeRequest): Promise<CPublishedFileUnsubscribeResponse>;
  Publish(request: CPublishedFilePublishRequest): Promise<CPublishedFilePublishResponse>;
  GetDetails(request: CPublishedFileGetDetailsRequest): Promise<CPublishedFileGetDetailsResponse>;
  GetUserFiles(request: CPublishedFileGetUserFilesRequest): Promise<CPublishedFileGetUserFilesResponse>;
  Update(request: CPublishedFileUpdateRequest): Promise<CPublishedFileUpdateResponse>;
  RefreshVotingQueue(
    request: CPublishedFileRefreshVotingQueueRequest,
  ): Promise<CPublishedFileRefreshVotingQueueResponse>;
}

export const PublishedFileServiceName = "PublishedFile";
export class PublishedFileClientImpl implements PublishedFile {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PublishedFileServiceName;
    this.rpc = rpc;
    this.Subscribe = this.Subscribe.bind(this);
    this.Unsubscribe = this.Unsubscribe.bind(this);
    this.Publish = this.Publish.bind(this);
    this.GetDetails = this.GetDetails.bind(this);
    this.GetUserFiles = this.GetUserFiles.bind(this);
    this.Update = this.Update.bind(this);
    this.RefreshVotingQueue = this.RefreshVotingQueue.bind(this);
  }
  Subscribe(request: CPublishedFileSubscribeRequest): Promise<CPublishedFileSubscribeResponse> {
    const data = CPublishedFileSubscribeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Subscribe", data);
    return promise.then((data) => CPublishedFileSubscribeResponse.decode(_m0.Reader.create(data)));
  }

  Unsubscribe(request: CPublishedFileUnsubscribeRequest): Promise<CPublishedFileUnsubscribeResponse> {
    const data = CPublishedFileUnsubscribeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Unsubscribe", data);
    return promise.then((data) => CPublishedFileUnsubscribeResponse.decode(_m0.Reader.create(data)));
  }

  Publish(request: CPublishedFilePublishRequest): Promise<CPublishedFilePublishResponse> {
    const data = CPublishedFilePublishRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Publish", data);
    return promise.then((data) => CPublishedFilePublishResponse.decode(_m0.Reader.create(data)));
  }

  GetDetails(request: CPublishedFileGetDetailsRequest): Promise<CPublishedFileGetDetailsResponse> {
    const data = CPublishedFileGetDetailsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetDetails", data);
    return promise.then((data) => CPublishedFileGetDetailsResponse.decode(_m0.Reader.create(data)));
  }

  GetUserFiles(request: CPublishedFileGetUserFilesRequest): Promise<CPublishedFileGetUserFilesResponse> {
    const data = CPublishedFileGetUserFilesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUserFiles", data);
    return promise.then((data) => CPublishedFileGetUserFilesResponse.decode(_m0.Reader.create(data)));
  }

  Update(request: CPublishedFileUpdateRequest): Promise<CPublishedFileUpdateResponse> {
    const data = CPublishedFileUpdateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Update", data);
    return promise.then((data) => CPublishedFileUpdateResponse.decode(_m0.Reader.create(data)));
  }

  RefreshVotingQueue(
    request: CPublishedFileRefreshVotingQueueRequest,
  ): Promise<CPublishedFileRefreshVotingQueueResponse> {
    const data = CPublishedFileRefreshVotingQueueRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RefreshVotingQueue", data);
    return promise.then((data) => CPublishedFileRefreshVotingQueueResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: uifontfile_format.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";

export interface CUIFontFilePB {
  fontFileName?: string | undefined;
  opentypeFontData?: Buffer | undefined;
}

export interface CUIFontFilePackagePB {
  packageVersion: number;
  encryptedFontFiles: CUIFontFilePackagePB_CUIEncryptedFontFilePB[];
}

export interface CUIFontFilePackagePB_CUIEncryptedFontFilePB {
  encryptedContents?: Buffer | undefined;
}

function createBaseCUIFontFilePB(): CUIFontFilePB {
  return { fontFileName: "", opentypeFontData: Buffer.alloc(0) };
}

export const CUIFontFilePB = {
  encode(message: CUIFontFilePB, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fontFileName !== undefined && message.fontFileName !== "") {
      writer.uint32(10).string(message.fontFileName);
    }
    if (message.opentypeFontData !== undefined && message.opentypeFontData.length !== 0) {
      writer.uint32(18).bytes(message.opentypeFontData);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CUIFontFilePB {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCUIFontFilePB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fontFileName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.opentypeFontData = reader.bytes() as Buffer;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CUIFontFilePB {
    return {
      fontFileName: isSet(object.fontFileName) ? globalThis.String(object.fontFileName) : "",
      opentypeFontData: isSet(object.opentypeFontData)
        ? Buffer.from(bytesFromBase64(object.opentypeFontData))
        : Buffer.alloc(0),
    };
  },

  toJSON(message: CUIFontFilePB): unknown {
    const obj: any = {};
    if (message.fontFileName !== undefined && message.fontFileName !== "") {
      obj.fontFileName = message.fontFileName;
    }
    if (message.opentypeFontData !== undefined && message.opentypeFontData.length !== 0) {
      obj.opentypeFontData = base64FromBytes(message.opentypeFontData);
    }
    return obj;
  },

  create(base?: DeepPartial<CUIFontFilePB>): CUIFontFilePB {
    return CUIFontFilePB.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CUIFontFilePB>): CUIFontFilePB {
    const message = createBaseCUIFontFilePB();
    message.fontFileName = object.fontFileName ?? "";
    message.opentypeFontData = object.opentypeFontData ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseCUIFontFilePackagePB(): CUIFontFilePackagePB {
  return { packageVersion: 0, encryptedFontFiles: [] };
}

export const CUIFontFilePackagePB = {
  encode(message: CUIFontFilePackagePB, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.packageVersion !== 0) {
      writer.uint32(8).uint32(message.packageVersion);
    }
    for (const v of message.encryptedFontFiles) {
      CUIFontFilePackagePB_CUIEncryptedFontFilePB.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CUIFontFilePackagePB {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCUIFontFilePackagePB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.packageVersion = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.encryptedFontFiles.push(CUIFontFilePackagePB_CUIEncryptedFontFilePB.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CUIFontFilePackagePB {
    return {
      packageVersion: isSet(object.packageVersion) ? globalThis.Number(object.packageVersion) : 0,
      encryptedFontFiles: globalThis.Array.isArray(object?.encryptedFontFiles)
        ? object.encryptedFontFiles.map((e: any) => CUIFontFilePackagePB_CUIEncryptedFontFilePB.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CUIFontFilePackagePB): unknown {
    const obj: any = {};
    if (message.packageVersion !== 0) {
      obj.packageVersion = Math.round(message.packageVersion);
    }
    if (message.encryptedFontFiles?.length) {
      obj.encryptedFontFiles = message.encryptedFontFiles.map((e) =>
        CUIFontFilePackagePB_CUIEncryptedFontFilePB.toJSON(e)
      );
    }
    return obj;
  },

  create(base?: DeepPartial<CUIFontFilePackagePB>): CUIFontFilePackagePB {
    return CUIFontFilePackagePB.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CUIFontFilePackagePB>): CUIFontFilePackagePB {
    const message = createBaseCUIFontFilePackagePB();
    message.packageVersion = object.packageVersion ?? 0;
    message.encryptedFontFiles =
      object.encryptedFontFiles?.map((e) => CUIFontFilePackagePB_CUIEncryptedFontFilePB.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCUIFontFilePackagePB_CUIEncryptedFontFilePB(): CUIFontFilePackagePB_CUIEncryptedFontFilePB {
  return { encryptedContents: Buffer.alloc(0) };
}

export const CUIFontFilePackagePB_CUIEncryptedFontFilePB = {
  encode(message: CUIFontFilePackagePB_CUIEncryptedFontFilePB, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.encryptedContents !== undefined && message.encryptedContents.length !== 0) {
      writer.uint32(10).bytes(message.encryptedContents);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CUIFontFilePackagePB_CUIEncryptedFontFilePB {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCUIFontFilePackagePB_CUIEncryptedFontFilePB();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.encryptedContents = reader.bytes() as Buffer;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CUIFontFilePackagePB_CUIEncryptedFontFilePB {
    return {
      encryptedContents: isSet(object.encryptedContents)
        ? Buffer.from(bytesFromBase64(object.encryptedContents))
        : Buffer.alloc(0),
    };
  },

  toJSON(message: CUIFontFilePackagePB_CUIEncryptedFontFilePB): unknown {
    const obj: any = {};
    if (message.encryptedContents !== undefined && message.encryptedContents.length !== 0) {
      obj.encryptedContents = base64FromBytes(message.encryptedContents);
    }
    return obj;
  },

  create(base?: DeepPartial<CUIFontFilePackagePB_CUIEncryptedFontFilePB>): CUIFontFilePackagePB_CUIEncryptedFontFilePB {
    return CUIFontFilePackagePB_CUIEncryptedFontFilePB.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CUIFontFilePackagePB_CUIEncryptedFontFilePB>,
  ): CUIFontFilePackagePB_CUIEncryptedFontFilePB {
    const message = createBaseCUIFontFilePackagePB_CUIEncryptedFontFilePB();
    message.encryptedContents = object.encryptedContents ?? Buffer.alloc(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: dota_modifiers.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { CMsgVector } from "./networkbasetypes";

export enum dotaModifierEntryType {
  DOTA_MODIFIER_ENTRY_TYPE_ACTIVE = 1,
  DOTA_MODIFIER_ENTRY_TYPE_REMOVED = 2,
}

export function dotaModifierEntryTypeFromJSON(object: any): dotaModifierEntryType {
  switch (object) {
    case 1:
    case "DOTA_MODIFIER_ENTRY_TYPE_ACTIVE":
      return dotaModifierEntryType.DOTA_MODIFIER_ENTRY_TYPE_ACTIVE;
    case 2:
    case "DOTA_MODIFIER_ENTRY_TYPE_REMOVED":
      return dotaModifierEntryType.DOTA_MODIFIER_ENTRY_TYPE_REMOVED;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum dotaModifierEntryType");
  }
}

export function dotaModifierEntryTypeToJSON(object: dotaModifierEntryType): string {
  switch (object) {
    case dotaModifierEntryType.DOTA_MODIFIER_ENTRY_TYPE_ACTIVE:
      return "DOTA_MODIFIER_ENTRY_TYPE_ACTIVE";
    case dotaModifierEntryType.DOTA_MODIFIER_ENTRY_TYPE_REMOVED:
      return "DOTA_MODIFIER_ENTRY_TYPE_REMOVED";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum dotaModifierEntryType");
  }
}

export interface CDOTAModifierBuffTableEntry {
  entryType: dotaModifierEntryType;
  parent: number;
  index: number;
  serialNum: number;
  modifierClass?: number | undefined;
  abilityLevel?: number | undefined;
  stackCount?: number | undefined;
  creationTime?: number | undefined;
  duration?: number | undefined;
  caster?: number | undefined;
  ability?: number | undefined;
  armor?: number | undefined;
  fadeTime?: number | undefined;
  subtle?: boolean | undefined;
  channelTime?: number | undefined;
  vStart?: CMsgVector | undefined;
  vEnd?: CMsgVector | undefined;
  portalLoopAppear?: string | undefined;
  portalLoopDisappear?: string | undefined;
  heroLoopAppear?: string | undefined;
  heroLoopDisappear?: string | undefined;
  movementSpeed?: number | undefined;
  aura?: boolean | undefined;
  activity?: number | undefined;
  damage?: number | undefined;
  range?: number | undefined;
  ddModifierIndex?: number | undefined;
  ddAbilityId?: number | undefined;
  illusionLabel?: string | undefined;
  active?: boolean | undefined;
  playerIds?: string | undefined;
  luaName?: string | undefined;
  attackSpeed?: number | undefined;
  auraOwner?: number | undefined;
  bonusAllStats?: number | undefined;
  bonusHealth?: number | undefined;
  bonusMana?: number | undefined;
  customEntity?: number | undefined;
  auraWithinRange?: boolean | undefined;
}

export interface CDOTALuaModifierEntry {
  modifierType: number;
  modifierFilename: string;
}

function createBaseCDOTAModifierBuffTableEntry(): CDOTAModifierBuffTableEntry {
  return {
    entryType: 1,
    parent: 16777215,
    index: 0,
    serialNum: 0,
    modifierClass: 0,
    abilityLevel: 0,
    stackCount: 0,
    creationTime: 0,
    duration: -1,
    caster: 16777215,
    ability: 16777215,
    armor: 0,
    fadeTime: 0,
    subtle: false,
    channelTime: 0,
    vStart: undefined,
    vEnd: undefined,
    portalLoopAppear: "",
    portalLoopDisappear: "",
    heroLoopAppear: "",
    heroLoopDisappear: "",
    movementSpeed: 0,
    aura: false,
    activity: 0,
    damage: 0,
    range: 0,
    ddModifierIndex: 0,
    ddAbilityId: -1,
    illusionLabel: "",
    active: false,
    playerIds: "",
    luaName: "",
    attackSpeed: 0,
    auraOwner: 16777215,
    bonusAllStats: 0,
    bonusHealth: 0,
    bonusMana: 0,
    customEntity: 16777215,
    auraWithinRange: false,
  };
}

export const CDOTAModifierBuffTableEntry = {
  encode(message: CDOTAModifierBuffTableEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.entryType !== 1) {
      writer.uint32(8).int32(message.entryType);
    }
    if (message.parent !== 16777215) {
      writer.uint32(16).uint32(message.parent);
    }
    if (message.index !== 0) {
      writer.uint32(24).int32(message.index);
    }
    if (message.serialNum !== 0) {
      writer.uint32(32).int32(message.serialNum);
    }
    if (message.modifierClass !== undefined && message.modifierClass !== 0) {
      writer.uint32(40).int32(message.modifierClass);
    }
    if (message.abilityLevel !== undefined && message.abilityLevel !== 0) {
      writer.uint32(48).int32(message.abilityLevel);
    }
    if (message.stackCount !== undefined && message.stackCount !== 0) {
      writer.uint32(56).int32(message.stackCount);
    }
    if (message.creationTime !== undefined && message.creationTime !== 0) {
      writer.uint32(69).float(message.creationTime);
    }
    if (message.duration !== undefined && message.duration !== -1) {
      writer.uint32(77).float(message.duration);
    }
    if (message.caster !== undefined && message.caster !== 16777215) {
      writer.uint32(80).uint32(message.caster);
    }
    if (message.ability !== undefined && message.ability !== 16777215) {
      writer.uint32(88).uint32(message.ability);
    }
    if (message.armor !== undefined && message.armor !== 0) {
      writer.uint32(96).int32(message.armor);
    }
    if (message.fadeTime !== undefined && message.fadeTime !== 0) {
      writer.uint32(109).float(message.fadeTime);
    }
    if (message.subtle !== undefined && message.subtle !== false) {
      writer.uint32(112).bool(message.subtle);
    }
    if (message.channelTime !== undefined && message.channelTime !== 0) {
      writer.uint32(125).float(message.channelTime);
    }
    if (message.vStart !== undefined) {
      CMsgVector.encode(message.vStart, writer.uint32(130).fork()).ldelim();
    }
    if (message.vEnd !== undefined) {
      CMsgVector.encode(message.vEnd, writer.uint32(138).fork()).ldelim();
    }
    if (message.portalLoopAppear !== undefined && message.portalLoopAppear !== "") {
      writer.uint32(146).string(message.portalLoopAppear);
    }
    if (message.portalLoopDisappear !== undefined && message.portalLoopDisappear !== "") {
      writer.uint32(154).string(message.portalLoopDisappear);
    }
    if (message.heroLoopAppear !== undefined && message.heroLoopAppear !== "") {
      writer.uint32(162).string(message.heroLoopAppear);
    }
    if (message.heroLoopDisappear !== undefined && message.heroLoopDisappear !== "") {
      writer.uint32(170).string(message.heroLoopDisappear);
    }
    if (message.movementSpeed !== undefined && message.movementSpeed !== 0) {
      writer.uint32(176).int32(message.movementSpeed);
    }
    if (message.aura !== undefined && message.aura !== false) {
      writer.uint32(184).bool(message.aura);
    }
    if (message.activity !== undefined && message.activity !== 0) {
      writer.uint32(192).int32(message.activity);
    }
    if (message.damage !== undefined && message.damage !== 0) {
      writer.uint32(200).int32(message.damage);
    }
    if (message.range !== undefined && message.range !== 0) {
      writer.uint32(208).int32(message.range);
    }
    if (message.ddModifierIndex !== undefined && message.ddModifierIndex !== 0) {
      writer.uint32(216).int32(message.ddModifierIndex);
    }
    if (message.ddAbilityId !== undefined && message.ddAbilityId !== -1) {
      writer.uint32(224).int32(message.ddAbilityId);
    }
    if (message.illusionLabel !== undefined && message.illusionLabel !== "") {
      writer.uint32(234).string(message.illusionLabel);
    }
    if (message.active !== undefined && message.active !== false) {
      writer.uint32(240).bool(message.active);
    }
    if (message.playerIds !== undefined && message.playerIds !== "") {
      writer.uint32(250).string(message.playerIds);
    }
    if (message.luaName !== undefined && message.luaName !== "") {
      writer.uint32(258).string(message.luaName);
    }
    if (message.attackSpeed !== undefined && message.attackSpeed !== 0) {
      writer.uint32(264).int32(message.attackSpeed);
    }
    if (message.auraOwner !== undefined && message.auraOwner !== 16777215) {
      writer.uint32(272).uint32(message.auraOwner);
    }
    if (message.bonusAllStats !== undefined && message.bonusAllStats !== 0) {
      writer.uint32(280).int32(message.bonusAllStats);
    }
    if (message.bonusHealth !== undefined && message.bonusHealth !== 0) {
      writer.uint32(288).int32(message.bonusHealth);
    }
    if (message.bonusMana !== undefined && message.bonusMana !== 0) {
      writer.uint32(296).int32(message.bonusMana);
    }
    if (message.customEntity !== undefined && message.customEntity !== 16777215) {
      writer.uint32(304).uint32(message.customEntity);
    }
    if (message.auraWithinRange !== undefined && message.auraWithinRange !== false) {
      writer.uint32(312).bool(message.auraWithinRange);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CDOTAModifierBuffTableEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCDOTAModifierBuffTableEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.entryType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.parent = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.index = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.serialNum = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.modifierClass = reader.int32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.abilityLevel = reader.int32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.stackCount = reader.int32();
          continue;
        case 8:
          if (tag !== 69) {
            break;
          }

          message.creationTime = reader.float();
          continue;
        case 9:
          if (tag !== 77) {
            break;
          }

          message.duration = reader.float();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.caster = reader.uint32();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.ability = reader.uint32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.armor = reader.int32();
          continue;
        case 13:
          if (tag !== 109) {
            break;
          }

          message.fadeTime = reader.float();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.subtle = reader.bool();
          continue;
        case 15:
          if (tag !== 125) {
            break;
          }

          message.channelTime = reader.float();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.vStart = CMsgVector.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.vEnd = CMsgVector.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.portalLoopAppear = reader.string();
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.portalLoopDisappear = reader.string();
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.heroLoopAppear = reader.string();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.heroLoopDisappear = reader.string();
          continue;
        case 22:
          if (tag !== 176) {
            break;
          }

          message.movementSpeed = reader.int32();
          continue;
        case 23:
          if (tag !== 184) {
            break;
          }

          message.aura = reader.bool();
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.activity = reader.int32();
          continue;
        case 25:
          if (tag !== 200) {
            break;
          }

          message.damage = reader.int32();
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.range = reader.int32();
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }

          message.ddModifierIndex = reader.int32();
          continue;
        case 28:
          if (tag !== 224) {
            break;
          }

          message.ddAbilityId = reader.int32();
          continue;
        case 29:
          if (tag !== 234) {
            break;
          }

          message.illusionLabel = reader.string();
          continue;
        case 30:
          if (tag !== 240) {
            break;
          }

          message.active = reader.bool();
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.playerIds = reader.string();
          continue;
        case 32:
          if (tag !== 258) {
            break;
          }

          message.luaName = reader.string();
          continue;
        case 33:
          if (tag !== 264) {
            break;
          }

          message.attackSpeed = reader.int32();
          continue;
        case 34:
          if (tag !== 272) {
            break;
          }

          message.auraOwner = reader.uint32();
          continue;
        case 35:
          if (tag !== 280) {
            break;
          }

          message.bonusAllStats = reader.int32();
          continue;
        case 36:
          if (tag !== 288) {
            break;
          }

          message.bonusHealth = reader.int32();
          continue;
        case 37:
          if (tag !== 296) {
            break;
          }

          message.bonusMana = reader.int32();
          continue;
        case 38:
          if (tag !== 304) {
            break;
          }

          message.customEntity = reader.uint32();
          continue;
        case 39:
          if (tag !== 312) {
            break;
          }

          message.auraWithinRange = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CDOTAModifierBuffTableEntry {
    return {
      entryType: isSet(object.entryType) ? dotaModifierEntryTypeFromJSON(object.entryType) : 1,
      parent: isSet(object.parent) ? globalThis.Number(object.parent) : 16777215,
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      serialNum: isSet(object.serialNum) ? globalThis.Number(object.serialNum) : 0,
      modifierClass: isSet(object.modifierClass) ? globalThis.Number(object.modifierClass) : 0,
      abilityLevel: isSet(object.abilityLevel) ? globalThis.Number(object.abilityLevel) : 0,
      stackCount: isSet(object.stackCount) ? globalThis.Number(object.stackCount) : 0,
      creationTime: isSet(object.creationTime) ? globalThis.Number(object.creationTime) : 0,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : -1,
      caster: isSet(object.caster) ? globalThis.Number(object.caster) : 16777215,
      ability: isSet(object.ability) ? globalThis.Number(object.ability) : 16777215,
      armor: isSet(object.armor) ? globalThis.Number(object.armor) : 0,
      fadeTime: isSet(object.fadeTime) ? globalThis.Number(object.fadeTime) : 0,
      subtle: isSet(object.subtle) ? globalThis.Boolean(object.subtle) : false,
      channelTime: isSet(object.channelTime) ? globalThis.Number(object.channelTime) : 0,
      vStart: isSet(object.vStart) ? CMsgVector.fromJSON(object.vStart) : undefined,
      vEnd: isSet(object.vEnd) ? CMsgVector.fromJSON(object.vEnd) : undefined,
      portalLoopAppear: isSet(object.portalLoopAppear) ? globalThis.String(object.portalLoopAppear) : "",
      portalLoopDisappear: isSet(object.portalLoopDisappear) ? globalThis.String(object.portalLoopDisappear) : "",
      heroLoopAppear: isSet(object.heroLoopAppear) ? globalThis.String(object.heroLoopAppear) : "",
      heroLoopDisappear: isSet(object.heroLoopDisappear) ? globalThis.String(object.heroLoopDisappear) : "",
      movementSpeed: isSet(object.movementSpeed) ? globalThis.Number(object.movementSpeed) : 0,
      aura: isSet(object.aura) ? globalThis.Boolean(object.aura) : false,
      activity: isSet(object.activity) ? globalThis.Number(object.activity) : 0,
      damage: isSet(object.damage) ? globalThis.Number(object.damage) : 0,
      range: isSet(object.range) ? globalThis.Number(object.range) : 0,
      ddModifierIndex: isSet(object.ddModifierIndex) ? globalThis.Number(object.ddModifierIndex) : 0,
      ddAbilityId: isSet(object.ddAbilityId) ? globalThis.Number(object.ddAbilityId) : -1,
      illusionLabel: isSet(object.illusionLabel) ? globalThis.String(object.illusionLabel) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
      playerIds: isSet(object.playerIds) ? globalThis.String(object.playerIds) : "",
      luaName: isSet(object.luaName) ? globalThis.String(object.luaName) : "",
      attackSpeed: isSet(object.attackSpeed) ? globalThis.Number(object.attackSpeed) : 0,
      auraOwner: isSet(object.auraOwner) ? globalThis.Number(object.auraOwner) : 16777215,
      bonusAllStats: isSet(object.bonusAllStats) ? globalThis.Number(object.bonusAllStats) : 0,
      bonusHealth: isSet(object.bonusHealth) ? globalThis.Number(object.bonusHealth) : 0,
      bonusMana: isSet(object.bonusMana) ? globalThis.Number(object.bonusMana) : 0,
      customEntity: isSet(object.customEntity) ? globalThis.Number(object.customEntity) : 16777215,
      auraWithinRange: isSet(object.auraWithinRange) ? globalThis.Boolean(object.auraWithinRange) : false,
    };
  },

  toJSON(message: CDOTAModifierBuffTableEntry): unknown {
    const obj: any = {};
    if (message.entryType !== 1) {
      obj.entryType = dotaModifierEntryTypeToJSON(message.entryType);
    }
    if (message.parent !== 16777215) {
      obj.parent = Math.round(message.parent);
    }
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.serialNum !== 0) {
      obj.serialNum = Math.round(message.serialNum);
    }
    if (message.modifierClass !== undefined && message.modifierClass !== 0) {
      obj.modifierClass = Math.round(message.modifierClass);
    }
    if (message.abilityLevel !== undefined && message.abilityLevel !== 0) {
      obj.abilityLevel = Math.round(message.abilityLevel);
    }
    if (message.stackCount !== undefined && message.stackCount !== 0) {
      obj.stackCount = Math.round(message.stackCount);
    }
    if (message.creationTime !== undefined && message.creationTime !== 0) {
      obj.creationTime = message.creationTime;
    }
    if (message.duration !== undefined && message.duration !== -1) {
      obj.duration = message.duration;
    }
    if (message.caster !== undefined && message.caster !== 16777215) {
      obj.caster = Math.round(message.caster);
    }
    if (message.ability !== undefined && message.ability !== 16777215) {
      obj.ability = Math.round(message.ability);
    }
    if (message.armor !== undefined && message.armor !== 0) {
      obj.armor = Math.round(message.armor);
    }
    if (message.fadeTime !== undefined && message.fadeTime !== 0) {
      obj.fadeTime = message.fadeTime;
    }
    if (message.subtle !== undefined && message.subtle !== false) {
      obj.subtle = message.subtle;
    }
    if (message.channelTime !== undefined && message.channelTime !== 0) {
      obj.channelTime = message.channelTime;
    }
    if (message.vStart !== undefined) {
      obj.vStart = CMsgVector.toJSON(message.vStart);
    }
    if (message.vEnd !== undefined) {
      obj.vEnd = CMsgVector.toJSON(message.vEnd);
    }
    if (message.portalLoopAppear !== undefined && message.portalLoopAppear !== "") {
      obj.portalLoopAppear = message.portalLoopAppear;
    }
    if (message.portalLoopDisappear !== undefined && message.portalLoopDisappear !== "") {
      obj.portalLoopDisappear = message.portalLoopDisappear;
    }
    if (message.heroLoopAppear !== undefined && message.heroLoopAppear !== "") {
      obj.heroLoopAppear = message.heroLoopAppear;
    }
    if (message.heroLoopDisappear !== undefined && message.heroLoopDisappear !== "") {
      obj.heroLoopDisappear = message.heroLoopDisappear;
    }
    if (message.movementSpeed !== undefined && message.movementSpeed !== 0) {
      obj.movementSpeed = Math.round(message.movementSpeed);
    }
    if (message.aura !== undefined && message.aura !== false) {
      obj.aura = message.aura;
    }
    if (message.activity !== undefined && message.activity !== 0) {
      obj.activity = Math.round(message.activity);
    }
    if (message.damage !== undefined && message.damage !== 0) {
      obj.damage = Math.round(message.damage);
    }
    if (message.range !== undefined && message.range !== 0) {
      obj.range = Math.round(message.range);
    }
    if (message.ddModifierIndex !== undefined && message.ddModifierIndex !== 0) {
      obj.ddModifierIndex = Math.round(message.ddModifierIndex);
    }
    if (message.ddAbilityId !== undefined && message.ddAbilityId !== -1) {
      obj.ddAbilityId = Math.round(message.ddAbilityId);
    }
    if (message.illusionLabel !== undefined && message.illusionLabel !== "") {
      obj.illusionLabel = message.illusionLabel;
    }
    if (message.active !== undefined && message.active !== false) {
      obj.active = message.active;
    }
    if (message.playerIds !== undefined && message.playerIds !== "") {
      obj.playerIds = message.playerIds;
    }
    if (message.luaName !== undefined && message.luaName !== "") {
      obj.luaName = message.luaName;
    }
    if (message.attackSpeed !== undefined && message.attackSpeed !== 0) {
      obj.attackSpeed = Math.round(message.attackSpeed);
    }
    if (message.auraOwner !== undefined && message.auraOwner !== 16777215) {
      obj.auraOwner = Math.round(message.auraOwner);
    }
    if (message.bonusAllStats !== undefined && message.bonusAllStats !== 0) {
      obj.bonusAllStats = Math.round(message.bonusAllStats);
    }
    if (message.bonusHealth !== undefined && message.bonusHealth !== 0) {
      obj.bonusHealth = Math.round(message.bonusHealth);
    }
    if (message.bonusMana !== undefined && message.bonusMana !== 0) {
      obj.bonusMana = Math.round(message.bonusMana);
    }
    if (message.customEntity !== undefined && message.customEntity !== 16777215) {
      obj.customEntity = Math.round(message.customEntity);
    }
    if (message.auraWithinRange !== undefined && message.auraWithinRange !== false) {
      obj.auraWithinRange = message.auraWithinRange;
    }
    return obj;
  },

  create(base?: DeepPartial<CDOTAModifierBuffTableEntry>): CDOTAModifierBuffTableEntry {
    return CDOTAModifierBuffTableEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CDOTAModifierBuffTableEntry>): CDOTAModifierBuffTableEntry {
    const message = createBaseCDOTAModifierBuffTableEntry();
    message.entryType = object.entryType ?? 1;
    message.parent = object.parent ?? 16777215;
    message.index = object.index ?? 0;
    message.serialNum = object.serialNum ?? 0;
    message.modifierClass = object.modifierClass ?? 0;
    message.abilityLevel = object.abilityLevel ?? 0;
    message.stackCount = object.stackCount ?? 0;
    message.creationTime = object.creationTime ?? 0;
    message.duration = object.duration ?? -1;
    message.caster = object.caster ?? 16777215;
    message.ability = object.ability ?? 16777215;
    message.armor = object.armor ?? 0;
    message.fadeTime = object.fadeTime ?? 0;
    message.subtle = object.subtle ?? false;
    message.channelTime = object.channelTime ?? 0;
    message.vStart = (object.vStart !== undefined && object.vStart !== null)
      ? CMsgVector.fromPartial(object.vStart)
      : undefined;
    message.vEnd = (object.vEnd !== undefined && object.vEnd !== null)
      ? CMsgVector.fromPartial(object.vEnd)
      : undefined;
    message.portalLoopAppear = object.portalLoopAppear ?? "";
    message.portalLoopDisappear = object.portalLoopDisappear ?? "";
    message.heroLoopAppear = object.heroLoopAppear ?? "";
    message.heroLoopDisappear = object.heroLoopDisappear ?? "";
    message.movementSpeed = object.movementSpeed ?? 0;
    message.aura = object.aura ?? false;
    message.activity = object.activity ?? 0;
    message.damage = object.damage ?? 0;
    message.range = object.range ?? 0;
    message.ddModifierIndex = object.ddModifierIndex ?? 0;
    message.ddAbilityId = object.ddAbilityId ?? -1;
    message.illusionLabel = object.illusionLabel ?? "";
    message.active = object.active ?? false;
    message.playerIds = object.playerIds ?? "";
    message.luaName = object.luaName ?? "";
    message.attackSpeed = object.attackSpeed ?? 0;
    message.auraOwner = object.auraOwner ?? 16777215;
    message.bonusAllStats = object.bonusAllStats ?? 0;
    message.bonusHealth = object.bonusHealth ?? 0;
    message.bonusMana = object.bonusMana ?? 0;
    message.customEntity = object.customEntity ?? 16777215;
    message.auraWithinRange = object.auraWithinRange ?? false;
    return message;
  },
};

function createBaseCDOTALuaModifierEntry(): CDOTALuaModifierEntry {
  return { modifierType: 0, modifierFilename: "" };
}

export const CDOTALuaModifierEntry = {
  encode(message: CDOTALuaModifierEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.modifierType !== 0) {
      writer.uint32(8).int32(message.modifierType);
    }
    if (message.modifierFilename !== "") {
      writer.uint32(18).string(message.modifierFilename);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CDOTALuaModifierEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCDOTALuaModifierEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.modifierType = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.modifierFilename = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CDOTALuaModifierEntry {
    return {
      modifierType: isSet(object.modifierType) ? globalThis.Number(object.modifierType) : 0,
      modifierFilename: isSet(object.modifierFilename) ? globalThis.String(object.modifierFilename) : "",
    };
  },

  toJSON(message: CDOTALuaModifierEntry): unknown {
    const obj: any = {};
    if (message.modifierType !== 0) {
      obj.modifierType = Math.round(message.modifierType);
    }
    if (message.modifierFilename !== "") {
      obj.modifierFilename = message.modifierFilename;
    }
    return obj;
  },

  create(base?: DeepPartial<CDOTALuaModifierEntry>): CDOTALuaModifierEntry {
    return CDOTALuaModifierEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CDOTALuaModifierEntry>): CDOTALuaModifierEntry {
    const message = createBaseCDOTALuaModifierEntry();
    message.modifierType = object.modifierType ?? 0;
    message.modifierFilename = object.modifierFilename ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

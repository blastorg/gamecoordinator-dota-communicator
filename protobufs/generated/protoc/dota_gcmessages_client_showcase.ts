// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: dota_gcmessages_client_showcase.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { CSOEconItem } from "./base_gcmessages";
import {
  CMsgDOTAProfileCard_EStatID,
  cMsgDOTAProfileCard_EStatIDFromJSON,
  cMsgDOTAProfileCard_EStatIDToJSON,
} from "./dota_gcmessages_common";
import { DOTAGameMode, dOTAGameModeFromJSON, dOTAGameModeToJSON } from "./dota_shared_enums";

export enum EShowcaseHeroPlusFlag {
  k_eShowcaseHeroPlusFlag_None = 0,
  k_eShowcaseHeroPlusFlag_BadgePosTop = 1,
  k_eShowcaseHeroPlusFlag_BadgePosBottom = 2,
  k_eShowcaseHeroPlusFlag_BadgePosLeft = 4,
  k_eShowcaseHeroPlusFlag_BadgePosRight = 8,
  k_eShowcaseHeroPlusFlag_ShowRelics = 16,
}

export function eShowcaseHeroPlusFlagFromJSON(object: any): EShowcaseHeroPlusFlag {
  switch (object) {
    case 0:
    case "k_eShowcaseHeroPlusFlag_None":
      return EShowcaseHeroPlusFlag.k_eShowcaseHeroPlusFlag_None;
    case 1:
    case "k_eShowcaseHeroPlusFlag_BadgePosTop":
      return EShowcaseHeroPlusFlag.k_eShowcaseHeroPlusFlag_BadgePosTop;
    case 2:
    case "k_eShowcaseHeroPlusFlag_BadgePosBottom":
      return EShowcaseHeroPlusFlag.k_eShowcaseHeroPlusFlag_BadgePosBottom;
    case 4:
    case "k_eShowcaseHeroPlusFlag_BadgePosLeft":
      return EShowcaseHeroPlusFlag.k_eShowcaseHeroPlusFlag_BadgePosLeft;
    case 8:
    case "k_eShowcaseHeroPlusFlag_BadgePosRight":
      return EShowcaseHeroPlusFlag.k_eShowcaseHeroPlusFlag_BadgePosRight;
    case 16:
    case "k_eShowcaseHeroPlusFlag_ShowRelics":
      return EShowcaseHeroPlusFlag.k_eShowcaseHeroPlusFlag_ShowRelics;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EShowcaseHeroPlusFlag");
  }
}

export function eShowcaseHeroPlusFlagToJSON(object: EShowcaseHeroPlusFlag): string {
  switch (object) {
    case EShowcaseHeroPlusFlag.k_eShowcaseHeroPlusFlag_None:
      return "k_eShowcaseHeroPlusFlag_None";
    case EShowcaseHeroPlusFlag.k_eShowcaseHeroPlusFlag_BadgePosTop:
      return "k_eShowcaseHeroPlusFlag_BadgePosTop";
    case EShowcaseHeroPlusFlag.k_eShowcaseHeroPlusFlag_BadgePosBottom:
      return "k_eShowcaseHeroPlusFlag_BadgePosBottom";
    case EShowcaseHeroPlusFlag.k_eShowcaseHeroPlusFlag_BadgePosLeft:
      return "k_eShowcaseHeroPlusFlag_BadgePosLeft";
    case EShowcaseHeroPlusFlag.k_eShowcaseHeroPlusFlag_BadgePosRight:
      return "k_eShowcaseHeroPlusFlag_BadgePosRight";
    case EShowcaseHeroPlusFlag.k_eShowcaseHeroPlusFlag_ShowRelics:
      return "k_eShowcaseHeroPlusFlag_ShowRelics";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EShowcaseHeroPlusFlag");
  }
}

export enum EShowcaseType {
  k_eShowcaseType_Invalid = 0,
  k_eShowcaseType_Profile = 1,
  k_eShowcaseType_MiniProfile = 2,
  k_eShowcaseType_DefaultProfile = 3,
  k_eShowcaseType_DefaultMiniProfile = 4,
}

export function eShowcaseTypeFromJSON(object: any): EShowcaseType {
  switch (object) {
    case 0:
    case "k_eShowcaseType_Invalid":
      return EShowcaseType.k_eShowcaseType_Invalid;
    case 1:
    case "k_eShowcaseType_Profile":
      return EShowcaseType.k_eShowcaseType_Profile;
    case 2:
    case "k_eShowcaseType_MiniProfile":
      return EShowcaseType.k_eShowcaseType_MiniProfile;
    case 3:
    case "k_eShowcaseType_DefaultProfile":
      return EShowcaseType.k_eShowcaseType_DefaultProfile;
    case 4:
    case "k_eShowcaseType_DefaultMiniProfile":
      return EShowcaseType.k_eShowcaseType_DefaultMiniProfile;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EShowcaseType");
  }
}

export function eShowcaseTypeToJSON(object: EShowcaseType): string {
  switch (object) {
    case EShowcaseType.k_eShowcaseType_Invalid:
      return "k_eShowcaseType_Invalid";
    case EShowcaseType.k_eShowcaseType_Profile:
      return "k_eShowcaseType_Profile";
    case EShowcaseType.k_eShowcaseType_MiniProfile:
      return "k_eShowcaseType_MiniProfile";
    case EShowcaseType.k_eShowcaseType_DefaultProfile:
      return "k_eShowcaseType_DefaultProfile";
    case EShowcaseType.k_eShowcaseType_DefaultMiniProfile:
      return "k_eShowcaseType_DefaultMiniProfile";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EShowcaseType");
  }
}

export enum EShowcaseItemState {
  k_eShowcaseItemState_Ok = 0,
  k_eShowcaseItemState_MinorModifications = 1,
  k_eShowcaseItemState_ValidityUnknown = 2,
  k_eShowcaseItemState_PartiallyInvalid = 3,
  k_eShowcaseItemState_Invalid = 4,
  k_eShowcaseItemState_Failure = 5,
}

export function eShowcaseItemStateFromJSON(object: any): EShowcaseItemState {
  switch (object) {
    case 0:
    case "k_eShowcaseItemState_Ok":
      return EShowcaseItemState.k_eShowcaseItemState_Ok;
    case 1:
    case "k_eShowcaseItemState_MinorModifications":
      return EShowcaseItemState.k_eShowcaseItemState_MinorModifications;
    case 2:
    case "k_eShowcaseItemState_ValidityUnknown":
      return EShowcaseItemState.k_eShowcaseItemState_ValidityUnknown;
    case 3:
    case "k_eShowcaseItemState_PartiallyInvalid":
      return EShowcaseItemState.k_eShowcaseItemState_PartiallyInvalid;
    case 4:
    case "k_eShowcaseItemState_Invalid":
      return EShowcaseItemState.k_eShowcaseItemState_Invalid;
    case 5:
    case "k_eShowcaseItemState_Failure":
      return EShowcaseItemState.k_eShowcaseItemState_Failure;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EShowcaseItemState");
  }
}

export function eShowcaseItemStateToJSON(object: EShowcaseItemState): string {
  switch (object) {
    case EShowcaseItemState.k_eShowcaseItemState_Ok:
      return "k_eShowcaseItemState_Ok";
    case EShowcaseItemState.k_eShowcaseItemState_MinorModifications:
      return "k_eShowcaseItemState_MinorModifications";
    case EShowcaseItemState.k_eShowcaseItemState_ValidityUnknown:
      return "k_eShowcaseItemState_ValidityUnknown";
    case EShowcaseItemState.k_eShowcaseItemState_PartiallyInvalid:
      return "k_eShowcaseItemState_PartiallyInvalid";
    case EShowcaseItemState.k_eShowcaseItemState_Invalid:
      return "k_eShowcaseItemState_Invalid";
    case EShowcaseItemState.k_eShowcaseItemState_Failure:
      return "k_eShowcaseItemState_Failure";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EShowcaseItemState");
  }
}

export enum EShowcaseAuditAction {
  k_eShowcaseAuditAction_Invalid = 0,
  k_eShowcaseAuditAction_ShowcaseChanged = 1,
  k_eShowcaseAuditAction_AdminShowcaseReset = 2,
  k_eShowcaseAuditAction_AdminShowcaseAccountLocked = 3,
  k_eShowcaseAuditAction_AdminShowcaseExonerated = 4,
  k_eShowcaseAuditAction_AdminShowcaseConvicted = 5,
  k_eShowcaseAuditAction_AdminModerationApproved = 6,
  k_eShowcaseAuditAction_AdminModerationRejected = 7,
}

export function eShowcaseAuditActionFromJSON(object: any): EShowcaseAuditAction {
  switch (object) {
    case 0:
    case "k_eShowcaseAuditAction_Invalid":
      return EShowcaseAuditAction.k_eShowcaseAuditAction_Invalid;
    case 1:
    case "k_eShowcaseAuditAction_ShowcaseChanged":
      return EShowcaseAuditAction.k_eShowcaseAuditAction_ShowcaseChanged;
    case 2:
    case "k_eShowcaseAuditAction_AdminShowcaseReset":
      return EShowcaseAuditAction.k_eShowcaseAuditAction_AdminShowcaseReset;
    case 3:
    case "k_eShowcaseAuditAction_AdminShowcaseAccountLocked":
      return EShowcaseAuditAction.k_eShowcaseAuditAction_AdminShowcaseAccountLocked;
    case 4:
    case "k_eShowcaseAuditAction_AdminShowcaseExonerated":
      return EShowcaseAuditAction.k_eShowcaseAuditAction_AdminShowcaseExonerated;
    case 5:
    case "k_eShowcaseAuditAction_AdminShowcaseConvicted":
      return EShowcaseAuditAction.k_eShowcaseAuditAction_AdminShowcaseConvicted;
    case 6:
    case "k_eShowcaseAuditAction_AdminModerationApproved":
      return EShowcaseAuditAction.k_eShowcaseAuditAction_AdminModerationApproved;
    case 7:
    case "k_eShowcaseAuditAction_AdminModerationRejected":
      return EShowcaseAuditAction.k_eShowcaseAuditAction_AdminModerationRejected;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EShowcaseAuditAction");
  }
}

export function eShowcaseAuditActionToJSON(object: EShowcaseAuditAction): string {
  switch (object) {
    case EShowcaseAuditAction.k_eShowcaseAuditAction_Invalid:
      return "k_eShowcaseAuditAction_Invalid";
    case EShowcaseAuditAction.k_eShowcaseAuditAction_ShowcaseChanged:
      return "k_eShowcaseAuditAction_ShowcaseChanged";
    case EShowcaseAuditAction.k_eShowcaseAuditAction_AdminShowcaseReset:
      return "k_eShowcaseAuditAction_AdminShowcaseReset";
    case EShowcaseAuditAction.k_eShowcaseAuditAction_AdminShowcaseAccountLocked:
      return "k_eShowcaseAuditAction_AdminShowcaseAccountLocked";
    case EShowcaseAuditAction.k_eShowcaseAuditAction_AdminShowcaseExonerated:
      return "k_eShowcaseAuditAction_AdminShowcaseExonerated";
    case EShowcaseAuditAction.k_eShowcaseAuditAction_AdminShowcaseConvicted:
      return "k_eShowcaseAuditAction_AdminShowcaseConvicted";
    case EShowcaseAuditAction.k_eShowcaseAuditAction_AdminModerationApproved:
      return "k_eShowcaseAuditAction_AdminModerationApproved";
    case EShowcaseAuditAction.k_eShowcaseAuditAction_AdminModerationRejected:
      return "k_eShowcaseAuditAction_AdminModerationRejected";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EShowcaseAuditAction");
  }
}

export enum EShowcaseItemFlag {
  k_eShowcaseItemFlag_None = 0,
  k_eShowcaseItemFlag_FlipHorizontally = 1,
}

export function eShowcaseItemFlagFromJSON(object: any): EShowcaseItemFlag {
  switch (object) {
    case 0:
    case "k_eShowcaseItemFlag_None":
      return EShowcaseItemFlag.k_eShowcaseItemFlag_None;
    case 1:
    case "k_eShowcaseItemFlag_FlipHorizontally":
      return EShowcaseItemFlag.k_eShowcaseItemFlag_FlipHorizontally;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EShowcaseItemFlag");
  }
}

export function eShowcaseItemFlagToJSON(object: EShowcaseItemFlag): string {
  switch (object) {
    case EShowcaseItemFlag.k_eShowcaseItemFlag_None:
      return "k_eShowcaseItemFlag_None";
    case EShowcaseItemFlag.k_eShowcaseItemFlag_FlipHorizontally:
      return "k_eShowcaseItemFlag_FlipHorizontally";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EShowcaseItemFlag");
  }
}

export enum EShowcaseItemFlagHero {
  k_eShowcaseItemFlag_Hero_None = 0,
  k_eShowcaseItemFlag_Hero_ShowPedestal = 1,
  k_eShowcaseItemFlag_Hero_UseCurrentLoadout = 2,
  k_eShowcaseItemFlag_Hero_ShowHeroCard = 4,
  k_eShowcaseItemFlag_Hero_HeroCardHideName = 8,
  k_eShowcaseItemFlag_Hero_HeroCardUseMovie = 16,
}

export function eShowcaseItemFlagHeroFromJSON(object: any): EShowcaseItemFlagHero {
  switch (object) {
    case 0:
    case "k_eShowcaseItemFlag_Hero_None":
      return EShowcaseItemFlagHero.k_eShowcaseItemFlag_Hero_None;
    case 1:
    case "k_eShowcaseItemFlag_Hero_ShowPedestal":
      return EShowcaseItemFlagHero.k_eShowcaseItemFlag_Hero_ShowPedestal;
    case 2:
    case "k_eShowcaseItemFlag_Hero_UseCurrentLoadout":
      return EShowcaseItemFlagHero.k_eShowcaseItemFlag_Hero_UseCurrentLoadout;
    case 4:
    case "k_eShowcaseItemFlag_Hero_ShowHeroCard":
      return EShowcaseItemFlagHero.k_eShowcaseItemFlag_Hero_ShowHeroCard;
    case 8:
    case "k_eShowcaseItemFlag_Hero_HeroCardHideName":
      return EShowcaseItemFlagHero.k_eShowcaseItemFlag_Hero_HeroCardHideName;
    case 16:
    case "k_eShowcaseItemFlag_Hero_HeroCardUseMovie":
      return EShowcaseItemFlagHero.k_eShowcaseItemFlag_Hero_HeroCardUseMovie;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EShowcaseItemFlagHero");
  }
}

export function eShowcaseItemFlagHeroToJSON(object: EShowcaseItemFlagHero): string {
  switch (object) {
    case EShowcaseItemFlagHero.k_eShowcaseItemFlag_Hero_None:
      return "k_eShowcaseItemFlag_Hero_None";
    case EShowcaseItemFlagHero.k_eShowcaseItemFlag_Hero_ShowPedestal:
      return "k_eShowcaseItemFlag_Hero_ShowPedestal";
    case EShowcaseItemFlagHero.k_eShowcaseItemFlag_Hero_UseCurrentLoadout:
      return "k_eShowcaseItemFlag_Hero_UseCurrentLoadout";
    case EShowcaseItemFlagHero.k_eShowcaseItemFlag_Hero_ShowHeroCard:
      return "k_eShowcaseItemFlag_Hero_ShowHeroCard";
    case EShowcaseItemFlagHero.k_eShowcaseItemFlag_Hero_HeroCardHideName:
      return "k_eShowcaseItemFlag_Hero_HeroCardHideName";
    case EShowcaseItemFlagHero.k_eShowcaseItemFlag_Hero_HeroCardUseMovie:
      return "k_eShowcaseItemFlag_Hero_HeroCardUseMovie";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EShowcaseItemFlagHero");
  }
}

export interface CMsgShowcaseEconItemReference {
  id?: string | undefined;
  originalId?: string | undefined;
  definitionIndex?: number | undefined;
  equipmentSlotIndex?: number | undefined;
}

export interface CMsgHeroPlusInfo {
  flags?: number | undefined;
}

export interface CMsgShowcaseItemTrophy {
  data?: CMsgShowcaseItemTrophy_Data | undefined;
  trophyId?: number | undefined;
}

export interface CMsgShowcaseItemTrophy_Data {
  trophyScore?: number | undefined;
}

export interface CMsgShowcaseItemEconItem {
  data?: CMsgShowcaseItemEconItem_Data | undefined;
  ref?: CMsgShowcaseEconItemReference | undefined;
}

export interface CMsgShowcaseItemEconItem_Data {
  econItem?: CSOEconItem | undefined;
}

export interface CMsgShowcaseItemHero {
  data?: CMsgShowcaseItemHero_Data | undefined;
  heroId?: number | undefined;
  econItemRefs: CMsgShowcaseEconItemReference[];
  rotation?: number | undefined;
  flags?: number | undefined;
  plusInfo?: CMsgHeroPlusInfo | undefined;
  animationName?: string | undefined;
  animationPlaybackSpeed?: number | undefined;
  animationOffset?: number | undefined;
  zoom?: number | undefined;
  slotIndex?: number | undefined;
  modelIndex?: number | undefined;
}

export interface CMsgShowcaseItemHero_Data {
  econItems: CSOEconItem[];
  actualHeroId?: number | undefined;
  plusHeroXp?: number | undefined;
}

export interface CMsgShowcaseItemHeroIcon {
  data?: CMsgShowcaseItemHeroIcon_Data | undefined;
  heroId?: number | undefined;
  econItemRef?: CMsgShowcaseEconItemReference | undefined;
}

export interface CMsgShowcaseItemHeroIcon_Data {
  econItem?: CSOEconItem | undefined;
}

export interface CMsgShowcaseItemPlayerMatch {
  data?: CMsgShowcaseItemPlayerMatch_Data | undefined;
  matchId?: string | undefined;
  playerSlot?: number | undefined;
}

export enum CMsgShowcaseItemPlayerMatch_EPlayerOutcome {
  k_eInvalid = 0,
  k_eWin = 1,
  k_eLoss = 2,
  k_eNotScored = 3,
}

export function cMsgShowcaseItemPlayerMatch_EPlayerOutcomeFromJSON(
  object: any,
): CMsgShowcaseItemPlayerMatch_EPlayerOutcome {
  switch (object) {
    case 0:
    case "k_eInvalid":
      return CMsgShowcaseItemPlayerMatch_EPlayerOutcome.k_eInvalid;
    case 1:
    case "k_eWin":
      return CMsgShowcaseItemPlayerMatch_EPlayerOutcome.k_eWin;
    case 2:
    case "k_eLoss":
      return CMsgShowcaseItemPlayerMatch_EPlayerOutcome.k_eLoss;
    case 3:
    case "k_eNotScored":
      return CMsgShowcaseItemPlayerMatch_EPlayerOutcome.k_eNotScored;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgShowcaseItemPlayerMatch_EPlayerOutcome",
      );
  }
}

export function cMsgShowcaseItemPlayerMatch_EPlayerOutcomeToJSON(
  object: CMsgShowcaseItemPlayerMatch_EPlayerOutcome,
): string {
  switch (object) {
    case CMsgShowcaseItemPlayerMatch_EPlayerOutcome.k_eInvalid:
      return "k_eInvalid";
    case CMsgShowcaseItemPlayerMatch_EPlayerOutcome.k_eWin:
      return "k_eWin";
    case CMsgShowcaseItemPlayerMatch_EPlayerOutcome.k_eLoss:
      return "k_eLoss";
    case CMsgShowcaseItemPlayerMatch_EPlayerOutcome.k_eNotScored:
      return "k_eNotScored";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgShowcaseItemPlayerMatch_EPlayerOutcome",
      );
  }
}

export interface CMsgShowcaseItemPlayerMatch_Data {
  heroId?: number | undefined;
  timestamp?: number | undefined;
  duration?: number | undefined;
  gameMode?: DOTAGameMode | undefined;
  outcome?: CMsgShowcaseItemPlayerMatch_EPlayerOutcome | undefined;
  kills?: number | undefined;
  deaths?: number | undefined;
  assists?: number | undefined;
}

export interface CMsgShowcaseItemChatWheel {
  data?: CMsgShowcaseItemChatWheel_Data | undefined;
  chatWheelMessageId?: number | undefined;
}

export interface CMsgShowcaseItemChatWheel_Data {
}

export interface CMsgShowcaseItemEmoticon {
  data?: CMsgShowcaseItemEmoticon_Data | undefined;
  emoticonId?: number | undefined;
}

export interface CMsgShowcaseItemEmoticon_Data {
}

export interface CMsgShowcaseItemSpiderGraph {
  data?: CMsgShowcaseItemSpiderGraph_Data | undefined;
}

export interface CMsgShowcaseItemSpiderGraph_Data {
}

export interface CMsgShowcaseItemUserFeed {
  data?: CMsgShowcaseItemUserFeed_Data | undefined;
}

export interface CMsgShowcaseItemUserFeed_Data {
}

export interface CMsgShowcaseItemStat {
  data?: CMsgShowcaseItemStat_Data | undefined;
  statId?: CMsgDOTAProfileCard_EStatID | undefined;
}

export interface CMsgShowcaseItemStat_Data {
  statScore?: number | undefined;
}

export interface CMsgShowcaseBackground {
  data?: CMsgShowcaseBackground_Data | undefined;
  loadingScreenRef?: CMsgShowcaseEconItemReference | undefined;
  dim?: number | undefined;
  blur?: number | undefined;
  backgroundId?: number | undefined;
}

export interface CMsgShowcaseBackground_Data {
  loadingScreen?: CSOEconItem | undefined;
}

export interface CMsgShowcaseItemData {
  trophy?: CMsgShowcaseItemTrophy | undefined;
  econItemIcon?: CMsgShowcaseItemEconItem | undefined;
  sticker?: CMsgShowcaseItemEconItem | undefined;
  heroModel?: CMsgShowcaseItemHero | undefined;
  playerMatch?: CMsgShowcaseItemPlayerMatch | undefined;
  chatWheel?: CMsgShowcaseItemChatWheel | undefined;
  spray?: CMsgShowcaseItemChatWheel | undefined;
  emoticon?: CMsgShowcaseItemEmoticon | undefined;
  courier?: CMsgShowcaseItemEconItem | undefined;
  ward?: CMsgShowcaseItemEconItem | undefined;
  heroIcon?: CMsgShowcaseItemHeroIcon | undefined;
  spiderGraph?: CMsgShowcaseItemSpiderGraph | undefined;
  userFeed?: CMsgShowcaseItemUserFeed | undefined;
  stat?: CMsgShowcaseItemStat | undefined;
  roshan?: CMsgShowcaseItemEconItem | undefined;
  creep?: CMsgShowcaseItemEconItem | undefined;
  tower?: CMsgShowcaseItemEconItem | undefined;
  effigy?: CMsgShowcaseItemEconItem | undefined;
  decoration?: CMsgShowcaseItemEconItem | undefined;
  background?: CMsgShowcaseBackground | undefined;
}

export interface CMsgShowcaseItemPosition {
  positionX?: number | undefined;
  positionY?: number | undefined;
  scale?: number | undefined;
  width?: number | undefined;
  height?: number | undefined;
  rotation?: number | undefined;
  parentId?: number | undefined;
  parentAttachmentPointId?: number | undefined;
  attachmentAnchorX?: number | undefined;
  attachmentAnchorY?: number | undefined;
}

export interface CMsgShowcaseItem {
  showcaseItemId?: number | undefined;
  itemPosition?: CMsgShowcaseItemPosition | undefined;
  itemData?: CMsgShowcaseItemData | undefined;
  state?: EShowcaseItemState | undefined;
  flags?: number | undefined;
}

export interface CMsgShowcase {
  showcaseItems: CMsgShowcaseItem[];
  background?: CMsgShowcaseItem | undefined;
  moderationState?: CMsgShowcase_EModerationState | undefined;
}

export enum CMsgShowcase_EModerationState {
  k_eModerationState_Ok = 0,
  k_eModerationState_PendingApproval = 1,
}

export function cMsgShowcase_EModerationStateFromJSON(object: any): CMsgShowcase_EModerationState {
  switch (object) {
    case 0:
    case "k_eModerationState_Ok":
      return CMsgShowcase_EModerationState.k_eModerationState_Ok;
    case 1:
    case "k_eModerationState_PendingApproval":
      return CMsgShowcase_EModerationState.k_eModerationState_PendingApproval;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgShowcase_EModerationState");
  }
}

export function cMsgShowcase_EModerationStateToJSON(object: CMsgShowcase_EModerationState): string {
  switch (object) {
    case CMsgShowcase_EModerationState.k_eModerationState_Ok:
      return "k_eModerationState_Ok";
    case CMsgShowcase_EModerationState.k_eModerationState_PendingApproval:
      return "k_eModerationState_PendingApproval";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CMsgShowcase_EModerationState");
  }
}

export interface CMsgClientToGCShowcaseGetUserData {
  accountId?: number | undefined;
  showcaseType?: EShowcaseType | undefined;
}

export interface CMsgClientToGCShowcaseGetUserDataResponse {
  response?: CMsgClientToGCShowcaseGetUserDataResponse_EResponse | undefined;
  showcase?: CMsgShowcase | undefined;
}

export enum CMsgClientToGCShowcaseGetUserDataResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eUnknownShowcase = 5,
}

export function cMsgClientToGCShowcaseGetUserDataResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCShowcaseGetUserDataResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCShowcaseGetUserDataResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCShowcaseGetUserDataResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCShowcaseGetUserDataResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCShowcaseGetUserDataResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCShowcaseGetUserDataResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eUnknownShowcase":
      return CMsgClientToGCShowcaseGetUserDataResponse_EResponse.k_eUnknownShowcase;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseGetUserDataResponse_EResponse",
      );
  }
}

export function cMsgClientToGCShowcaseGetUserDataResponse_EResponseToJSON(
  object: CMsgClientToGCShowcaseGetUserDataResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCShowcaseGetUserDataResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCShowcaseGetUserDataResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCShowcaseGetUserDataResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCShowcaseGetUserDataResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCShowcaseGetUserDataResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCShowcaseGetUserDataResponse_EResponse.k_eUnknownShowcase:
      return "k_eUnknownShowcase";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseGetUserDataResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCShowcaseSetUserData {
  showcaseType?: EShowcaseType | undefined;
  showcase?: CMsgShowcase | undefined;
  formatVersion?: number | undefined;
}

export interface CMsgClientToGCShowcaseSetUserDataResponse {
  response?: CMsgClientToGCShowcaseSetUserDataResponse_EResponse | undefined;
  validatedShowcase?: CMsgShowcase | undefined;
  lockedUntilTimestamp?: number | undefined;
}

export enum CMsgClientToGCShowcaseSetUserDataResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eInvalid = 5,
  k_eLockedFromEditing = 6,
  k_eBudgetExceeded = 7,
  k_eCommunicationScoreTooLow = 8,
}

export function cMsgClientToGCShowcaseSetUserDataResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCShowcaseSetUserDataResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eInvalid":
      return CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eInvalid;
    case 6:
    case "k_eLockedFromEditing":
      return CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eLockedFromEditing;
    case 7:
    case "k_eBudgetExceeded":
      return CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eBudgetExceeded;
    case 8:
    case "k_eCommunicationScoreTooLow":
      return CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eCommunicationScoreTooLow;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseSetUserDataResponse_EResponse",
      );
  }
}

export function cMsgClientToGCShowcaseSetUserDataResponse_EResponseToJSON(
  object: CMsgClientToGCShowcaseSetUserDataResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eInvalid:
      return "k_eInvalid";
    case CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eLockedFromEditing:
      return "k_eLockedFromEditing";
    case CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eBudgetExceeded:
      return "k_eBudgetExceeded";
    case CMsgClientToGCShowcaseSetUserDataResponse_EResponse.k_eCommunicationScoreTooLow:
      return "k_eCommunicationScoreTooLow";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseSetUserDataResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCShowcaseSubmitReport {
  targetAccountId?: number | undefined;
  showcaseType?: EShowcaseType | undefined;
  reportComment?: string | undefined;
}

export interface CMsgClientToGCShowcaseSubmitReportResponse {
  response?: CMsgClientToGCShowcaseSubmitReportResponse_EResponse | undefined;
}

export enum CMsgClientToGCShowcaseSubmitReportResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eAlreadyReported = 5,
}

export function cMsgClientToGCShowcaseSubmitReportResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCShowcaseSubmitReportResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCShowcaseSubmitReportResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCShowcaseSubmitReportResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCShowcaseSubmitReportResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCShowcaseSubmitReportResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCShowcaseSubmitReportResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eAlreadyReported":
      return CMsgClientToGCShowcaseSubmitReportResponse_EResponse.k_eAlreadyReported;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseSubmitReportResponse_EResponse",
      );
  }
}

export function cMsgClientToGCShowcaseSubmitReportResponse_EResponseToJSON(
  object: CMsgClientToGCShowcaseSubmitReportResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCShowcaseSubmitReportResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCShowcaseSubmitReportResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCShowcaseSubmitReportResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCShowcaseSubmitReportResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCShowcaseSubmitReportResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCShowcaseSubmitReportResponse_EResponse.k_eAlreadyReported:
      return "k_eAlreadyReported";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseSubmitReportResponse_EResponse",
      );
  }
}

export interface CMsgShowcaseReportsRollupInfo {
  rollupId?: number | undefined;
  startTimestamp?: number | undefined;
  endTimestamp?: number | undefined;
}

export interface CMsgShowcaseReportsRollupList {
  rollups: CMsgShowcaseReportsRollupInfo[];
}

export interface CMsgShowcaseReportsRollupEntry {
  accountId?: number | undefined;
  showcaseType?: EShowcaseType | undefined;
  reportCount?: number | undefined;
}

export interface CMsgShowcaseReportsRollup {
  rollupInfo?: CMsgShowcaseReportsRollupInfo | undefined;
  rollupEntries: CMsgShowcaseReportsRollupEntry[];
}

export interface CMsgClientToGCShowcaseAdminGetReportsRollupList {
}

export interface CMsgClientToGCShowcaseAdminGetReportsRollupListResponse {
  response?: CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse | undefined;
  rollupList?: CMsgShowcaseReportsRollupList | undefined;
}

export enum CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eNoPermission = 5,
}

export function cMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eNoPermission":
      return CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse.k_eNoPermission;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object +
          " for enum CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse",
      );
  }
}

export function cMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponseToJSON(
  object: CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse.k_eNoPermission:
      return "k_eNoPermission";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object +
          " for enum CMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCShowcaseAdminGetReportsRollup {
  rollupId?: number | undefined;
}

export interface CMsgClientToGCShowcaseAdminGetReportsRollupResponse {
  response?: CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse | undefined;
  rollup?: CMsgShowcaseReportsRollup | undefined;
}

export enum CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eNoPermission = 5,
  k_eNotFound = 6,
}

export function cMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eNoPermission":
      return CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eNoPermission;
    case 6:
    case "k_eNotFound":
      return CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eNotFound;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse",
      );
  }
}

export function cMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponseToJSON(
  object: CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eNoPermission:
      return "k_eNoPermission";
    case CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse.k_eNotFound:
      return "k_eNotFound";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponse",
      );
  }
}

export interface CMsgShowcaseAuditEntry {
  showcaseType?: EShowcaseType | undefined;
  auditAction?: EShowcaseAuditAction | undefined;
  auditData?: string | undefined;
  timestamp?: number | undefined;
}

export interface CMsgShowcaseReport {
  reporterAccountId?: number | undefined;
  showcaseType?: EShowcaseType | undefined;
  reportTimestamp?: number | undefined;
  reportComment?: string | undefined;
}

export interface CMsgShowcaseAdminUserDetails {
  lockedUntilTimestamp?: number | undefined;
  auditEntries: CMsgShowcaseAuditEntry[];
  reports: CMsgShowcaseReport[];
}

export interface CMsgClientToGCShowcaseAdminGetUserDetails {
  accountId?: number | undefined;
}

export interface CMsgClientToGCShowcaseAdminGetUserDetailsResponse {
  response?: CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse | undefined;
  userDetails?: CMsgShowcaseAdminUserDetails | undefined;
}

export enum CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eNoPermission = 5,
}

export function cMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eNoPermission":
      return CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse.k_eNoPermission;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse",
      );
  }
}

export function cMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponseToJSON(
  object: CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse.k_eNoPermission:
      return "k_eNoPermission";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCShowcaseAdminReset {
  targetAccountId?: number | undefined;
  showcaseType?: EShowcaseType | undefined;
}

export interface CMsgClientToGCShowcaseAdminResetResponse {
  response?: CMsgClientToGCShowcaseAdminResetResponse_EResponse | undefined;
}

export enum CMsgClientToGCShowcaseAdminResetResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eNoPermission = 5,
}

export function cMsgClientToGCShowcaseAdminResetResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCShowcaseAdminResetResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCShowcaseAdminResetResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCShowcaseAdminResetResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCShowcaseAdminResetResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCShowcaseAdminResetResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCShowcaseAdminResetResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eNoPermission":
      return CMsgClientToGCShowcaseAdminResetResponse_EResponse.k_eNoPermission;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseAdminResetResponse_EResponse",
      );
  }
}

export function cMsgClientToGCShowcaseAdminResetResponse_EResponseToJSON(
  object: CMsgClientToGCShowcaseAdminResetResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCShowcaseAdminResetResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCShowcaseAdminResetResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCShowcaseAdminResetResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCShowcaseAdminResetResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCShowcaseAdminResetResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCShowcaseAdminResetResponse_EResponse.k_eNoPermission:
      return "k_eNoPermission";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseAdminResetResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCShowcaseAdminLockAccount {
  targetAccountId?: number | undefined;
  lockedUntilTimestamp?: number | undefined;
}

export interface CMsgClientToGCShowcaseAdminLockAccountResponse {
  response?: CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse | undefined;
}

export enum CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eNoPermission = 5,
}

export function cMsgClientToGCShowcaseAdminLockAccountResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eNoPermission":
      return CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse.k_eNoPermission;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse",
      );
  }
}

export function cMsgClientToGCShowcaseAdminLockAccountResponse_EResponseToJSON(
  object: CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse.k_eNoPermission:
      return "k_eNoPermission";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseAdminLockAccountResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCShowcaseAdminConvict {
  targetAccountId?: number | undefined;
  showcaseType?: EShowcaseType | undefined;
}

export interface CMsgClientToGCShowcaseAdminConvictResponse {
  response?: CMsgClientToGCShowcaseAdminConvictResponse_EResponse | undefined;
}

export enum CMsgClientToGCShowcaseAdminConvictResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eNoPermission = 5,
  k_eAlreadyConvicted = 6,
}

export function cMsgClientToGCShowcaseAdminConvictResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCShowcaseAdminConvictResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eNoPermission":
      return CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eNoPermission;
    case 6:
    case "k_eAlreadyConvicted":
      return CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eAlreadyConvicted;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseAdminConvictResponse_EResponse",
      );
  }
}

export function cMsgClientToGCShowcaseAdminConvictResponse_EResponseToJSON(
  object: CMsgClientToGCShowcaseAdminConvictResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eNoPermission:
      return "k_eNoPermission";
    case CMsgClientToGCShowcaseAdminConvictResponse_EResponse.k_eAlreadyConvicted:
      return "k_eAlreadyConvicted";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseAdminConvictResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCShowcaseAdminExonerate {
  targetAccountId?: number | undefined;
  showcaseType?: EShowcaseType | undefined;
}

export interface CMsgClientToGCShowcaseAdminExonerateResponse {
  response?: CMsgClientToGCShowcaseAdminExonerateResponse_EResponse | undefined;
}

export enum CMsgClientToGCShowcaseAdminExonerateResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eNoPermission = 5,
  k_eAlreadyExonerated = 6,
}

export function cMsgClientToGCShowcaseAdminExonerateResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCShowcaseAdminExonerateResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eNoPermission":
      return CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eNoPermission;
    case 6:
    case "k_eAlreadyExonerated":
      return CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eAlreadyExonerated;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseAdminExonerateResponse_EResponse",
      );
  }
}

export function cMsgClientToGCShowcaseAdminExonerateResponse_EResponseToJSON(
  object: CMsgClientToGCShowcaseAdminExonerateResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eNoPermission:
      return "k_eNoPermission";
    case CMsgClientToGCShowcaseAdminExonerateResponse_EResponse.k_eAlreadyExonerated:
      return "k_eAlreadyExonerated";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseAdminExonerateResponse_EResponse",
      );
  }
}

export interface CMsgShowcaseModerationInfo {
  accountId?: number | undefined;
  showcaseType?: EShowcaseType | undefined;
  showcaseTimestamp?: number | undefined;
}

export interface CMsgClientToGCShowcaseModerationGetQueue {
  startTimestamp?: number | undefined;
  resultCount?: number | undefined;
}

export interface CMsgClientToGCShowcaseModerationGetQueueResponse {
  response?: CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse | undefined;
  showcases: CMsgShowcaseModerationInfo[];
}

export enum CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eNoPermission = 5,
}

export function cMsgClientToGCShowcaseModerationGetQueueResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eNoPermission":
      return CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse.k_eNoPermission;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse",
      );
  }
}

export function cMsgClientToGCShowcaseModerationGetQueueResponse_EResponseToJSON(
  object: CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse.k_eNoPermission:
      return "k_eNoPermission";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object + " for enum CMsgClientToGCShowcaseModerationGetQueueResponse_EResponse",
      );
  }
}

export interface CMsgClientToGCShowcaseModerationApplyModeration {
  accountId?: number | undefined;
  showcaseType?: EShowcaseType | undefined;
  showcaseTimestamp?: number | undefined;
  approve?: boolean | undefined;
}

export interface CMsgClientToGCShowcaseModerationApplyModerationResponse {
  response?: CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse | undefined;
}

export enum CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse {
  k_eInternalError = 0,
  k_eSuccess = 1,
  k_eTooBusy = 2,
  k_eDisabled = 3,
  k_eTimeout = 4,
  k_eNoPermission = 5,
  k_eGone = 6,
}

export function cMsgClientToGCShowcaseModerationApplyModerationResponse_EResponseFromJSON(
  object: any,
): CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse {
  switch (object) {
    case 0:
    case "k_eInternalError":
      return CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eInternalError;
    case 1:
    case "k_eSuccess":
      return CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eSuccess;
    case 2:
    case "k_eTooBusy":
      return CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eTooBusy;
    case 3:
    case "k_eDisabled":
      return CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eDisabled;
    case 4:
    case "k_eTimeout":
      return CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eTimeout;
    case 5:
    case "k_eNoPermission":
      return CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eNoPermission;
    case 6:
    case "k_eGone":
      return CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eGone;
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object +
          " for enum CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse",
      );
  }
}

export function cMsgClientToGCShowcaseModerationApplyModerationResponse_EResponseToJSON(
  object: CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse,
): string {
  switch (object) {
    case CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eInternalError:
      return "k_eInternalError";
    case CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eSuccess:
      return "k_eSuccess";
    case CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eTooBusy:
      return "k_eTooBusy";
    case CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eDisabled:
      return "k_eDisabled";
    case CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eTimeout:
      return "k_eTimeout";
    case CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eNoPermission:
      return "k_eNoPermission";
    case CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse.k_eGone:
      return "k_eGone";
    default:
      throw new globalThis.Error(
        "Unrecognized enum value " + object +
          " for enum CMsgClientToGCShowcaseModerationApplyModerationResponse_EResponse",
      );
  }
}

function createBaseCMsgShowcaseEconItemReference(): CMsgShowcaseEconItemReference {
  return { id: "0", originalId: "0", definitionIndex: 0, equipmentSlotIndex: -1 };
}

export const CMsgShowcaseEconItemReference = {
  encode(message: CMsgShowcaseEconItemReference, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined && message.id !== "0") {
      writer.uint32(8).uint64(message.id);
    }
    if (message.originalId !== undefined && message.originalId !== "0") {
      writer.uint32(16).uint64(message.originalId);
    }
    if (message.definitionIndex !== undefined && message.definitionIndex !== 0) {
      writer.uint32(24).uint32(message.definitionIndex);
    }
    if (message.equipmentSlotIndex !== undefined && message.equipmentSlotIndex !== -1) {
      writer.uint32(32).int32(message.equipmentSlotIndex);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseEconItemReference {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseEconItemReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.originalId = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.definitionIndex = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.equipmentSlotIndex = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseEconItemReference {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      originalId: isSet(object.originalId) ? globalThis.String(object.originalId) : "0",
      definitionIndex: isSet(object.definitionIndex) ? globalThis.Number(object.definitionIndex) : 0,
      equipmentSlotIndex: isSet(object.equipmentSlotIndex) ? globalThis.Number(object.equipmentSlotIndex) : -1,
    };
  },

  toJSON(message: CMsgShowcaseEconItemReference): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== "0") {
      obj.id = message.id;
    }
    if (message.originalId !== undefined && message.originalId !== "0") {
      obj.originalId = message.originalId;
    }
    if (message.definitionIndex !== undefined && message.definitionIndex !== 0) {
      obj.definitionIndex = Math.round(message.definitionIndex);
    }
    if (message.equipmentSlotIndex !== undefined && message.equipmentSlotIndex !== -1) {
      obj.equipmentSlotIndex = Math.round(message.equipmentSlotIndex);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseEconItemReference>): CMsgShowcaseEconItemReference {
    return CMsgShowcaseEconItemReference.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseEconItemReference>): CMsgShowcaseEconItemReference {
    const message = createBaseCMsgShowcaseEconItemReference();
    message.id = object.id ?? "0";
    message.originalId = object.originalId ?? "0";
    message.definitionIndex = object.definitionIndex ?? 0;
    message.equipmentSlotIndex = object.equipmentSlotIndex ?? -1;
    return message;
  },
};

function createBaseCMsgHeroPlusInfo(): CMsgHeroPlusInfo {
  return { flags: 0 };
}

export const CMsgHeroPlusInfo = {
  encode(message: CMsgHeroPlusInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.flags !== undefined && message.flags !== 0) {
      writer.uint32(8).uint32(message.flags);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgHeroPlusInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgHeroPlusInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.flags = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgHeroPlusInfo {
    return { flags: isSet(object.flags) ? globalThis.Number(object.flags) : 0 };
  },

  toJSON(message: CMsgHeroPlusInfo): unknown {
    const obj: any = {};
    if (message.flags !== undefined && message.flags !== 0) {
      obj.flags = Math.round(message.flags);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgHeroPlusInfo>): CMsgHeroPlusInfo {
    return CMsgHeroPlusInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgHeroPlusInfo>): CMsgHeroPlusInfo {
    const message = createBaseCMsgHeroPlusInfo();
    message.flags = object.flags ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseItemTrophy(): CMsgShowcaseItemTrophy {
  return { data: undefined, trophyId: 0 };
}

export const CMsgShowcaseItemTrophy = {
  encode(message: CMsgShowcaseItemTrophy, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      CMsgShowcaseItemTrophy_Data.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    if (message.trophyId !== undefined && message.trophyId !== 0) {
      writer.uint32(16).uint32(message.trophyId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemTrophy {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemTrophy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = CMsgShowcaseItemTrophy_Data.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.trophyId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemTrophy {
    return {
      data: isSet(object.data) ? CMsgShowcaseItemTrophy_Data.fromJSON(object.data) : undefined,
      trophyId: isSet(object.trophyId) ? globalThis.Number(object.trophyId) : 0,
    };
  },

  toJSON(message: CMsgShowcaseItemTrophy): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CMsgShowcaseItemTrophy_Data.toJSON(message.data);
    }
    if (message.trophyId !== undefined && message.trophyId !== 0) {
      obj.trophyId = Math.round(message.trophyId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemTrophy>): CMsgShowcaseItemTrophy {
    return CMsgShowcaseItemTrophy.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemTrophy>): CMsgShowcaseItemTrophy {
    const message = createBaseCMsgShowcaseItemTrophy();
    message.data = (object.data !== undefined && object.data !== null)
      ? CMsgShowcaseItemTrophy_Data.fromPartial(object.data)
      : undefined;
    message.trophyId = object.trophyId ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseItemTrophy_Data(): CMsgShowcaseItemTrophy_Data {
  return { trophyScore: 0 };
}

export const CMsgShowcaseItemTrophy_Data = {
  encode(message: CMsgShowcaseItemTrophy_Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.trophyScore !== undefined && message.trophyScore !== 0) {
      writer.uint32(8).uint32(message.trophyScore);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemTrophy_Data {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemTrophy_Data();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.trophyScore = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemTrophy_Data {
    return { trophyScore: isSet(object.trophyScore) ? globalThis.Number(object.trophyScore) : 0 };
  },

  toJSON(message: CMsgShowcaseItemTrophy_Data): unknown {
    const obj: any = {};
    if (message.trophyScore !== undefined && message.trophyScore !== 0) {
      obj.trophyScore = Math.round(message.trophyScore);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemTrophy_Data>): CMsgShowcaseItemTrophy_Data {
    return CMsgShowcaseItemTrophy_Data.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemTrophy_Data>): CMsgShowcaseItemTrophy_Data {
    const message = createBaseCMsgShowcaseItemTrophy_Data();
    message.trophyScore = object.trophyScore ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseItemEconItem(): CMsgShowcaseItemEconItem {
  return { data: undefined, ref: undefined };
}

export const CMsgShowcaseItemEconItem = {
  encode(message: CMsgShowcaseItemEconItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      CMsgShowcaseItemEconItem_Data.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    if (message.ref !== undefined) {
      CMsgShowcaseEconItemReference.encode(message.ref, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemEconItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemEconItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = CMsgShowcaseItemEconItem_Data.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.ref = CMsgShowcaseEconItemReference.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemEconItem {
    return {
      data: isSet(object.data) ? CMsgShowcaseItemEconItem_Data.fromJSON(object.data) : undefined,
      ref: isSet(object.ref) ? CMsgShowcaseEconItemReference.fromJSON(object.ref) : undefined,
    };
  },

  toJSON(message: CMsgShowcaseItemEconItem): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CMsgShowcaseItemEconItem_Data.toJSON(message.data);
    }
    if (message.ref !== undefined) {
      obj.ref = CMsgShowcaseEconItemReference.toJSON(message.ref);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemEconItem>): CMsgShowcaseItemEconItem {
    return CMsgShowcaseItemEconItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemEconItem>): CMsgShowcaseItemEconItem {
    const message = createBaseCMsgShowcaseItemEconItem();
    message.data = (object.data !== undefined && object.data !== null)
      ? CMsgShowcaseItemEconItem_Data.fromPartial(object.data)
      : undefined;
    message.ref = (object.ref !== undefined && object.ref !== null)
      ? CMsgShowcaseEconItemReference.fromPartial(object.ref)
      : undefined;
    return message;
  },
};

function createBaseCMsgShowcaseItemEconItem_Data(): CMsgShowcaseItemEconItem_Data {
  return { econItem: undefined };
}

export const CMsgShowcaseItemEconItem_Data = {
  encode(message: CMsgShowcaseItemEconItem_Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.econItem !== undefined) {
      CSOEconItem.encode(message.econItem, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemEconItem_Data {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemEconItem_Data();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.econItem = CSOEconItem.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemEconItem_Data {
    return { econItem: isSet(object.econItem) ? CSOEconItem.fromJSON(object.econItem) : undefined };
  },

  toJSON(message: CMsgShowcaseItemEconItem_Data): unknown {
    const obj: any = {};
    if (message.econItem !== undefined) {
      obj.econItem = CSOEconItem.toJSON(message.econItem);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemEconItem_Data>): CMsgShowcaseItemEconItem_Data {
    return CMsgShowcaseItemEconItem_Data.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemEconItem_Data>): CMsgShowcaseItemEconItem_Data {
    const message = createBaseCMsgShowcaseItemEconItem_Data();
    message.econItem = (object.econItem !== undefined && object.econItem !== null)
      ? CSOEconItem.fromPartial(object.econItem)
      : undefined;
    return message;
  },
};

function createBaseCMsgShowcaseItemHero(): CMsgShowcaseItemHero {
  return {
    data: undefined,
    heroId: 0,
    econItemRefs: [],
    rotation: 0,
    flags: 0,
    plusInfo: undefined,
    animationName: "",
    animationPlaybackSpeed: 100,
    animationOffset: 0,
    zoom: 100,
    slotIndex: 0,
    modelIndex: 0,
  };
}

export const CMsgShowcaseItemHero = {
  encode(message: CMsgShowcaseItemHero, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      CMsgShowcaseItemHero_Data.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    if (message.heroId !== undefined && message.heroId !== 0) {
      writer.uint32(16).int32(message.heroId);
    }
    for (const v of message.econItemRefs) {
      CMsgShowcaseEconItemReference.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    if (message.rotation !== undefined && message.rotation !== 0) {
      writer.uint32(32).uint32(message.rotation);
    }
    if (message.flags !== undefined && message.flags !== 0) {
      writer.uint32(40).uint32(message.flags);
    }
    if (message.plusInfo !== undefined) {
      CMsgHeroPlusInfo.encode(message.plusInfo, writer.uint32(50).fork()).ldelim();
    }
    if (message.animationName !== undefined && message.animationName !== "") {
      writer.uint32(58).string(message.animationName);
    }
    if (message.animationPlaybackSpeed !== undefined && message.animationPlaybackSpeed !== 100) {
      writer.uint32(64).uint32(message.animationPlaybackSpeed);
    }
    if (message.animationOffset !== undefined && message.animationOffset !== 0) {
      writer.uint32(72).uint32(message.animationOffset);
    }
    if (message.zoom !== undefined && message.zoom !== 100) {
      writer.uint32(80).uint32(message.zoom);
    }
    if (message.slotIndex !== undefined && message.slotIndex !== 0) {
      writer.uint32(88).uint32(message.slotIndex);
    }
    if (message.modelIndex !== undefined && message.modelIndex !== 0) {
      writer.uint32(96).uint32(message.modelIndex);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemHero {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemHero();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = CMsgShowcaseItemHero_Data.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.heroId = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.econItemRefs.push(CMsgShowcaseEconItemReference.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.rotation = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.flags = reader.uint32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.plusInfo = CMsgHeroPlusInfo.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.animationName = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.animationPlaybackSpeed = reader.uint32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.animationOffset = reader.uint32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.zoom = reader.uint32();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.slotIndex = reader.uint32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.modelIndex = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemHero {
    return {
      data: isSet(object.data) ? CMsgShowcaseItemHero_Data.fromJSON(object.data) : undefined,
      heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
      econItemRefs: globalThis.Array.isArray(object?.econItemRefs)
        ? object.econItemRefs.map((e: any) => CMsgShowcaseEconItemReference.fromJSON(e))
        : [],
      rotation: isSet(object.rotation) ? globalThis.Number(object.rotation) : 0,
      flags: isSet(object.flags) ? globalThis.Number(object.flags) : 0,
      plusInfo: isSet(object.plusInfo) ? CMsgHeroPlusInfo.fromJSON(object.plusInfo) : undefined,
      animationName: isSet(object.animationName) ? globalThis.String(object.animationName) : "",
      animationPlaybackSpeed: isSet(object.animationPlaybackSpeed)
        ? globalThis.Number(object.animationPlaybackSpeed)
        : 100,
      animationOffset: isSet(object.animationOffset) ? globalThis.Number(object.animationOffset) : 0,
      zoom: isSet(object.zoom) ? globalThis.Number(object.zoom) : 100,
      slotIndex: isSet(object.slotIndex) ? globalThis.Number(object.slotIndex) : 0,
      modelIndex: isSet(object.modelIndex) ? globalThis.Number(object.modelIndex) : 0,
    };
  },

  toJSON(message: CMsgShowcaseItemHero): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CMsgShowcaseItemHero_Data.toJSON(message.data);
    }
    if (message.heroId !== undefined && message.heroId !== 0) {
      obj.heroId = Math.round(message.heroId);
    }
    if (message.econItemRefs?.length) {
      obj.econItemRefs = message.econItemRefs.map((e) => CMsgShowcaseEconItemReference.toJSON(e));
    }
    if (message.rotation !== undefined && message.rotation !== 0) {
      obj.rotation = Math.round(message.rotation);
    }
    if (message.flags !== undefined && message.flags !== 0) {
      obj.flags = Math.round(message.flags);
    }
    if (message.plusInfo !== undefined) {
      obj.plusInfo = CMsgHeroPlusInfo.toJSON(message.plusInfo);
    }
    if (message.animationName !== undefined && message.animationName !== "") {
      obj.animationName = message.animationName;
    }
    if (message.animationPlaybackSpeed !== undefined && message.animationPlaybackSpeed !== 100) {
      obj.animationPlaybackSpeed = Math.round(message.animationPlaybackSpeed);
    }
    if (message.animationOffset !== undefined && message.animationOffset !== 0) {
      obj.animationOffset = Math.round(message.animationOffset);
    }
    if (message.zoom !== undefined && message.zoom !== 100) {
      obj.zoom = Math.round(message.zoom);
    }
    if (message.slotIndex !== undefined && message.slotIndex !== 0) {
      obj.slotIndex = Math.round(message.slotIndex);
    }
    if (message.modelIndex !== undefined && message.modelIndex !== 0) {
      obj.modelIndex = Math.round(message.modelIndex);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemHero>): CMsgShowcaseItemHero {
    return CMsgShowcaseItemHero.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemHero>): CMsgShowcaseItemHero {
    const message = createBaseCMsgShowcaseItemHero();
    message.data = (object.data !== undefined && object.data !== null)
      ? CMsgShowcaseItemHero_Data.fromPartial(object.data)
      : undefined;
    message.heroId = object.heroId ?? 0;
    message.econItemRefs = object.econItemRefs?.map((e) => CMsgShowcaseEconItemReference.fromPartial(e)) || [];
    message.rotation = object.rotation ?? 0;
    message.flags = object.flags ?? 0;
    message.plusInfo = (object.plusInfo !== undefined && object.plusInfo !== null)
      ? CMsgHeroPlusInfo.fromPartial(object.plusInfo)
      : undefined;
    message.animationName = object.animationName ?? "";
    message.animationPlaybackSpeed = object.animationPlaybackSpeed ?? 100;
    message.animationOffset = object.animationOffset ?? 0;
    message.zoom = object.zoom ?? 100;
    message.slotIndex = object.slotIndex ?? 0;
    message.modelIndex = object.modelIndex ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseItemHero_Data(): CMsgShowcaseItemHero_Data {
  return { econItems: [], actualHeroId: 0, plusHeroXp: 0 };
}

export const CMsgShowcaseItemHero_Data = {
  encode(message: CMsgShowcaseItemHero_Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.econItems) {
      CSOEconItem.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.actualHeroId !== undefined && message.actualHeroId !== 0) {
      writer.uint32(16).int32(message.actualHeroId);
    }
    if (message.plusHeroXp !== undefined && message.plusHeroXp !== 0) {
      writer.uint32(24).uint32(message.plusHeroXp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemHero_Data {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemHero_Data();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.econItems.push(CSOEconItem.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.actualHeroId = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.plusHeroXp = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemHero_Data {
    return {
      econItems: globalThis.Array.isArray(object?.econItems)
        ? object.econItems.map((e: any) => CSOEconItem.fromJSON(e))
        : [],
      actualHeroId: isSet(object.actualHeroId) ? globalThis.Number(object.actualHeroId) : 0,
      plusHeroXp: isSet(object.plusHeroXp) ? globalThis.Number(object.plusHeroXp) : 0,
    };
  },

  toJSON(message: CMsgShowcaseItemHero_Data): unknown {
    const obj: any = {};
    if (message.econItems?.length) {
      obj.econItems = message.econItems.map((e) => CSOEconItem.toJSON(e));
    }
    if (message.actualHeroId !== undefined && message.actualHeroId !== 0) {
      obj.actualHeroId = Math.round(message.actualHeroId);
    }
    if (message.plusHeroXp !== undefined && message.plusHeroXp !== 0) {
      obj.plusHeroXp = Math.round(message.plusHeroXp);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemHero_Data>): CMsgShowcaseItemHero_Data {
    return CMsgShowcaseItemHero_Data.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemHero_Data>): CMsgShowcaseItemHero_Data {
    const message = createBaseCMsgShowcaseItemHero_Data();
    message.econItems = object.econItems?.map((e) => CSOEconItem.fromPartial(e)) || [];
    message.actualHeroId = object.actualHeroId ?? 0;
    message.plusHeroXp = object.plusHeroXp ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseItemHeroIcon(): CMsgShowcaseItemHeroIcon {
  return { data: undefined, heroId: 0, econItemRef: undefined };
}

export const CMsgShowcaseItemHeroIcon = {
  encode(message: CMsgShowcaseItemHeroIcon, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      CMsgShowcaseItemHeroIcon_Data.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    if (message.heroId !== undefined && message.heroId !== 0) {
      writer.uint32(16).int32(message.heroId);
    }
    if (message.econItemRef !== undefined) {
      CMsgShowcaseEconItemReference.encode(message.econItemRef, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemHeroIcon {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemHeroIcon();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = CMsgShowcaseItemHeroIcon_Data.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.heroId = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.econItemRef = CMsgShowcaseEconItemReference.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemHeroIcon {
    return {
      data: isSet(object.data) ? CMsgShowcaseItemHeroIcon_Data.fromJSON(object.data) : undefined,
      heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
      econItemRef: isSet(object.econItemRef) ? CMsgShowcaseEconItemReference.fromJSON(object.econItemRef) : undefined,
    };
  },

  toJSON(message: CMsgShowcaseItemHeroIcon): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CMsgShowcaseItemHeroIcon_Data.toJSON(message.data);
    }
    if (message.heroId !== undefined && message.heroId !== 0) {
      obj.heroId = Math.round(message.heroId);
    }
    if (message.econItemRef !== undefined) {
      obj.econItemRef = CMsgShowcaseEconItemReference.toJSON(message.econItemRef);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemHeroIcon>): CMsgShowcaseItemHeroIcon {
    return CMsgShowcaseItemHeroIcon.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemHeroIcon>): CMsgShowcaseItemHeroIcon {
    const message = createBaseCMsgShowcaseItemHeroIcon();
    message.data = (object.data !== undefined && object.data !== null)
      ? CMsgShowcaseItemHeroIcon_Data.fromPartial(object.data)
      : undefined;
    message.heroId = object.heroId ?? 0;
    message.econItemRef = (object.econItemRef !== undefined && object.econItemRef !== null)
      ? CMsgShowcaseEconItemReference.fromPartial(object.econItemRef)
      : undefined;
    return message;
  },
};

function createBaseCMsgShowcaseItemHeroIcon_Data(): CMsgShowcaseItemHeroIcon_Data {
  return { econItem: undefined };
}

export const CMsgShowcaseItemHeroIcon_Data = {
  encode(message: CMsgShowcaseItemHeroIcon_Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.econItem !== undefined) {
      CSOEconItem.encode(message.econItem, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemHeroIcon_Data {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemHeroIcon_Data();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.econItem = CSOEconItem.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemHeroIcon_Data {
    return { econItem: isSet(object.econItem) ? CSOEconItem.fromJSON(object.econItem) : undefined };
  },

  toJSON(message: CMsgShowcaseItemHeroIcon_Data): unknown {
    const obj: any = {};
    if (message.econItem !== undefined) {
      obj.econItem = CSOEconItem.toJSON(message.econItem);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemHeroIcon_Data>): CMsgShowcaseItemHeroIcon_Data {
    return CMsgShowcaseItemHeroIcon_Data.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemHeroIcon_Data>): CMsgShowcaseItemHeroIcon_Data {
    const message = createBaseCMsgShowcaseItemHeroIcon_Data();
    message.econItem = (object.econItem !== undefined && object.econItem !== null)
      ? CSOEconItem.fromPartial(object.econItem)
      : undefined;
    return message;
  },
};

function createBaseCMsgShowcaseItemPlayerMatch(): CMsgShowcaseItemPlayerMatch {
  return { data: undefined, matchId: "0", playerSlot: 0 };
}

export const CMsgShowcaseItemPlayerMatch = {
  encode(message: CMsgShowcaseItemPlayerMatch, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      CMsgShowcaseItemPlayerMatch_Data.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    if (message.matchId !== undefined && message.matchId !== "0") {
      writer.uint32(16).uint64(message.matchId);
    }
    if (message.playerSlot !== undefined && message.playerSlot !== 0) {
      writer.uint32(24).uint32(message.playerSlot);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemPlayerMatch {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemPlayerMatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = CMsgShowcaseItemPlayerMatch_Data.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.matchId = longToString(reader.uint64() as Long);
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.playerSlot = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemPlayerMatch {
    return {
      data: isSet(object.data) ? CMsgShowcaseItemPlayerMatch_Data.fromJSON(object.data) : undefined,
      matchId: isSet(object.matchId) ? globalThis.String(object.matchId) : "0",
      playerSlot: isSet(object.playerSlot) ? globalThis.Number(object.playerSlot) : 0,
    };
  },

  toJSON(message: CMsgShowcaseItemPlayerMatch): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CMsgShowcaseItemPlayerMatch_Data.toJSON(message.data);
    }
    if (message.matchId !== undefined && message.matchId !== "0") {
      obj.matchId = message.matchId;
    }
    if (message.playerSlot !== undefined && message.playerSlot !== 0) {
      obj.playerSlot = Math.round(message.playerSlot);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemPlayerMatch>): CMsgShowcaseItemPlayerMatch {
    return CMsgShowcaseItemPlayerMatch.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemPlayerMatch>): CMsgShowcaseItemPlayerMatch {
    const message = createBaseCMsgShowcaseItemPlayerMatch();
    message.data = (object.data !== undefined && object.data !== null)
      ? CMsgShowcaseItemPlayerMatch_Data.fromPartial(object.data)
      : undefined;
    message.matchId = object.matchId ?? "0";
    message.playerSlot = object.playerSlot ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseItemPlayerMatch_Data(): CMsgShowcaseItemPlayerMatch_Data {
  return { heroId: 0, timestamp: 0, duration: 0, gameMode: 0, outcome: 0, kills: 0, deaths: 0, assists: 0 };
}

export const CMsgShowcaseItemPlayerMatch_Data = {
  encode(message: CMsgShowcaseItemPlayerMatch_Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.heroId !== undefined && message.heroId !== 0) {
      writer.uint32(8).int32(message.heroId);
    }
    if (message.timestamp !== undefined && message.timestamp !== 0) {
      writer.uint32(16).uint32(message.timestamp);
    }
    if (message.duration !== undefined && message.duration !== 0) {
      writer.uint32(24).uint32(message.duration);
    }
    if (message.gameMode !== undefined && message.gameMode !== 0) {
      writer.uint32(32).int32(message.gameMode);
    }
    if (message.outcome !== undefined && message.outcome !== 0) {
      writer.uint32(40).int32(message.outcome);
    }
    if (message.kills !== undefined && message.kills !== 0) {
      writer.uint32(48).uint32(message.kills);
    }
    if (message.deaths !== undefined && message.deaths !== 0) {
      writer.uint32(56).uint32(message.deaths);
    }
    if (message.assists !== undefined && message.assists !== 0) {
      writer.uint32(64).uint32(message.assists);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemPlayerMatch_Data {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemPlayerMatch_Data();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.heroId = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.timestamp = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.duration = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.gameMode = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.outcome = reader.int32() as any;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.kills = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.deaths = reader.uint32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.assists = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemPlayerMatch_Data {
    return {
      heroId: isSet(object.heroId) ? globalThis.Number(object.heroId) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      gameMode: isSet(object.gameMode) ? dOTAGameModeFromJSON(object.gameMode) : 0,
      outcome: isSet(object.outcome) ? cMsgShowcaseItemPlayerMatch_EPlayerOutcomeFromJSON(object.outcome) : 0,
      kills: isSet(object.kills) ? globalThis.Number(object.kills) : 0,
      deaths: isSet(object.deaths) ? globalThis.Number(object.deaths) : 0,
      assists: isSet(object.assists) ? globalThis.Number(object.assists) : 0,
    };
  },

  toJSON(message: CMsgShowcaseItemPlayerMatch_Data): unknown {
    const obj: any = {};
    if (message.heroId !== undefined && message.heroId !== 0) {
      obj.heroId = Math.round(message.heroId);
    }
    if (message.timestamp !== undefined && message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.duration !== undefined && message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.gameMode !== undefined && message.gameMode !== 0) {
      obj.gameMode = dOTAGameModeToJSON(message.gameMode);
    }
    if (message.outcome !== undefined && message.outcome !== 0) {
      obj.outcome = cMsgShowcaseItemPlayerMatch_EPlayerOutcomeToJSON(message.outcome);
    }
    if (message.kills !== undefined && message.kills !== 0) {
      obj.kills = Math.round(message.kills);
    }
    if (message.deaths !== undefined && message.deaths !== 0) {
      obj.deaths = Math.round(message.deaths);
    }
    if (message.assists !== undefined && message.assists !== 0) {
      obj.assists = Math.round(message.assists);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemPlayerMatch_Data>): CMsgShowcaseItemPlayerMatch_Data {
    return CMsgShowcaseItemPlayerMatch_Data.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemPlayerMatch_Data>): CMsgShowcaseItemPlayerMatch_Data {
    const message = createBaseCMsgShowcaseItemPlayerMatch_Data();
    message.heroId = object.heroId ?? 0;
    message.timestamp = object.timestamp ?? 0;
    message.duration = object.duration ?? 0;
    message.gameMode = object.gameMode ?? 0;
    message.outcome = object.outcome ?? 0;
    message.kills = object.kills ?? 0;
    message.deaths = object.deaths ?? 0;
    message.assists = object.assists ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseItemChatWheel(): CMsgShowcaseItemChatWheel {
  return { data: undefined, chatWheelMessageId: 4294967295 };
}

export const CMsgShowcaseItemChatWheel = {
  encode(message: CMsgShowcaseItemChatWheel, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      CMsgShowcaseItemChatWheel_Data.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    if (message.chatWheelMessageId !== undefined && message.chatWheelMessageId !== 4294967295) {
      writer.uint32(16).uint32(message.chatWheelMessageId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemChatWheel {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemChatWheel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = CMsgShowcaseItemChatWheel_Data.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.chatWheelMessageId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemChatWheel {
    return {
      data: isSet(object.data) ? CMsgShowcaseItemChatWheel_Data.fromJSON(object.data) : undefined,
      chatWheelMessageId: isSet(object.chatWheelMessageId) ? globalThis.Number(object.chatWheelMessageId) : 4294967295,
    };
  },

  toJSON(message: CMsgShowcaseItemChatWheel): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CMsgShowcaseItemChatWheel_Data.toJSON(message.data);
    }
    if (message.chatWheelMessageId !== undefined && message.chatWheelMessageId !== 4294967295) {
      obj.chatWheelMessageId = Math.round(message.chatWheelMessageId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemChatWheel>): CMsgShowcaseItemChatWheel {
    return CMsgShowcaseItemChatWheel.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemChatWheel>): CMsgShowcaseItemChatWheel {
    const message = createBaseCMsgShowcaseItemChatWheel();
    message.data = (object.data !== undefined && object.data !== null)
      ? CMsgShowcaseItemChatWheel_Data.fromPartial(object.data)
      : undefined;
    message.chatWheelMessageId = object.chatWheelMessageId ?? 4294967295;
    return message;
  },
};

function createBaseCMsgShowcaseItemChatWheel_Data(): CMsgShowcaseItemChatWheel_Data {
  return {};
}

export const CMsgShowcaseItemChatWheel_Data = {
  encode(_: CMsgShowcaseItemChatWheel_Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemChatWheel_Data {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemChatWheel_Data();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CMsgShowcaseItemChatWheel_Data {
    return {};
  },

  toJSON(_: CMsgShowcaseItemChatWheel_Data): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemChatWheel_Data>): CMsgShowcaseItemChatWheel_Data {
    return CMsgShowcaseItemChatWheel_Data.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CMsgShowcaseItemChatWheel_Data>): CMsgShowcaseItemChatWheel_Data {
    const message = createBaseCMsgShowcaseItemChatWheel_Data();
    return message;
  },
};

function createBaseCMsgShowcaseItemEmoticon(): CMsgShowcaseItemEmoticon {
  return { data: undefined, emoticonId: 0 };
}

export const CMsgShowcaseItemEmoticon = {
  encode(message: CMsgShowcaseItemEmoticon, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      CMsgShowcaseItemEmoticon_Data.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    if (message.emoticonId !== undefined && message.emoticonId !== 0) {
      writer.uint32(16).uint32(message.emoticonId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemEmoticon {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemEmoticon();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = CMsgShowcaseItemEmoticon_Data.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.emoticonId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemEmoticon {
    return {
      data: isSet(object.data) ? CMsgShowcaseItemEmoticon_Data.fromJSON(object.data) : undefined,
      emoticonId: isSet(object.emoticonId) ? globalThis.Number(object.emoticonId) : 0,
    };
  },

  toJSON(message: CMsgShowcaseItemEmoticon): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CMsgShowcaseItemEmoticon_Data.toJSON(message.data);
    }
    if (message.emoticonId !== undefined && message.emoticonId !== 0) {
      obj.emoticonId = Math.round(message.emoticonId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemEmoticon>): CMsgShowcaseItemEmoticon {
    return CMsgShowcaseItemEmoticon.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemEmoticon>): CMsgShowcaseItemEmoticon {
    const message = createBaseCMsgShowcaseItemEmoticon();
    message.data = (object.data !== undefined && object.data !== null)
      ? CMsgShowcaseItemEmoticon_Data.fromPartial(object.data)
      : undefined;
    message.emoticonId = object.emoticonId ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseItemEmoticon_Data(): CMsgShowcaseItemEmoticon_Data {
  return {};
}

export const CMsgShowcaseItemEmoticon_Data = {
  encode(_: CMsgShowcaseItemEmoticon_Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemEmoticon_Data {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemEmoticon_Data();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CMsgShowcaseItemEmoticon_Data {
    return {};
  },

  toJSON(_: CMsgShowcaseItemEmoticon_Data): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemEmoticon_Data>): CMsgShowcaseItemEmoticon_Data {
    return CMsgShowcaseItemEmoticon_Data.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CMsgShowcaseItemEmoticon_Data>): CMsgShowcaseItemEmoticon_Data {
    const message = createBaseCMsgShowcaseItemEmoticon_Data();
    return message;
  },
};

function createBaseCMsgShowcaseItemSpiderGraph(): CMsgShowcaseItemSpiderGraph {
  return { data: undefined };
}

export const CMsgShowcaseItemSpiderGraph = {
  encode(message: CMsgShowcaseItemSpiderGraph, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      CMsgShowcaseItemSpiderGraph_Data.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemSpiderGraph {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemSpiderGraph();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = CMsgShowcaseItemSpiderGraph_Data.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemSpiderGraph {
    return { data: isSet(object.data) ? CMsgShowcaseItemSpiderGraph_Data.fromJSON(object.data) : undefined };
  },

  toJSON(message: CMsgShowcaseItemSpiderGraph): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CMsgShowcaseItemSpiderGraph_Data.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemSpiderGraph>): CMsgShowcaseItemSpiderGraph {
    return CMsgShowcaseItemSpiderGraph.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemSpiderGraph>): CMsgShowcaseItemSpiderGraph {
    const message = createBaseCMsgShowcaseItemSpiderGraph();
    message.data = (object.data !== undefined && object.data !== null)
      ? CMsgShowcaseItemSpiderGraph_Data.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCMsgShowcaseItemSpiderGraph_Data(): CMsgShowcaseItemSpiderGraph_Data {
  return {};
}

export const CMsgShowcaseItemSpiderGraph_Data = {
  encode(_: CMsgShowcaseItemSpiderGraph_Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemSpiderGraph_Data {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemSpiderGraph_Data();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CMsgShowcaseItemSpiderGraph_Data {
    return {};
  },

  toJSON(_: CMsgShowcaseItemSpiderGraph_Data): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemSpiderGraph_Data>): CMsgShowcaseItemSpiderGraph_Data {
    return CMsgShowcaseItemSpiderGraph_Data.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CMsgShowcaseItemSpiderGraph_Data>): CMsgShowcaseItemSpiderGraph_Data {
    const message = createBaseCMsgShowcaseItemSpiderGraph_Data();
    return message;
  },
};

function createBaseCMsgShowcaseItemUserFeed(): CMsgShowcaseItemUserFeed {
  return { data: undefined };
}

export const CMsgShowcaseItemUserFeed = {
  encode(message: CMsgShowcaseItemUserFeed, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      CMsgShowcaseItemUserFeed_Data.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemUserFeed {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemUserFeed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = CMsgShowcaseItemUserFeed_Data.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemUserFeed {
    return { data: isSet(object.data) ? CMsgShowcaseItemUserFeed_Data.fromJSON(object.data) : undefined };
  },

  toJSON(message: CMsgShowcaseItemUserFeed): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CMsgShowcaseItemUserFeed_Data.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemUserFeed>): CMsgShowcaseItemUserFeed {
    return CMsgShowcaseItemUserFeed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemUserFeed>): CMsgShowcaseItemUserFeed {
    const message = createBaseCMsgShowcaseItemUserFeed();
    message.data = (object.data !== undefined && object.data !== null)
      ? CMsgShowcaseItemUserFeed_Data.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCMsgShowcaseItemUserFeed_Data(): CMsgShowcaseItemUserFeed_Data {
  return {};
}

export const CMsgShowcaseItemUserFeed_Data = {
  encode(_: CMsgShowcaseItemUserFeed_Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemUserFeed_Data {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemUserFeed_Data();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CMsgShowcaseItemUserFeed_Data {
    return {};
  },

  toJSON(_: CMsgShowcaseItemUserFeed_Data): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemUserFeed_Data>): CMsgShowcaseItemUserFeed_Data {
    return CMsgShowcaseItemUserFeed_Data.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CMsgShowcaseItemUserFeed_Data>): CMsgShowcaseItemUserFeed_Data {
    const message = createBaseCMsgShowcaseItemUserFeed_Data();
    return message;
  },
};

function createBaseCMsgShowcaseItemStat(): CMsgShowcaseItemStat {
  return { data: undefined, statId: 3 };
}

export const CMsgShowcaseItemStat = {
  encode(message: CMsgShowcaseItemStat, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      CMsgShowcaseItemStat_Data.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    if (message.statId !== undefined && message.statId !== 3) {
      writer.uint32(16).int32(message.statId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemStat {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemStat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = CMsgShowcaseItemStat_Data.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.statId = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemStat {
    return {
      data: isSet(object.data) ? CMsgShowcaseItemStat_Data.fromJSON(object.data) : undefined,
      statId: isSet(object.statId) ? cMsgDOTAProfileCard_EStatIDFromJSON(object.statId) : 3,
    };
  },

  toJSON(message: CMsgShowcaseItemStat): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CMsgShowcaseItemStat_Data.toJSON(message.data);
    }
    if (message.statId !== undefined && message.statId !== 3) {
      obj.statId = cMsgDOTAProfileCard_EStatIDToJSON(message.statId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemStat>): CMsgShowcaseItemStat {
    return CMsgShowcaseItemStat.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemStat>): CMsgShowcaseItemStat {
    const message = createBaseCMsgShowcaseItemStat();
    message.data = (object.data !== undefined && object.data !== null)
      ? CMsgShowcaseItemStat_Data.fromPartial(object.data)
      : undefined;
    message.statId = object.statId ?? 3;
    return message;
  },
};

function createBaseCMsgShowcaseItemStat_Data(): CMsgShowcaseItemStat_Data {
  return { statScore: 0 };
}

export const CMsgShowcaseItemStat_Data = {
  encode(message: CMsgShowcaseItemStat_Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.statScore !== undefined && message.statScore !== 0) {
      writer.uint32(8).uint32(message.statScore);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemStat_Data {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemStat_Data();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.statScore = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemStat_Data {
    return { statScore: isSet(object.statScore) ? globalThis.Number(object.statScore) : 0 };
  },

  toJSON(message: CMsgShowcaseItemStat_Data): unknown {
    const obj: any = {};
    if (message.statScore !== undefined && message.statScore !== 0) {
      obj.statScore = Math.round(message.statScore);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemStat_Data>): CMsgShowcaseItemStat_Data {
    return CMsgShowcaseItemStat_Data.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemStat_Data>): CMsgShowcaseItemStat_Data {
    const message = createBaseCMsgShowcaseItemStat_Data();
    message.statScore = object.statScore ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseBackground(): CMsgShowcaseBackground {
  return { data: undefined, loadingScreenRef: undefined, dim: 0, blur: 0, backgroundId: 0 };
}

export const CMsgShowcaseBackground = {
  encode(message: CMsgShowcaseBackground, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      CMsgShowcaseBackground_Data.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    if (message.loadingScreenRef !== undefined) {
      CMsgShowcaseEconItemReference.encode(message.loadingScreenRef, writer.uint32(18).fork()).ldelim();
    }
    if (message.dim !== undefined && message.dim !== 0) {
      writer.uint32(24).uint32(message.dim);
    }
    if (message.blur !== undefined && message.blur !== 0) {
      writer.uint32(32).uint32(message.blur);
    }
    if (message.backgroundId !== undefined && message.backgroundId !== 0) {
      writer.uint32(40).uint32(message.backgroundId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseBackground {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseBackground();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = CMsgShowcaseBackground_Data.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.loadingScreenRef = CMsgShowcaseEconItemReference.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.dim = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.blur = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.backgroundId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseBackground {
    return {
      data: isSet(object.data) ? CMsgShowcaseBackground_Data.fromJSON(object.data) : undefined,
      loadingScreenRef: isSet(object.loadingScreenRef)
        ? CMsgShowcaseEconItemReference.fromJSON(object.loadingScreenRef)
        : undefined,
      dim: isSet(object.dim) ? globalThis.Number(object.dim) : 0,
      blur: isSet(object.blur) ? globalThis.Number(object.blur) : 0,
      backgroundId: isSet(object.backgroundId) ? globalThis.Number(object.backgroundId) : 0,
    };
  },

  toJSON(message: CMsgShowcaseBackground): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = CMsgShowcaseBackground_Data.toJSON(message.data);
    }
    if (message.loadingScreenRef !== undefined) {
      obj.loadingScreenRef = CMsgShowcaseEconItemReference.toJSON(message.loadingScreenRef);
    }
    if (message.dim !== undefined && message.dim !== 0) {
      obj.dim = Math.round(message.dim);
    }
    if (message.blur !== undefined && message.blur !== 0) {
      obj.blur = Math.round(message.blur);
    }
    if (message.backgroundId !== undefined && message.backgroundId !== 0) {
      obj.backgroundId = Math.round(message.backgroundId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseBackground>): CMsgShowcaseBackground {
    return CMsgShowcaseBackground.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseBackground>): CMsgShowcaseBackground {
    const message = createBaseCMsgShowcaseBackground();
    message.data = (object.data !== undefined && object.data !== null)
      ? CMsgShowcaseBackground_Data.fromPartial(object.data)
      : undefined;
    message.loadingScreenRef = (object.loadingScreenRef !== undefined && object.loadingScreenRef !== null)
      ? CMsgShowcaseEconItemReference.fromPartial(object.loadingScreenRef)
      : undefined;
    message.dim = object.dim ?? 0;
    message.blur = object.blur ?? 0;
    message.backgroundId = object.backgroundId ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseBackground_Data(): CMsgShowcaseBackground_Data {
  return { loadingScreen: undefined };
}

export const CMsgShowcaseBackground_Data = {
  encode(message: CMsgShowcaseBackground_Data, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.loadingScreen !== undefined) {
      CSOEconItem.encode(message.loadingScreen, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseBackground_Data {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseBackground_Data();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.loadingScreen = CSOEconItem.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseBackground_Data {
    return { loadingScreen: isSet(object.loadingScreen) ? CSOEconItem.fromJSON(object.loadingScreen) : undefined };
  },

  toJSON(message: CMsgShowcaseBackground_Data): unknown {
    const obj: any = {};
    if (message.loadingScreen !== undefined) {
      obj.loadingScreen = CSOEconItem.toJSON(message.loadingScreen);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseBackground_Data>): CMsgShowcaseBackground_Data {
    return CMsgShowcaseBackground_Data.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseBackground_Data>): CMsgShowcaseBackground_Data {
    const message = createBaseCMsgShowcaseBackground_Data();
    message.loadingScreen = (object.loadingScreen !== undefined && object.loadingScreen !== null)
      ? CSOEconItem.fromPartial(object.loadingScreen)
      : undefined;
    return message;
  },
};

function createBaseCMsgShowcaseItemData(): CMsgShowcaseItemData {
  return {
    trophy: undefined,
    econItemIcon: undefined,
    sticker: undefined,
    heroModel: undefined,
    playerMatch: undefined,
    chatWheel: undefined,
    spray: undefined,
    emoticon: undefined,
    courier: undefined,
    ward: undefined,
    heroIcon: undefined,
    spiderGraph: undefined,
    userFeed: undefined,
    stat: undefined,
    roshan: undefined,
    creep: undefined,
    tower: undefined,
    effigy: undefined,
    decoration: undefined,
    background: undefined,
  };
}

export const CMsgShowcaseItemData = {
  encode(message: CMsgShowcaseItemData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.trophy !== undefined) {
      CMsgShowcaseItemTrophy.encode(message.trophy, writer.uint32(10).fork()).ldelim();
    }
    if (message.econItemIcon !== undefined) {
      CMsgShowcaseItemEconItem.encode(message.econItemIcon, writer.uint32(18).fork()).ldelim();
    }
    if (message.sticker !== undefined) {
      CMsgShowcaseItemEconItem.encode(message.sticker, writer.uint32(26).fork()).ldelim();
    }
    if (message.heroModel !== undefined) {
      CMsgShowcaseItemHero.encode(message.heroModel, writer.uint32(34).fork()).ldelim();
    }
    if (message.playerMatch !== undefined) {
      CMsgShowcaseItemPlayerMatch.encode(message.playerMatch, writer.uint32(42).fork()).ldelim();
    }
    if (message.chatWheel !== undefined) {
      CMsgShowcaseItemChatWheel.encode(message.chatWheel, writer.uint32(50).fork()).ldelim();
    }
    if (message.spray !== undefined) {
      CMsgShowcaseItemChatWheel.encode(message.spray, writer.uint32(58).fork()).ldelim();
    }
    if (message.emoticon !== undefined) {
      CMsgShowcaseItemEmoticon.encode(message.emoticon, writer.uint32(66).fork()).ldelim();
    }
    if (message.courier !== undefined) {
      CMsgShowcaseItemEconItem.encode(message.courier, writer.uint32(82).fork()).ldelim();
    }
    if (message.ward !== undefined) {
      CMsgShowcaseItemEconItem.encode(message.ward, writer.uint32(90).fork()).ldelim();
    }
    if (message.heroIcon !== undefined) {
      CMsgShowcaseItemHeroIcon.encode(message.heroIcon, writer.uint32(98).fork()).ldelim();
    }
    if (message.spiderGraph !== undefined) {
      CMsgShowcaseItemSpiderGraph.encode(message.spiderGraph, writer.uint32(106).fork()).ldelim();
    }
    if (message.userFeed !== undefined) {
      CMsgShowcaseItemUserFeed.encode(message.userFeed, writer.uint32(114).fork()).ldelim();
    }
    if (message.stat !== undefined) {
      CMsgShowcaseItemStat.encode(message.stat, writer.uint32(122).fork()).ldelim();
    }
    if (message.roshan !== undefined) {
      CMsgShowcaseItemEconItem.encode(message.roshan, writer.uint32(130).fork()).ldelim();
    }
    if (message.creep !== undefined) {
      CMsgShowcaseItemEconItem.encode(message.creep, writer.uint32(138).fork()).ldelim();
    }
    if (message.tower !== undefined) {
      CMsgShowcaseItemEconItem.encode(message.tower, writer.uint32(146).fork()).ldelim();
    }
    if (message.effigy !== undefined) {
      CMsgShowcaseItemEconItem.encode(message.effigy, writer.uint32(154).fork()).ldelim();
    }
    if (message.decoration !== undefined) {
      CMsgShowcaseItemEconItem.encode(message.decoration, writer.uint32(162).fork()).ldelim();
    }
    if (message.background !== undefined) {
      CMsgShowcaseBackground.encode(message.background, writer.uint32(802).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.trophy = CMsgShowcaseItemTrophy.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.econItemIcon = CMsgShowcaseItemEconItem.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sticker = CMsgShowcaseItemEconItem.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.heroModel = CMsgShowcaseItemHero.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.playerMatch = CMsgShowcaseItemPlayerMatch.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.chatWheel = CMsgShowcaseItemChatWheel.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.spray = CMsgShowcaseItemChatWheel.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.emoticon = CMsgShowcaseItemEmoticon.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.courier = CMsgShowcaseItemEconItem.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.ward = CMsgShowcaseItemEconItem.decode(reader, reader.uint32());
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.heroIcon = CMsgShowcaseItemHeroIcon.decode(reader, reader.uint32());
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.spiderGraph = CMsgShowcaseItemSpiderGraph.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.userFeed = CMsgShowcaseItemUserFeed.decode(reader, reader.uint32());
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.stat = CMsgShowcaseItemStat.decode(reader, reader.uint32());
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.roshan = CMsgShowcaseItemEconItem.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 138) {
            break;
          }

          message.creep = CMsgShowcaseItemEconItem.decode(reader, reader.uint32());
          continue;
        case 18:
          if (tag !== 146) {
            break;
          }

          message.tower = CMsgShowcaseItemEconItem.decode(reader, reader.uint32());
          continue;
        case 19:
          if (tag !== 154) {
            break;
          }

          message.effigy = CMsgShowcaseItemEconItem.decode(reader, reader.uint32());
          continue;
        case 20:
          if (tag !== 162) {
            break;
          }

          message.decoration = CMsgShowcaseItemEconItem.decode(reader, reader.uint32());
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.background = CMsgShowcaseBackground.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemData {
    return {
      trophy: isSet(object.trophy) ? CMsgShowcaseItemTrophy.fromJSON(object.trophy) : undefined,
      econItemIcon: isSet(object.econItemIcon) ? CMsgShowcaseItemEconItem.fromJSON(object.econItemIcon) : undefined,
      sticker: isSet(object.sticker) ? CMsgShowcaseItemEconItem.fromJSON(object.sticker) : undefined,
      heroModel: isSet(object.heroModel) ? CMsgShowcaseItemHero.fromJSON(object.heroModel) : undefined,
      playerMatch: isSet(object.playerMatch) ? CMsgShowcaseItemPlayerMatch.fromJSON(object.playerMatch) : undefined,
      chatWheel: isSet(object.chatWheel) ? CMsgShowcaseItemChatWheel.fromJSON(object.chatWheel) : undefined,
      spray: isSet(object.spray) ? CMsgShowcaseItemChatWheel.fromJSON(object.spray) : undefined,
      emoticon: isSet(object.emoticon) ? CMsgShowcaseItemEmoticon.fromJSON(object.emoticon) : undefined,
      courier: isSet(object.courier) ? CMsgShowcaseItemEconItem.fromJSON(object.courier) : undefined,
      ward: isSet(object.ward) ? CMsgShowcaseItemEconItem.fromJSON(object.ward) : undefined,
      heroIcon: isSet(object.heroIcon) ? CMsgShowcaseItemHeroIcon.fromJSON(object.heroIcon) : undefined,
      spiderGraph: isSet(object.spiderGraph) ? CMsgShowcaseItemSpiderGraph.fromJSON(object.spiderGraph) : undefined,
      userFeed: isSet(object.userFeed) ? CMsgShowcaseItemUserFeed.fromJSON(object.userFeed) : undefined,
      stat: isSet(object.stat) ? CMsgShowcaseItemStat.fromJSON(object.stat) : undefined,
      roshan: isSet(object.roshan) ? CMsgShowcaseItemEconItem.fromJSON(object.roshan) : undefined,
      creep: isSet(object.creep) ? CMsgShowcaseItemEconItem.fromJSON(object.creep) : undefined,
      tower: isSet(object.tower) ? CMsgShowcaseItemEconItem.fromJSON(object.tower) : undefined,
      effigy: isSet(object.effigy) ? CMsgShowcaseItemEconItem.fromJSON(object.effigy) : undefined,
      decoration: isSet(object.decoration) ? CMsgShowcaseItemEconItem.fromJSON(object.decoration) : undefined,
      background: isSet(object.background) ? CMsgShowcaseBackground.fromJSON(object.background) : undefined,
    };
  },

  toJSON(message: CMsgShowcaseItemData): unknown {
    const obj: any = {};
    if (message.trophy !== undefined) {
      obj.trophy = CMsgShowcaseItemTrophy.toJSON(message.trophy);
    }
    if (message.econItemIcon !== undefined) {
      obj.econItemIcon = CMsgShowcaseItemEconItem.toJSON(message.econItemIcon);
    }
    if (message.sticker !== undefined) {
      obj.sticker = CMsgShowcaseItemEconItem.toJSON(message.sticker);
    }
    if (message.heroModel !== undefined) {
      obj.heroModel = CMsgShowcaseItemHero.toJSON(message.heroModel);
    }
    if (message.playerMatch !== undefined) {
      obj.playerMatch = CMsgShowcaseItemPlayerMatch.toJSON(message.playerMatch);
    }
    if (message.chatWheel !== undefined) {
      obj.chatWheel = CMsgShowcaseItemChatWheel.toJSON(message.chatWheel);
    }
    if (message.spray !== undefined) {
      obj.spray = CMsgShowcaseItemChatWheel.toJSON(message.spray);
    }
    if (message.emoticon !== undefined) {
      obj.emoticon = CMsgShowcaseItemEmoticon.toJSON(message.emoticon);
    }
    if (message.courier !== undefined) {
      obj.courier = CMsgShowcaseItemEconItem.toJSON(message.courier);
    }
    if (message.ward !== undefined) {
      obj.ward = CMsgShowcaseItemEconItem.toJSON(message.ward);
    }
    if (message.heroIcon !== undefined) {
      obj.heroIcon = CMsgShowcaseItemHeroIcon.toJSON(message.heroIcon);
    }
    if (message.spiderGraph !== undefined) {
      obj.spiderGraph = CMsgShowcaseItemSpiderGraph.toJSON(message.spiderGraph);
    }
    if (message.userFeed !== undefined) {
      obj.userFeed = CMsgShowcaseItemUserFeed.toJSON(message.userFeed);
    }
    if (message.stat !== undefined) {
      obj.stat = CMsgShowcaseItemStat.toJSON(message.stat);
    }
    if (message.roshan !== undefined) {
      obj.roshan = CMsgShowcaseItemEconItem.toJSON(message.roshan);
    }
    if (message.creep !== undefined) {
      obj.creep = CMsgShowcaseItemEconItem.toJSON(message.creep);
    }
    if (message.tower !== undefined) {
      obj.tower = CMsgShowcaseItemEconItem.toJSON(message.tower);
    }
    if (message.effigy !== undefined) {
      obj.effigy = CMsgShowcaseItemEconItem.toJSON(message.effigy);
    }
    if (message.decoration !== undefined) {
      obj.decoration = CMsgShowcaseItemEconItem.toJSON(message.decoration);
    }
    if (message.background !== undefined) {
      obj.background = CMsgShowcaseBackground.toJSON(message.background);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemData>): CMsgShowcaseItemData {
    return CMsgShowcaseItemData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemData>): CMsgShowcaseItemData {
    const message = createBaseCMsgShowcaseItemData();
    message.trophy = (object.trophy !== undefined && object.trophy !== null)
      ? CMsgShowcaseItemTrophy.fromPartial(object.trophy)
      : undefined;
    message.econItemIcon = (object.econItemIcon !== undefined && object.econItemIcon !== null)
      ? CMsgShowcaseItemEconItem.fromPartial(object.econItemIcon)
      : undefined;
    message.sticker = (object.sticker !== undefined && object.sticker !== null)
      ? CMsgShowcaseItemEconItem.fromPartial(object.sticker)
      : undefined;
    message.heroModel = (object.heroModel !== undefined && object.heroModel !== null)
      ? CMsgShowcaseItemHero.fromPartial(object.heroModel)
      : undefined;
    message.playerMatch = (object.playerMatch !== undefined && object.playerMatch !== null)
      ? CMsgShowcaseItemPlayerMatch.fromPartial(object.playerMatch)
      : undefined;
    message.chatWheel = (object.chatWheel !== undefined && object.chatWheel !== null)
      ? CMsgShowcaseItemChatWheel.fromPartial(object.chatWheel)
      : undefined;
    message.spray = (object.spray !== undefined && object.spray !== null)
      ? CMsgShowcaseItemChatWheel.fromPartial(object.spray)
      : undefined;
    message.emoticon = (object.emoticon !== undefined && object.emoticon !== null)
      ? CMsgShowcaseItemEmoticon.fromPartial(object.emoticon)
      : undefined;
    message.courier = (object.courier !== undefined && object.courier !== null)
      ? CMsgShowcaseItemEconItem.fromPartial(object.courier)
      : undefined;
    message.ward = (object.ward !== undefined && object.ward !== null)
      ? CMsgShowcaseItemEconItem.fromPartial(object.ward)
      : undefined;
    message.heroIcon = (object.heroIcon !== undefined && object.heroIcon !== null)
      ? CMsgShowcaseItemHeroIcon.fromPartial(object.heroIcon)
      : undefined;
    message.spiderGraph = (object.spiderGraph !== undefined && object.spiderGraph !== null)
      ? CMsgShowcaseItemSpiderGraph.fromPartial(object.spiderGraph)
      : undefined;
    message.userFeed = (object.userFeed !== undefined && object.userFeed !== null)
      ? CMsgShowcaseItemUserFeed.fromPartial(object.userFeed)
      : undefined;
    message.stat = (object.stat !== undefined && object.stat !== null)
      ? CMsgShowcaseItemStat.fromPartial(object.stat)
      : undefined;
    message.roshan = (object.roshan !== undefined && object.roshan !== null)
      ? CMsgShowcaseItemEconItem.fromPartial(object.roshan)
      : undefined;
    message.creep = (object.creep !== undefined && object.creep !== null)
      ? CMsgShowcaseItemEconItem.fromPartial(object.creep)
      : undefined;
    message.tower = (object.tower !== undefined && object.tower !== null)
      ? CMsgShowcaseItemEconItem.fromPartial(object.tower)
      : undefined;
    message.effigy = (object.effigy !== undefined && object.effigy !== null)
      ? CMsgShowcaseItemEconItem.fromPartial(object.effigy)
      : undefined;
    message.decoration = (object.decoration !== undefined && object.decoration !== null)
      ? CMsgShowcaseItemEconItem.fromPartial(object.decoration)
      : undefined;
    message.background = (object.background !== undefined && object.background !== null)
      ? CMsgShowcaseBackground.fromPartial(object.background)
      : undefined;
    return message;
  },
};

function createBaseCMsgShowcaseItemPosition(): CMsgShowcaseItemPosition {
  return {
    positionX: 0,
    positionY: 0,
    scale: 0,
    width: 0,
    height: 0,
    rotation: 0,
    parentId: 0,
    parentAttachmentPointId: 0,
    attachmentAnchorX: 0,
    attachmentAnchorY: 0,
  };
}

export const CMsgShowcaseItemPosition = {
  encode(message: CMsgShowcaseItemPosition, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.positionX !== undefined && message.positionX !== 0) {
      writer.uint32(8).int32(message.positionX);
    }
    if (message.positionY !== undefined && message.positionY !== 0) {
      writer.uint32(16).int32(message.positionY);
    }
    if (message.scale !== undefined && message.scale !== 0) {
      writer.uint32(24).uint32(message.scale);
    }
    if (message.width !== undefined && message.width !== 0) {
      writer.uint32(32).uint32(message.width);
    }
    if (message.height !== undefined && message.height !== 0) {
      writer.uint32(40).uint32(message.height);
    }
    if (message.rotation !== undefined && message.rotation !== 0) {
      writer.uint32(48).uint32(message.rotation);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      writer.uint32(56).uint32(message.parentId);
    }
    if (message.parentAttachmentPointId !== undefined && message.parentAttachmentPointId !== 0) {
      writer.uint32(64).uint32(message.parentAttachmentPointId);
    }
    if (message.attachmentAnchorX !== undefined && message.attachmentAnchorX !== 0) {
      writer.uint32(72).uint32(message.attachmentAnchorX);
    }
    if (message.attachmentAnchorY !== undefined && message.attachmentAnchorY !== 0) {
      writer.uint32(80).uint32(message.attachmentAnchorY);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItemPosition {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItemPosition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.positionX = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.positionY = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.scale = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.width = reader.uint32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.height = reader.uint32();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.rotation = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.parentId = reader.uint32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.parentAttachmentPointId = reader.uint32();
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.attachmentAnchorX = reader.uint32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.attachmentAnchorY = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItemPosition {
    return {
      positionX: isSet(object.positionX) ? globalThis.Number(object.positionX) : 0,
      positionY: isSet(object.positionY) ? globalThis.Number(object.positionY) : 0,
      scale: isSet(object.scale) ? globalThis.Number(object.scale) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      rotation: isSet(object.rotation) ? globalThis.Number(object.rotation) : 0,
      parentId: isSet(object.parentId) ? globalThis.Number(object.parentId) : 0,
      parentAttachmentPointId: isSet(object.parentAttachmentPointId)
        ? globalThis.Number(object.parentAttachmentPointId)
        : 0,
      attachmentAnchorX: isSet(object.attachmentAnchorX) ? globalThis.Number(object.attachmentAnchorX) : 0,
      attachmentAnchorY: isSet(object.attachmentAnchorY) ? globalThis.Number(object.attachmentAnchorY) : 0,
    };
  },

  toJSON(message: CMsgShowcaseItemPosition): unknown {
    const obj: any = {};
    if (message.positionX !== undefined && message.positionX !== 0) {
      obj.positionX = Math.round(message.positionX);
    }
    if (message.positionY !== undefined && message.positionY !== 0) {
      obj.positionY = Math.round(message.positionY);
    }
    if (message.scale !== undefined && message.scale !== 0) {
      obj.scale = Math.round(message.scale);
    }
    if (message.width !== undefined && message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== undefined && message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.rotation !== undefined && message.rotation !== 0) {
      obj.rotation = Math.round(message.rotation);
    }
    if (message.parentId !== undefined && message.parentId !== 0) {
      obj.parentId = Math.round(message.parentId);
    }
    if (message.parentAttachmentPointId !== undefined && message.parentAttachmentPointId !== 0) {
      obj.parentAttachmentPointId = Math.round(message.parentAttachmentPointId);
    }
    if (message.attachmentAnchorX !== undefined && message.attachmentAnchorX !== 0) {
      obj.attachmentAnchorX = Math.round(message.attachmentAnchorX);
    }
    if (message.attachmentAnchorY !== undefined && message.attachmentAnchorY !== 0) {
      obj.attachmentAnchorY = Math.round(message.attachmentAnchorY);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItemPosition>): CMsgShowcaseItemPosition {
    return CMsgShowcaseItemPosition.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItemPosition>): CMsgShowcaseItemPosition {
    const message = createBaseCMsgShowcaseItemPosition();
    message.positionX = object.positionX ?? 0;
    message.positionY = object.positionY ?? 0;
    message.scale = object.scale ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.rotation = object.rotation ?? 0;
    message.parentId = object.parentId ?? 0;
    message.parentAttachmentPointId = object.parentAttachmentPointId ?? 0;
    message.attachmentAnchorX = object.attachmentAnchorX ?? 0;
    message.attachmentAnchorY = object.attachmentAnchorY ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseItem(): CMsgShowcaseItem {
  return { showcaseItemId: 0, itemPosition: undefined, itemData: undefined, state: 0, flags: 0 };
}

export const CMsgShowcaseItem = {
  encode(message: CMsgShowcaseItem, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.showcaseItemId !== undefined && message.showcaseItemId !== 0) {
      writer.uint32(8).uint32(message.showcaseItemId);
    }
    if (message.itemPosition !== undefined) {
      CMsgShowcaseItemPosition.encode(message.itemPosition, writer.uint32(18).fork()).ldelim();
    }
    if (message.itemData !== undefined) {
      CMsgShowcaseItemData.encode(message.itemData, writer.uint32(26).fork()).ldelim();
    }
    if (message.state !== undefined && message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    if (message.flags !== undefined && message.flags !== 0) {
      writer.uint32(40).uint32(message.flags);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseItem {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.showcaseItemId = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.itemPosition = CMsgShowcaseItemPosition.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.itemData = CMsgShowcaseItemData.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.flags = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseItem {
    return {
      showcaseItemId: isSet(object.showcaseItemId) ? globalThis.Number(object.showcaseItemId) : 0,
      itemPosition: isSet(object.itemPosition) ? CMsgShowcaseItemPosition.fromJSON(object.itemPosition) : undefined,
      itemData: isSet(object.itemData) ? CMsgShowcaseItemData.fromJSON(object.itemData) : undefined,
      state: isSet(object.state) ? eShowcaseItemStateFromJSON(object.state) : 0,
      flags: isSet(object.flags) ? globalThis.Number(object.flags) : 0,
    };
  },

  toJSON(message: CMsgShowcaseItem): unknown {
    const obj: any = {};
    if (message.showcaseItemId !== undefined && message.showcaseItemId !== 0) {
      obj.showcaseItemId = Math.round(message.showcaseItemId);
    }
    if (message.itemPosition !== undefined) {
      obj.itemPosition = CMsgShowcaseItemPosition.toJSON(message.itemPosition);
    }
    if (message.itemData !== undefined) {
      obj.itemData = CMsgShowcaseItemData.toJSON(message.itemData);
    }
    if (message.state !== undefined && message.state !== 0) {
      obj.state = eShowcaseItemStateToJSON(message.state);
    }
    if (message.flags !== undefined && message.flags !== 0) {
      obj.flags = Math.round(message.flags);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseItem>): CMsgShowcaseItem {
    return CMsgShowcaseItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseItem>): CMsgShowcaseItem {
    const message = createBaseCMsgShowcaseItem();
    message.showcaseItemId = object.showcaseItemId ?? 0;
    message.itemPosition = (object.itemPosition !== undefined && object.itemPosition !== null)
      ? CMsgShowcaseItemPosition.fromPartial(object.itemPosition)
      : undefined;
    message.itemData = (object.itemData !== undefined && object.itemData !== null)
      ? CMsgShowcaseItemData.fromPartial(object.itemData)
      : undefined;
    message.state = object.state ?? 0;
    message.flags = object.flags ?? 0;
    return message;
  },
};

function createBaseCMsgShowcase(): CMsgShowcase {
  return { showcaseItems: [], background: undefined, moderationState: 0 };
}

export const CMsgShowcase = {
  encode(message: CMsgShowcase, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.showcaseItems) {
      CMsgShowcaseItem.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.background !== undefined) {
      CMsgShowcaseItem.encode(message.background, writer.uint32(26).fork()).ldelim();
    }
    if (message.moderationState !== undefined && message.moderationState !== 0) {
      writer.uint32(32).int32(message.moderationState);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcase {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.showcaseItems.push(CMsgShowcaseItem.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.background = CMsgShowcaseItem.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.moderationState = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcase {
    return {
      showcaseItems: globalThis.Array.isArray(object?.showcaseItems)
        ? object.showcaseItems.map((e: any) => CMsgShowcaseItem.fromJSON(e))
        : [],
      background: isSet(object.background) ? CMsgShowcaseItem.fromJSON(object.background) : undefined,
      moderationState: isSet(object.moderationState)
        ? cMsgShowcase_EModerationStateFromJSON(object.moderationState)
        : 0,
    };
  },

  toJSON(message: CMsgShowcase): unknown {
    const obj: any = {};
    if (message.showcaseItems?.length) {
      obj.showcaseItems = message.showcaseItems.map((e) => CMsgShowcaseItem.toJSON(e));
    }
    if (message.background !== undefined) {
      obj.background = CMsgShowcaseItem.toJSON(message.background);
    }
    if (message.moderationState !== undefined && message.moderationState !== 0) {
      obj.moderationState = cMsgShowcase_EModerationStateToJSON(message.moderationState);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcase>): CMsgShowcase {
    return CMsgShowcase.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcase>): CMsgShowcase {
    const message = createBaseCMsgShowcase();
    message.showcaseItems = object.showcaseItems?.map((e) => CMsgShowcaseItem.fromPartial(e)) || [];
    message.background = (object.background !== undefined && object.background !== null)
      ? CMsgShowcaseItem.fromPartial(object.background)
      : undefined;
    message.moderationState = object.moderationState ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseGetUserData(): CMsgClientToGCShowcaseGetUserData {
  return { accountId: 0, showcaseType: 0 };
}

export const CMsgClientToGCShowcaseGetUserData = {
  encode(message: CMsgClientToGCShowcaseGetUserData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.accountId !== undefined && message.accountId !== 0) {
      writer.uint32(8).uint32(message.accountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      writer.uint32(16).int32(message.showcaseType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseGetUserData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseGetUserData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.accountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.showcaseType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseGetUserData {
    return {
      accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
      showcaseType: isSet(object.showcaseType) ? eShowcaseTypeFromJSON(object.showcaseType) : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseGetUserData): unknown {
    const obj: any = {};
    if (message.accountId !== undefined && message.accountId !== 0) {
      obj.accountId = Math.round(message.accountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      obj.showcaseType = eShowcaseTypeToJSON(message.showcaseType);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseGetUserData>): CMsgClientToGCShowcaseGetUserData {
    return CMsgClientToGCShowcaseGetUserData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCShowcaseGetUserData>): CMsgClientToGCShowcaseGetUserData {
    const message = createBaseCMsgClientToGCShowcaseGetUserData();
    message.accountId = object.accountId ?? 0;
    message.showcaseType = object.showcaseType ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseGetUserDataResponse(): CMsgClientToGCShowcaseGetUserDataResponse {
  return { response: 0, showcase: undefined };
}

export const CMsgClientToGCShowcaseGetUserDataResponse = {
  encode(message: CMsgClientToGCShowcaseGetUserDataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.showcase !== undefined) {
      CMsgShowcase.encode(message.showcase, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseGetUserDataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseGetUserDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.showcase = CMsgShowcase.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseGetUserDataResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCShowcaseGetUserDataResponse_EResponseFromJSON(object.response)
        : 0,
      showcase: isSet(object.showcase) ? CMsgShowcase.fromJSON(object.showcase) : undefined,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseGetUserDataResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCShowcaseGetUserDataResponse_EResponseToJSON(message.response);
    }
    if (message.showcase !== undefined) {
      obj.showcase = CMsgShowcase.toJSON(message.showcase);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseGetUserDataResponse>): CMsgClientToGCShowcaseGetUserDataResponse {
    return CMsgClientToGCShowcaseGetUserDataResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseGetUserDataResponse>,
  ): CMsgClientToGCShowcaseGetUserDataResponse {
    const message = createBaseCMsgClientToGCShowcaseGetUserDataResponse();
    message.response = object.response ?? 0;
    message.showcase = (object.showcase !== undefined && object.showcase !== null)
      ? CMsgShowcase.fromPartial(object.showcase)
      : undefined;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseSetUserData(): CMsgClientToGCShowcaseSetUserData {
  return { showcaseType: 0, showcase: undefined, formatVersion: 0 };
}

export const CMsgClientToGCShowcaseSetUserData = {
  encode(message: CMsgClientToGCShowcaseSetUserData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      writer.uint32(8).int32(message.showcaseType);
    }
    if (message.showcase !== undefined) {
      CMsgShowcase.encode(message.showcase, writer.uint32(18).fork()).ldelim();
    }
    if (message.formatVersion !== undefined && message.formatVersion !== 0) {
      writer.uint32(24).uint32(message.formatVersion);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseSetUserData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseSetUserData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.showcaseType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.showcase = CMsgShowcase.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.formatVersion = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseSetUserData {
    return {
      showcaseType: isSet(object.showcaseType) ? eShowcaseTypeFromJSON(object.showcaseType) : 0,
      showcase: isSet(object.showcase) ? CMsgShowcase.fromJSON(object.showcase) : undefined,
      formatVersion: isSet(object.formatVersion) ? globalThis.Number(object.formatVersion) : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseSetUserData): unknown {
    const obj: any = {};
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      obj.showcaseType = eShowcaseTypeToJSON(message.showcaseType);
    }
    if (message.showcase !== undefined) {
      obj.showcase = CMsgShowcase.toJSON(message.showcase);
    }
    if (message.formatVersion !== undefined && message.formatVersion !== 0) {
      obj.formatVersion = Math.round(message.formatVersion);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseSetUserData>): CMsgClientToGCShowcaseSetUserData {
    return CMsgClientToGCShowcaseSetUserData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCShowcaseSetUserData>): CMsgClientToGCShowcaseSetUserData {
    const message = createBaseCMsgClientToGCShowcaseSetUserData();
    message.showcaseType = object.showcaseType ?? 0;
    message.showcase = (object.showcase !== undefined && object.showcase !== null)
      ? CMsgShowcase.fromPartial(object.showcase)
      : undefined;
    message.formatVersion = object.formatVersion ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseSetUserDataResponse(): CMsgClientToGCShowcaseSetUserDataResponse {
  return { response: 0, validatedShowcase: undefined, lockedUntilTimestamp: 0 };
}

export const CMsgClientToGCShowcaseSetUserDataResponse = {
  encode(message: CMsgClientToGCShowcaseSetUserDataResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.validatedShowcase !== undefined) {
      CMsgShowcase.encode(message.validatedShowcase, writer.uint32(18).fork()).ldelim();
    }
    if (message.lockedUntilTimestamp !== undefined && message.lockedUntilTimestamp !== 0) {
      writer.uint32(24).uint32(message.lockedUntilTimestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseSetUserDataResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseSetUserDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validatedShowcase = CMsgShowcase.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.lockedUntilTimestamp = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseSetUserDataResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCShowcaseSetUserDataResponse_EResponseFromJSON(object.response)
        : 0,
      validatedShowcase: isSet(object.validatedShowcase) ? CMsgShowcase.fromJSON(object.validatedShowcase) : undefined,
      lockedUntilTimestamp: isSet(object.lockedUntilTimestamp) ? globalThis.Number(object.lockedUntilTimestamp) : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseSetUserDataResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCShowcaseSetUserDataResponse_EResponseToJSON(message.response);
    }
    if (message.validatedShowcase !== undefined) {
      obj.validatedShowcase = CMsgShowcase.toJSON(message.validatedShowcase);
    }
    if (message.lockedUntilTimestamp !== undefined && message.lockedUntilTimestamp !== 0) {
      obj.lockedUntilTimestamp = Math.round(message.lockedUntilTimestamp);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseSetUserDataResponse>): CMsgClientToGCShowcaseSetUserDataResponse {
    return CMsgClientToGCShowcaseSetUserDataResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseSetUserDataResponse>,
  ): CMsgClientToGCShowcaseSetUserDataResponse {
    const message = createBaseCMsgClientToGCShowcaseSetUserDataResponse();
    message.response = object.response ?? 0;
    message.validatedShowcase = (object.validatedShowcase !== undefined && object.validatedShowcase !== null)
      ? CMsgShowcase.fromPartial(object.validatedShowcase)
      : undefined;
    message.lockedUntilTimestamp = object.lockedUntilTimestamp ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseSubmitReport(): CMsgClientToGCShowcaseSubmitReport {
  return { targetAccountId: 0, showcaseType: 0, reportComment: "" };
}

export const CMsgClientToGCShowcaseSubmitReport = {
  encode(message: CMsgClientToGCShowcaseSubmitReport, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetAccountId !== undefined && message.targetAccountId !== 0) {
      writer.uint32(8).uint32(message.targetAccountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      writer.uint32(16).int32(message.showcaseType);
    }
    if (message.reportComment !== undefined && message.reportComment !== "") {
      writer.uint32(26).string(message.reportComment);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseSubmitReport {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseSubmitReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.targetAccountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.showcaseType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reportComment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseSubmitReport {
    return {
      targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
      showcaseType: isSet(object.showcaseType) ? eShowcaseTypeFromJSON(object.showcaseType) : 0,
      reportComment: isSet(object.reportComment) ? globalThis.String(object.reportComment) : "",
    };
  },

  toJSON(message: CMsgClientToGCShowcaseSubmitReport): unknown {
    const obj: any = {};
    if (message.targetAccountId !== undefined && message.targetAccountId !== 0) {
      obj.targetAccountId = Math.round(message.targetAccountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      obj.showcaseType = eShowcaseTypeToJSON(message.showcaseType);
    }
    if (message.reportComment !== undefined && message.reportComment !== "") {
      obj.reportComment = message.reportComment;
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseSubmitReport>): CMsgClientToGCShowcaseSubmitReport {
    return CMsgClientToGCShowcaseSubmitReport.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCShowcaseSubmitReport>): CMsgClientToGCShowcaseSubmitReport {
    const message = createBaseCMsgClientToGCShowcaseSubmitReport();
    message.targetAccountId = object.targetAccountId ?? 0;
    message.showcaseType = object.showcaseType ?? 0;
    message.reportComment = object.reportComment ?? "";
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseSubmitReportResponse(): CMsgClientToGCShowcaseSubmitReportResponse {
  return { response: 0 };
}

export const CMsgClientToGCShowcaseSubmitReportResponse = {
  encode(message: CMsgClientToGCShowcaseSubmitReportResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseSubmitReportResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseSubmitReportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseSubmitReportResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCShowcaseSubmitReportResponse_EResponseFromJSON(object.response)
        : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseSubmitReportResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCShowcaseSubmitReportResponse_EResponseToJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseSubmitReportResponse>): CMsgClientToGCShowcaseSubmitReportResponse {
    return CMsgClientToGCShowcaseSubmitReportResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseSubmitReportResponse>,
  ): CMsgClientToGCShowcaseSubmitReportResponse {
    const message = createBaseCMsgClientToGCShowcaseSubmitReportResponse();
    message.response = object.response ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseReportsRollupInfo(): CMsgShowcaseReportsRollupInfo {
  return { rollupId: 0, startTimestamp: 0, endTimestamp: 0 };
}

export const CMsgShowcaseReportsRollupInfo = {
  encode(message: CMsgShowcaseReportsRollupInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.rollupId !== undefined && message.rollupId !== 0) {
      writer.uint32(8).uint32(message.rollupId);
    }
    if (message.startTimestamp !== undefined && message.startTimestamp !== 0) {
      writer.uint32(16).uint32(message.startTimestamp);
    }
    if (message.endTimestamp !== undefined && message.endTimestamp !== 0) {
      writer.uint32(24).uint32(message.endTimestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseReportsRollupInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseReportsRollupInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.rollupId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.startTimestamp = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.endTimestamp = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseReportsRollupInfo {
    return {
      rollupId: isSet(object.rollupId) ? globalThis.Number(object.rollupId) : 0,
      startTimestamp: isSet(object.startTimestamp) ? globalThis.Number(object.startTimestamp) : 0,
      endTimestamp: isSet(object.endTimestamp) ? globalThis.Number(object.endTimestamp) : 0,
    };
  },

  toJSON(message: CMsgShowcaseReportsRollupInfo): unknown {
    const obj: any = {};
    if (message.rollupId !== undefined && message.rollupId !== 0) {
      obj.rollupId = Math.round(message.rollupId);
    }
    if (message.startTimestamp !== undefined && message.startTimestamp !== 0) {
      obj.startTimestamp = Math.round(message.startTimestamp);
    }
    if (message.endTimestamp !== undefined && message.endTimestamp !== 0) {
      obj.endTimestamp = Math.round(message.endTimestamp);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseReportsRollupInfo>): CMsgShowcaseReportsRollupInfo {
    return CMsgShowcaseReportsRollupInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseReportsRollupInfo>): CMsgShowcaseReportsRollupInfo {
    const message = createBaseCMsgShowcaseReportsRollupInfo();
    message.rollupId = object.rollupId ?? 0;
    message.startTimestamp = object.startTimestamp ?? 0;
    message.endTimestamp = object.endTimestamp ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseReportsRollupList(): CMsgShowcaseReportsRollupList {
  return { rollups: [] };
}

export const CMsgShowcaseReportsRollupList = {
  encode(message: CMsgShowcaseReportsRollupList, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.rollups) {
      CMsgShowcaseReportsRollupInfo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseReportsRollupList {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseReportsRollupList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rollups.push(CMsgShowcaseReportsRollupInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseReportsRollupList {
    return {
      rollups: globalThis.Array.isArray(object?.rollups)
        ? object.rollups.map((e: any) => CMsgShowcaseReportsRollupInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgShowcaseReportsRollupList): unknown {
    const obj: any = {};
    if (message.rollups?.length) {
      obj.rollups = message.rollups.map((e) => CMsgShowcaseReportsRollupInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseReportsRollupList>): CMsgShowcaseReportsRollupList {
    return CMsgShowcaseReportsRollupList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseReportsRollupList>): CMsgShowcaseReportsRollupList {
    const message = createBaseCMsgShowcaseReportsRollupList();
    message.rollups = object.rollups?.map((e) => CMsgShowcaseReportsRollupInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgShowcaseReportsRollupEntry(): CMsgShowcaseReportsRollupEntry {
  return { accountId: 0, showcaseType: 0, reportCount: 0 };
}

export const CMsgShowcaseReportsRollupEntry = {
  encode(message: CMsgShowcaseReportsRollupEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.accountId !== undefined && message.accountId !== 0) {
      writer.uint32(8).uint32(message.accountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      writer.uint32(16).int32(message.showcaseType);
    }
    if (message.reportCount !== undefined && message.reportCount !== 0) {
      writer.uint32(24).uint32(message.reportCount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseReportsRollupEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseReportsRollupEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.accountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.showcaseType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.reportCount = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseReportsRollupEntry {
    return {
      accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
      showcaseType: isSet(object.showcaseType) ? eShowcaseTypeFromJSON(object.showcaseType) : 0,
      reportCount: isSet(object.reportCount) ? globalThis.Number(object.reportCount) : 0,
    };
  },

  toJSON(message: CMsgShowcaseReportsRollupEntry): unknown {
    const obj: any = {};
    if (message.accountId !== undefined && message.accountId !== 0) {
      obj.accountId = Math.round(message.accountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      obj.showcaseType = eShowcaseTypeToJSON(message.showcaseType);
    }
    if (message.reportCount !== undefined && message.reportCount !== 0) {
      obj.reportCount = Math.round(message.reportCount);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseReportsRollupEntry>): CMsgShowcaseReportsRollupEntry {
    return CMsgShowcaseReportsRollupEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseReportsRollupEntry>): CMsgShowcaseReportsRollupEntry {
    const message = createBaseCMsgShowcaseReportsRollupEntry();
    message.accountId = object.accountId ?? 0;
    message.showcaseType = object.showcaseType ?? 0;
    message.reportCount = object.reportCount ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseReportsRollup(): CMsgShowcaseReportsRollup {
  return { rollupInfo: undefined, rollupEntries: [] };
}

export const CMsgShowcaseReportsRollup = {
  encode(message: CMsgShowcaseReportsRollup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.rollupInfo !== undefined) {
      CMsgShowcaseReportsRollupInfo.encode(message.rollupInfo, writer.uint32(10).fork()).ldelim();
    }
    for (const v of message.rollupEntries) {
      CMsgShowcaseReportsRollupEntry.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseReportsRollup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseReportsRollup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.rollupInfo = CMsgShowcaseReportsRollupInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rollupEntries.push(CMsgShowcaseReportsRollupEntry.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseReportsRollup {
    return {
      rollupInfo: isSet(object.rollupInfo) ? CMsgShowcaseReportsRollupInfo.fromJSON(object.rollupInfo) : undefined,
      rollupEntries: globalThis.Array.isArray(object?.rollupEntries)
        ? object.rollupEntries.map((e: any) => CMsgShowcaseReportsRollupEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgShowcaseReportsRollup): unknown {
    const obj: any = {};
    if (message.rollupInfo !== undefined) {
      obj.rollupInfo = CMsgShowcaseReportsRollupInfo.toJSON(message.rollupInfo);
    }
    if (message.rollupEntries?.length) {
      obj.rollupEntries = message.rollupEntries.map((e) => CMsgShowcaseReportsRollupEntry.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseReportsRollup>): CMsgShowcaseReportsRollup {
    return CMsgShowcaseReportsRollup.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseReportsRollup>): CMsgShowcaseReportsRollup {
    const message = createBaseCMsgShowcaseReportsRollup();
    message.rollupInfo = (object.rollupInfo !== undefined && object.rollupInfo !== null)
      ? CMsgShowcaseReportsRollupInfo.fromPartial(object.rollupInfo)
      : undefined;
    message.rollupEntries = object.rollupEntries?.map((e) => CMsgShowcaseReportsRollupEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminGetReportsRollupList(): CMsgClientToGCShowcaseAdminGetReportsRollupList {
  return {};
}

export const CMsgClientToGCShowcaseAdminGetReportsRollupList = {
  encode(_: CMsgClientToGCShowcaseAdminGetReportsRollupList, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminGetReportsRollupList {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminGetReportsRollupList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CMsgClientToGCShowcaseAdminGetReportsRollupList {
    return {};
  },

  toJSON(_: CMsgClientToGCShowcaseAdminGetReportsRollupList): unknown {
    const obj: any = {};
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCShowcaseAdminGetReportsRollupList>,
  ): CMsgClientToGCShowcaseAdminGetReportsRollupList {
    return CMsgClientToGCShowcaseAdminGetReportsRollupList.fromPartial(base ?? {});
  },
  fromPartial(
    _: DeepPartial<CMsgClientToGCShowcaseAdminGetReportsRollupList>,
  ): CMsgClientToGCShowcaseAdminGetReportsRollupList {
    const message = createBaseCMsgClientToGCShowcaseAdminGetReportsRollupList();
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminGetReportsRollupListResponse(): CMsgClientToGCShowcaseAdminGetReportsRollupListResponse {
  return { response: 0, rollupList: undefined };
}

export const CMsgClientToGCShowcaseAdminGetReportsRollupListResponse = {
  encode(
    message: CMsgClientToGCShowcaseAdminGetReportsRollupListResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.rollupList !== undefined) {
      CMsgShowcaseReportsRollupList.encode(message.rollupList, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminGetReportsRollupListResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminGetReportsRollupListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rollupList = CMsgShowcaseReportsRollupList.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminGetReportsRollupListResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponseFromJSON(object.response)
        : 0,
      rollupList: isSet(object.rollupList) ? CMsgShowcaseReportsRollupList.fromJSON(object.rollupList) : undefined,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminGetReportsRollupListResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCShowcaseAdminGetReportsRollupListResponse_EResponseToJSON(message.response);
    }
    if (message.rollupList !== undefined) {
      obj.rollupList = CMsgShowcaseReportsRollupList.toJSON(message.rollupList);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCShowcaseAdminGetReportsRollupListResponse>,
  ): CMsgClientToGCShowcaseAdminGetReportsRollupListResponse {
    return CMsgClientToGCShowcaseAdminGetReportsRollupListResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseAdminGetReportsRollupListResponse>,
  ): CMsgClientToGCShowcaseAdminGetReportsRollupListResponse {
    const message = createBaseCMsgClientToGCShowcaseAdminGetReportsRollupListResponse();
    message.response = object.response ?? 0;
    message.rollupList = (object.rollupList !== undefined && object.rollupList !== null)
      ? CMsgShowcaseReportsRollupList.fromPartial(object.rollupList)
      : undefined;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminGetReportsRollup(): CMsgClientToGCShowcaseAdminGetReportsRollup {
  return { rollupId: 0 };
}

export const CMsgClientToGCShowcaseAdminGetReportsRollup = {
  encode(message: CMsgClientToGCShowcaseAdminGetReportsRollup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.rollupId !== undefined && message.rollupId !== 0) {
      writer.uint32(8).uint32(message.rollupId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminGetReportsRollup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminGetReportsRollup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.rollupId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminGetReportsRollup {
    return { rollupId: isSet(object.rollupId) ? globalThis.Number(object.rollupId) : 0 };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminGetReportsRollup): unknown {
    const obj: any = {};
    if (message.rollupId !== undefined && message.rollupId !== 0) {
      obj.rollupId = Math.round(message.rollupId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseAdminGetReportsRollup>): CMsgClientToGCShowcaseAdminGetReportsRollup {
    return CMsgClientToGCShowcaseAdminGetReportsRollup.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseAdminGetReportsRollup>,
  ): CMsgClientToGCShowcaseAdminGetReportsRollup {
    const message = createBaseCMsgClientToGCShowcaseAdminGetReportsRollup();
    message.rollupId = object.rollupId ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminGetReportsRollupResponse(): CMsgClientToGCShowcaseAdminGetReportsRollupResponse {
  return { response: 0, rollup: undefined };
}

export const CMsgClientToGCShowcaseAdminGetReportsRollupResponse = {
  encode(
    message: CMsgClientToGCShowcaseAdminGetReportsRollupResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.rollup !== undefined) {
      CMsgShowcaseReportsRollup.encode(message.rollup, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminGetReportsRollupResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminGetReportsRollupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.rollup = CMsgShowcaseReportsRollup.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminGetReportsRollupResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponseFromJSON(object.response)
        : 0,
      rollup: isSet(object.rollup) ? CMsgShowcaseReportsRollup.fromJSON(object.rollup) : undefined,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminGetReportsRollupResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCShowcaseAdminGetReportsRollupResponse_EResponseToJSON(message.response);
    }
    if (message.rollup !== undefined) {
      obj.rollup = CMsgShowcaseReportsRollup.toJSON(message.rollup);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCShowcaseAdminGetReportsRollupResponse>,
  ): CMsgClientToGCShowcaseAdminGetReportsRollupResponse {
    return CMsgClientToGCShowcaseAdminGetReportsRollupResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseAdminGetReportsRollupResponse>,
  ): CMsgClientToGCShowcaseAdminGetReportsRollupResponse {
    const message = createBaseCMsgClientToGCShowcaseAdminGetReportsRollupResponse();
    message.response = object.response ?? 0;
    message.rollup = (object.rollup !== undefined && object.rollup !== null)
      ? CMsgShowcaseReportsRollup.fromPartial(object.rollup)
      : undefined;
    return message;
  },
};

function createBaseCMsgShowcaseAuditEntry(): CMsgShowcaseAuditEntry {
  return { showcaseType: 0, auditAction: 0, auditData: "0", timestamp: 0 };
}

export const CMsgShowcaseAuditEntry = {
  encode(message: CMsgShowcaseAuditEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      writer.uint32(8).int32(message.showcaseType);
    }
    if (message.auditAction !== undefined && message.auditAction !== 0) {
      writer.uint32(16).int32(message.auditAction);
    }
    if (message.auditData !== undefined && message.auditData !== "0") {
      writer.uint32(24).uint64(message.auditData);
    }
    if (message.timestamp !== undefined && message.timestamp !== 0) {
      writer.uint32(32).uint32(message.timestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseAuditEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseAuditEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.showcaseType = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.auditAction = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.auditData = longToString(reader.uint64() as Long);
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.timestamp = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseAuditEntry {
    return {
      showcaseType: isSet(object.showcaseType) ? eShowcaseTypeFromJSON(object.showcaseType) : 0,
      auditAction: isSet(object.auditAction) ? eShowcaseAuditActionFromJSON(object.auditAction) : 0,
      auditData: isSet(object.auditData) ? globalThis.String(object.auditData) : "0",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: CMsgShowcaseAuditEntry): unknown {
    const obj: any = {};
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      obj.showcaseType = eShowcaseTypeToJSON(message.showcaseType);
    }
    if (message.auditAction !== undefined && message.auditAction !== 0) {
      obj.auditAction = eShowcaseAuditActionToJSON(message.auditAction);
    }
    if (message.auditData !== undefined && message.auditData !== "0") {
      obj.auditData = message.auditData;
    }
    if (message.timestamp !== undefined && message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseAuditEntry>): CMsgShowcaseAuditEntry {
    return CMsgShowcaseAuditEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseAuditEntry>): CMsgShowcaseAuditEntry {
    const message = createBaseCMsgShowcaseAuditEntry();
    message.showcaseType = object.showcaseType ?? 0;
    message.auditAction = object.auditAction ?? 0;
    message.auditData = object.auditData ?? "0";
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseReport(): CMsgShowcaseReport {
  return { reporterAccountId: 0, showcaseType: 0, reportTimestamp: 0, reportComment: "" };
}

export const CMsgShowcaseReport = {
  encode(message: CMsgShowcaseReport, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.reporterAccountId !== undefined && message.reporterAccountId !== 0) {
      writer.uint32(8).uint32(message.reporterAccountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      writer.uint32(16).int32(message.showcaseType);
    }
    if (message.reportTimestamp !== undefined && message.reportTimestamp !== 0) {
      writer.uint32(24).uint32(message.reportTimestamp);
    }
    if (message.reportComment !== undefined && message.reportComment !== "") {
      writer.uint32(34).string(message.reportComment);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseReport {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.reporterAccountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.showcaseType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.reportTimestamp = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.reportComment = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseReport {
    return {
      reporterAccountId: isSet(object.reporterAccountId) ? globalThis.Number(object.reporterAccountId) : 0,
      showcaseType: isSet(object.showcaseType) ? eShowcaseTypeFromJSON(object.showcaseType) : 0,
      reportTimestamp: isSet(object.reportTimestamp) ? globalThis.Number(object.reportTimestamp) : 0,
      reportComment: isSet(object.reportComment) ? globalThis.String(object.reportComment) : "",
    };
  },

  toJSON(message: CMsgShowcaseReport): unknown {
    const obj: any = {};
    if (message.reporterAccountId !== undefined && message.reporterAccountId !== 0) {
      obj.reporterAccountId = Math.round(message.reporterAccountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      obj.showcaseType = eShowcaseTypeToJSON(message.showcaseType);
    }
    if (message.reportTimestamp !== undefined && message.reportTimestamp !== 0) {
      obj.reportTimestamp = Math.round(message.reportTimestamp);
    }
    if (message.reportComment !== undefined && message.reportComment !== "") {
      obj.reportComment = message.reportComment;
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseReport>): CMsgShowcaseReport {
    return CMsgShowcaseReport.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseReport>): CMsgShowcaseReport {
    const message = createBaseCMsgShowcaseReport();
    message.reporterAccountId = object.reporterAccountId ?? 0;
    message.showcaseType = object.showcaseType ?? 0;
    message.reportTimestamp = object.reportTimestamp ?? 0;
    message.reportComment = object.reportComment ?? "";
    return message;
  },
};

function createBaseCMsgShowcaseAdminUserDetails(): CMsgShowcaseAdminUserDetails {
  return { lockedUntilTimestamp: 0, auditEntries: [], reports: [] };
}

export const CMsgShowcaseAdminUserDetails = {
  encode(message: CMsgShowcaseAdminUserDetails, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.lockedUntilTimestamp !== undefined && message.lockedUntilTimestamp !== 0) {
      writer.uint32(8).uint32(message.lockedUntilTimestamp);
    }
    for (const v of message.auditEntries) {
      CMsgShowcaseAuditEntry.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.reports) {
      CMsgShowcaseReport.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseAdminUserDetails {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseAdminUserDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.lockedUntilTimestamp = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.auditEntries.push(CMsgShowcaseAuditEntry.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.reports.push(CMsgShowcaseReport.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseAdminUserDetails {
    return {
      lockedUntilTimestamp: isSet(object.lockedUntilTimestamp) ? globalThis.Number(object.lockedUntilTimestamp) : 0,
      auditEntries: globalThis.Array.isArray(object?.auditEntries)
        ? object.auditEntries.map((e: any) => CMsgShowcaseAuditEntry.fromJSON(e))
        : [],
      reports: globalThis.Array.isArray(object?.reports)
        ? object.reports.map((e: any) => CMsgShowcaseReport.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgShowcaseAdminUserDetails): unknown {
    const obj: any = {};
    if (message.lockedUntilTimestamp !== undefined && message.lockedUntilTimestamp !== 0) {
      obj.lockedUntilTimestamp = Math.round(message.lockedUntilTimestamp);
    }
    if (message.auditEntries?.length) {
      obj.auditEntries = message.auditEntries.map((e) => CMsgShowcaseAuditEntry.toJSON(e));
    }
    if (message.reports?.length) {
      obj.reports = message.reports.map((e) => CMsgShowcaseReport.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseAdminUserDetails>): CMsgShowcaseAdminUserDetails {
    return CMsgShowcaseAdminUserDetails.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseAdminUserDetails>): CMsgShowcaseAdminUserDetails {
    const message = createBaseCMsgShowcaseAdminUserDetails();
    message.lockedUntilTimestamp = object.lockedUntilTimestamp ?? 0;
    message.auditEntries = object.auditEntries?.map((e) => CMsgShowcaseAuditEntry.fromPartial(e)) || [];
    message.reports = object.reports?.map((e) => CMsgShowcaseReport.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminGetUserDetails(): CMsgClientToGCShowcaseAdminGetUserDetails {
  return { accountId: 0 };
}

export const CMsgClientToGCShowcaseAdminGetUserDetails = {
  encode(message: CMsgClientToGCShowcaseAdminGetUserDetails, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.accountId !== undefined && message.accountId !== 0) {
      writer.uint32(8).uint32(message.accountId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminGetUserDetails {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminGetUserDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.accountId = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminGetUserDetails {
    return { accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0 };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminGetUserDetails): unknown {
    const obj: any = {};
    if (message.accountId !== undefined && message.accountId !== 0) {
      obj.accountId = Math.round(message.accountId);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseAdminGetUserDetails>): CMsgClientToGCShowcaseAdminGetUserDetails {
    return CMsgClientToGCShowcaseAdminGetUserDetails.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseAdminGetUserDetails>,
  ): CMsgClientToGCShowcaseAdminGetUserDetails {
    const message = createBaseCMsgClientToGCShowcaseAdminGetUserDetails();
    message.accountId = object.accountId ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminGetUserDetailsResponse(): CMsgClientToGCShowcaseAdminGetUserDetailsResponse {
  return { response: 0, userDetails: undefined };
}

export const CMsgClientToGCShowcaseAdminGetUserDetailsResponse = {
  encode(
    message: CMsgClientToGCShowcaseAdminGetUserDetailsResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    if (message.userDetails !== undefined) {
      CMsgShowcaseAdminUserDetails.encode(message.userDetails, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminGetUserDetailsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminGetUserDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.userDetails = CMsgShowcaseAdminUserDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminGetUserDetailsResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponseFromJSON(object.response)
        : 0,
      userDetails: isSet(object.userDetails) ? CMsgShowcaseAdminUserDetails.fromJSON(object.userDetails) : undefined,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminGetUserDetailsResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCShowcaseAdminGetUserDetailsResponse_EResponseToJSON(message.response);
    }
    if (message.userDetails !== undefined) {
      obj.userDetails = CMsgShowcaseAdminUserDetails.toJSON(message.userDetails);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCShowcaseAdminGetUserDetailsResponse>,
  ): CMsgClientToGCShowcaseAdminGetUserDetailsResponse {
    return CMsgClientToGCShowcaseAdminGetUserDetailsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseAdminGetUserDetailsResponse>,
  ): CMsgClientToGCShowcaseAdminGetUserDetailsResponse {
    const message = createBaseCMsgClientToGCShowcaseAdminGetUserDetailsResponse();
    message.response = object.response ?? 0;
    message.userDetails = (object.userDetails !== undefined && object.userDetails !== null)
      ? CMsgShowcaseAdminUserDetails.fromPartial(object.userDetails)
      : undefined;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminReset(): CMsgClientToGCShowcaseAdminReset {
  return { targetAccountId: 0, showcaseType: 0 };
}

export const CMsgClientToGCShowcaseAdminReset = {
  encode(message: CMsgClientToGCShowcaseAdminReset, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetAccountId !== undefined && message.targetAccountId !== 0) {
      writer.uint32(8).uint32(message.targetAccountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      writer.uint32(16).int32(message.showcaseType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminReset {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminReset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.targetAccountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.showcaseType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminReset {
    return {
      targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
      showcaseType: isSet(object.showcaseType) ? eShowcaseTypeFromJSON(object.showcaseType) : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminReset): unknown {
    const obj: any = {};
    if (message.targetAccountId !== undefined && message.targetAccountId !== 0) {
      obj.targetAccountId = Math.round(message.targetAccountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      obj.showcaseType = eShowcaseTypeToJSON(message.showcaseType);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseAdminReset>): CMsgClientToGCShowcaseAdminReset {
    return CMsgClientToGCShowcaseAdminReset.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCShowcaseAdminReset>): CMsgClientToGCShowcaseAdminReset {
    const message = createBaseCMsgClientToGCShowcaseAdminReset();
    message.targetAccountId = object.targetAccountId ?? 0;
    message.showcaseType = object.showcaseType ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminResetResponse(): CMsgClientToGCShowcaseAdminResetResponse {
  return { response: 0 };
}

export const CMsgClientToGCShowcaseAdminResetResponse = {
  encode(message: CMsgClientToGCShowcaseAdminResetResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminResetResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminResetResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminResetResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCShowcaseAdminResetResponse_EResponseFromJSON(object.response)
        : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminResetResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCShowcaseAdminResetResponse_EResponseToJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseAdminResetResponse>): CMsgClientToGCShowcaseAdminResetResponse {
    return CMsgClientToGCShowcaseAdminResetResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCShowcaseAdminResetResponse>): CMsgClientToGCShowcaseAdminResetResponse {
    const message = createBaseCMsgClientToGCShowcaseAdminResetResponse();
    message.response = object.response ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminLockAccount(): CMsgClientToGCShowcaseAdminLockAccount {
  return { targetAccountId: 0, lockedUntilTimestamp: 0 };
}

export const CMsgClientToGCShowcaseAdminLockAccount = {
  encode(message: CMsgClientToGCShowcaseAdminLockAccount, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetAccountId !== undefined && message.targetAccountId !== 0) {
      writer.uint32(8).uint32(message.targetAccountId);
    }
    if (message.lockedUntilTimestamp !== undefined && message.lockedUntilTimestamp !== 0) {
      writer.uint32(16).uint32(message.lockedUntilTimestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminLockAccount {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminLockAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.targetAccountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.lockedUntilTimestamp = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminLockAccount {
    return {
      targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
      lockedUntilTimestamp: isSet(object.lockedUntilTimestamp) ? globalThis.Number(object.lockedUntilTimestamp) : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminLockAccount): unknown {
    const obj: any = {};
    if (message.targetAccountId !== undefined && message.targetAccountId !== 0) {
      obj.targetAccountId = Math.round(message.targetAccountId);
    }
    if (message.lockedUntilTimestamp !== undefined && message.lockedUntilTimestamp !== 0) {
      obj.lockedUntilTimestamp = Math.round(message.lockedUntilTimestamp);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseAdminLockAccount>): CMsgClientToGCShowcaseAdminLockAccount {
    return CMsgClientToGCShowcaseAdminLockAccount.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCShowcaseAdminLockAccount>): CMsgClientToGCShowcaseAdminLockAccount {
    const message = createBaseCMsgClientToGCShowcaseAdminLockAccount();
    message.targetAccountId = object.targetAccountId ?? 0;
    message.lockedUntilTimestamp = object.lockedUntilTimestamp ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminLockAccountResponse(): CMsgClientToGCShowcaseAdminLockAccountResponse {
  return { response: 0 };
}

export const CMsgClientToGCShowcaseAdminLockAccountResponse = {
  encode(
    message: CMsgClientToGCShowcaseAdminLockAccountResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminLockAccountResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminLockAccountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminLockAccountResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCShowcaseAdminLockAccountResponse_EResponseFromJSON(object.response)
        : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminLockAccountResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCShowcaseAdminLockAccountResponse_EResponseToJSON(message.response);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCShowcaseAdminLockAccountResponse>,
  ): CMsgClientToGCShowcaseAdminLockAccountResponse {
    return CMsgClientToGCShowcaseAdminLockAccountResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseAdminLockAccountResponse>,
  ): CMsgClientToGCShowcaseAdminLockAccountResponse {
    const message = createBaseCMsgClientToGCShowcaseAdminLockAccountResponse();
    message.response = object.response ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminConvict(): CMsgClientToGCShowcaseAdminConvict {
  return { targetAccountId: 0, showcaseType: 0 };
}

export const CMsgClientToGCShowcaseAdminConvict = {
  encode(message: CMsgClientToGCShowcaseAdminConvict, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetAccountId !== undefined && message.targetAccountId !== 0) {
      writer.uint32(8).uint32(message.targetAccountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      writer.uint32(16).int32(message.showcaseType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminConvict {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminConvict();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.targetAccountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.showcaseType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminConvict {
    return {
      targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
      showcaseType: isSet(object.showcaseType) ? eShowcaseTypeFromJSON(object.showcaseType) : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminConvict): unknown {
    const obj: any = {};
    if (message.targetAccountId !== undefined && message.targetAccountId !== 0) {
      obj.targetAccountId = Math.round(message.targetAccountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      obj.showcaseType = eShowcaseTypeToJSON(message.showcaseType);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseAdminConvict>): CMsgClientToGCShowcaseAdminConvict {
    return CMsgClientToGCShowcaseAdminConvict.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCShowcaseAdminConvict>): CMsgClientToGCShowcaseAdminConvict {
    const message = createBaseCMsgClientToGCShowcaseAdminConvict();
    message.targetAccountId = object.targetAccountId ?? 0;
    message.showcaseType = object.showcaseType ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminConvictResponse(): CMsgClientToGCShowcaseAdminConvictResponse {
  return { response: 0 };
}

export const CMsgClientToGCShowcaseAdminConvictResponse = {
  encode(message: CMsgClientToGCShowcaseAdminConvictResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminConvictResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminConvictResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminConvictResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCShowcaseAdminConvictResponse_EResponseFromJSON(object.response)
        : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminConvictResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCShowcaseAdminConvictResponse_EResponseToJSON(message.response);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseAdminConvictResponse>): CMsgClientToGCShowcaseAdminConvictResponse {
    return CMsgClientToGCShowcaseAdminConvictResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseAdminConvictResponse>,
  ): CMsgClientToGCShowcaseAdminConvictResponse {
    const message = createBaseCMsgClientToGCShowcaseAdminConvictResponse();
    message.response = object.response ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminExonerate(): CMsgClientToGCShowcaseAdminExonerate {
  return { targetAccountId: 0, showcaseType: 0 };
}

export const CMsgClientToGCShowcaseAdminExonerate = {
  encode(message: CMsgClientToGCShowcaseAdminExonerate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.targetAccountId !== undefined && message.targetAccountId !== 0) {
      writer.uint32(8).uint32(message.targetAccountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      writer.uint32(16).int32(message.showcaseType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminExonerate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminExonerate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.targetAccountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.showcaseType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminExonerate {
    return {
      targetAccountId: isSet(object.targetAccountId) ? globalThis.Number(object.targetAccountId) : 0,
      showcaseType: isSet(object.showcaseType) ? eShowcaseTypeFromJSON(object.showcaseType) : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminExonerate): unknown {
    const obj: any = {};
    if (message.targetAccountId !== undefined && message.targetAccountId !== 0) {
      obj.targetAccountId = Math.round(message.targetAccountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      obj.showcaseType = eShowcaseTypeToJSON(message.showcaseType);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseAdminExonerate>): CMsgClientToGCShowcaseAdminExonerate {
    return CMsgClientToGCShowcaseAdminExonerate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCShowcaseAdminExonerate>): CMsgClientToGCShowcaseAdminExonerate {
    const message = createBaseCMsgClientToGCShowcaseAdminExonerate();
    message.targetAccountId = object.targetAccountId ?? 0;
    message.showcaseType = object.showcaseType ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseAdminExonerateResponse(): CMsgClientToGCShowcaseAdminExonerateResponse {
  return { response: 0 };
}

export const CMsgClientToGCShowcaseAdminExonerateResponse = {
  encode(message: CMsgClientToGCShowcaseAdminExonerateResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseAdminExonerateResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseAdminExonerateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseAdminExonerateResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCShowcaseAdminExonerateResponse_EResponseFromJSON(object.response)
        : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseAdminExonerateResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCShowcaseAdminExonerateResponse_EResponseToJSON(message.response);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCShowcaseAdminExonerateResponse>,
  ): CMsgClientToGCShowcaseAdminExonerateResponse {
    return CMsgClientToGCShowcaseAdminExonerateResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseAdminExonerateResponse>,
  ): CMsgClientToGCShowcaseAdminExonerateResponse {
    const message = createBaseCMsgClientToGCShowcaseAdminExonerateResponse();
    message.response = object.response ?? 0;
    return message;
  },
};

function createBaseCMsgShowcaseModerationInfo(): CMsgShowcaseModerationInfo {
  return { accountId: 0, showcaseType: 0, showcaseTimestamp: 0 };
}

export const CMsgShowcaseModerationInfo = {
  encode(message: CMsgShowcaseModerationInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.accountId !== undefined && message.accountId !== 0) {
      writer.uint32(8).uint32(message.accountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      writer.uint32(16).int32(message.showcaseType);
    }
    if (message.showcaseTimestamp !== undefined && message.showcaseTimestamp !== 0) {
      writer.uint32(24).uint32(message.showcaseTimestamp);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgShowcaseModerationInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgShowcaseModerationInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.accountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.showcaseType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.showcaseTimestamp = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgShowcaseModerationInfo {
    return {
      accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
      showcaseType: isSet(object.showcaseType) ? eShowcaseTypeFromJSON(object.showcaseType) : 0,
      showcaseTimestamp: isSet(object.showcaseTimestamp) ? globalThis.Number(object.showcaseTimestamp) : 0,
    };
  },

  toJSON(message: CMsgShowcaseModerationInfo): unknown {
    const obj: any = {};
    if (message.accountId !== undefined && message.accountId !== 0) {
      obj.accountId = Math.round(message.accountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      obj.showcaseType = eShowcaseTypeToJSON(message.showcaseType);
    }
    if (message.showcaseTimestamp !== undefined && message.showcaseTimestamp !== 0) {
      obj.showcaseTimestamp = Math.round(message.showcaseTimestamp);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgShowcaseModerationInfo>): CMsgShowcaseModerationInfo {
    return CMsgShowcaseModerationInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgShowcaseModerationInfo>): CMsgShowcaseModerationInfo {
    const message = createBaseCMsgShowcaseModerationInfo();
    message.accountId = object.accountId ?? 0;
    message.showcaseType = object.showcaseType ?? 0;
    message.showcaseTimestamp = object.showcaseTimestamp ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseModerationGetQueue(): CMsgClientToGCShowcaseModerationGetQueue {
  return { startTimestamp: 0, resultCount: 0 };
}

export const CMsgClientToGCShowcaseModerationGetQueue = {
  encode(message: CMsgClientToGCShowcaseModerationGetQueue, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.startTimestamp !== undefined && message.startTimestamp !== 0) {
      writer.uint32(8).uint32(message.startTimestamp);
    }
    if (message.resultCount !== undefined && message.resultCount !== 0) {
      writer.uint32(16).uint32(message.resultCount);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseModerationGetQueue {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseModerationGetQueue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.startTimestamp = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.resultCount = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseModerationGetQueue {
    return {
      startTimestamp: isSet(object.startTimestamp) ? globalThis.Number(object.startTimestamp) : 0,
      resultCount: isSet(object.resultCount) ? globalThis.Number(object.resultCount) : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseModerationGetQueue): unknown {
    const obj: any = {};
    if (message.startTimestamp !== undefined && message.startTimestamp !== 0) {
      obj.startTimestamp = Math.round(message.startTimestamp);
    }
    if (message.resultCount !== undefined && message.resultCount !== 0) {
      obj.resultCount = Math.round(message.resultCount);
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgClientToGCShowcaseModerationGetQueue>): CMsgClientToGCShowcaseModerationGetQueue {
    return CMsgClientToGCShowcaseModerationGetQueue.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgClientToGCShowcaseModerationGetQueue>): CMsgClientToGCShowcaseModerationGetQueue {
    const message = createBaseCMsgClientToGCShowcaseModerationGetQueue();
    message.startTimestamp = object.startTimestamp ?? 0;
    message.resultCount = object.resultCount ?? 0;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseModerationGetQueueResponse(): CMsgClientToGCShowcaseModerationGetQueueResponse {
  return { response: 0, showcases: [] };
}

export const CMsgClientToGCShowcaseModerationGetQueueResponse = {
  encode(
    message: CMsgClientToGCShowcaseModerationGetQueueResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    for (const v of message.showcases) {
      CMsgShowcaseModerationInfo.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseModerationGetQueueResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseModerationGetQueueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.showcases.push(CMsgShowcaseModerationInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseModerationGetQueueResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCShowcaseModerationGetQueueResponse_EResponseFromJSON(object.response)
        : 0,
      showcases: globalThis.Array.isArray(object?.showcases)
        ? object.showcases.map((e: any) => CMsgShowcaseModerationInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgClientToGCShowcaseModerationGetQueueResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCShowcaseModerationGetQueueResponse_EResponseToJSON(message.response);
    }
    if (message.showcases?.length) {
      obj.showcases = message.showcases.map((e) => CMsgShowcaseModerationInfo.toJSON(e));
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCShowcaseModerationGetQueueResponse>,
  ): CMsgClientToGCShowcaseModerationGetQueueResponse {
    return CMsgClientToGCShowcaseModerationGetQueueResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseModerationGetQueueResponse>,
  ): CMsgClientToGCShowcaseModerationGetQueueResponse {
    const message = createBaseCMsgClientToGCShowcaseModerationGetQueueResponse();
    message.response = object.response ?? 0;
    message.showcases = object.showcases?.map((e) => CMsgShowcaseModerationInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseModerationApplyModeration(): CMsgClientToGCShowcaseModerationApplyModeration {
  return { accountId: 0, showcaseType: 0, showcaseTimestamp: 0, approve: false };
}

export const CMsgClientToGCShowcaseModerationApplyModeration = {
  encode(
    message: CMsgClientToGCShowcaseModerationApplyModeration,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.accountId !== undefined && message.accountId !== 0) {
      writer.uint32(8).uint32(message.accountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      writer.uint32(16).int32(message.showcaseType);
    }
    if (message.showcaseTimestamp !== undefined && message.showcaseTimestamp !== 0) {
      writer.uint32(24).uint32(message.showcaseTimestamp);
    }
    if (message.approve !== undefined && message.approve !== false) {
      writer.uint32(32).bool(message.approve);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseModerationApplyModeration {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseModerationApplyModeration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.accountId = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.showcaseType = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.showcaseTimestamp = reader.uint32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.approve = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseModerationApplyModeration {
    return {
      accountId: isSet(object.accountId) ? globalThis.Number(object.accountId) : 0,
      showcaseType: isSet(object.showcaseType) ? eShowcaseTypeFromJSON(object.showcaseType) : 0,
      showcaseTimestamp: isSet(object.showcaseTimestamp) ? globalThis.Number(object.showcaseTimestamp) : 0,
      approve: isSet(object.approve) ? globalThis.Boolean(object.approve) : false,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseModerationApplyModeration): unknown {
    const obj: any = {};
    if (message.accountId !== undefined && message.accountId !== 0) {
      obj.accountId = Math.round(message.accountId);
    }
    if (message.showcaseType !== undefined && message.showcaseType !== 0) {
      obj.showcaseType = eShowcaseTypeToJSON(message.showcaseType);
    }
    if (message.showcaseTimestamp !== undefined && message.showcaseTimestamp !== 0) {
      obj.showcaseTimestamp = Math.round(message.showcaseTimestamp);
    }
    if (message.approve !== undefined && message.approve !== false) {
      obj.approve = message.approve;
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCShowcaseModerationApplyModeration>,
  ): CMsgClientToGCShowcaseModerationApplyModeration {
    return CMsgClientToGCShowcaseModerationApplyModeration.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseModerationApplyModeration>,
  ): CMsgClientToGCShowcaseModerationApplyModeration {
    const message = createBaseCMsgClientToGCShowcaseModerationApplyModeration();
    message.accountId = object.accountId ?? 0;
    message.showcaseType = object.showcaseType ?? 0;
    message.showcaseTimestamp = object.showcaseTimestamp ?? 0;
    message.approve = object.approve ?? false;
    return message;
  },
};

function createBaseCMsgClientToGCShowcaseModerationApplyModerationResponse(): CMsgClientToGCShowcaseModerationApplyModerationResponse {
  return { response: 0 };
}

export const CMsgClientToGCShowcaseModerationApplyModerationResponse = {
  encode(
    message: CMsgClientToGCShowcaseModerationApplyModerationResponse,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.response !== undefined && message.response !== 0) {
      writer.uint32(8).int32(message.response);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgClientToGCShowcaseModerationApplyModerationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgClientToGCShowcaseModerationApplyModerationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.response = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgClientToGCShowcaseModerationApplyModerationResponse {
    return {
      response: isSet(object.response)
        ? cMsgClientToGCShowcaseModerationApplyModerationResponse_EResponseFromJSON(object.response)
        : 0,
    };
  },

  toJSON(message: CMsgClientToGCShowcaseModerationApplyModerationResponse): unknown {
    const obj: any = {};
    if (message.response !== undefined && message.response !== 0) {
      obj.response = cMsgClientToGCShowcaseModerationApplyModerationResponse_EResponseToJSON(message.response);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgClientToGCShowcaseModerationApplyModerationResponse>,
  ): CMsgClientToGCShowcaseModerationApplyModerationResponse {
    return CMsgClientToGCShowcaseModerationApplyModerationResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgClientToGCShowcaseModerationApplyModerationResponse>,
  ): CMsgClientToGCShowcaseModerationApplyModerationResponse {
    const message = createBaseCMsgClientToGCShowcaseModerationApplyModerationResponse();
    message.response = object.response ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

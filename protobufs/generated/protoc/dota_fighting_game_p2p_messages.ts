// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: dota_fighting_game_p2p_messages.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export interface CMsgFightingGameGameDataFighting {
  lastAckedFrame?: number | undefined;
  playerId?: number | undefined;
  lastCrcFrame?: number | undefined;
  lastCrcValue?: number | undefined;
  now?: number | undefined;
  peerAckTime?: number | undefined;
  inputStartFrame?: number | undefined;
  inputSample: CMsgFightingGameGameDataFighting_InputSample[];
}

export interface CMsgFightingGameGameDataFighting_InputSample {
  buttonMask?: number | undefined;
}

export interface CMsgFightingGameGameDataCharacterSelect {
  cursorIndex?: number | undefined;
  selectedHeroId?: number | undefined;
  selectedStyle?: number | undefined;
  econItemRefs: CMsgFightingGameGameDataCharacterSelect_Item[];
  messageAck?: string | undefined;
  confirmedStyle?: boolean | undefined;
}

export interface CMsgFightingGameGameDataCharacterSelect_Item {
  itemDef?: number | undefined;
  styleIndex?: number | undefined;
}

export interface CMsgFightingGameGameDataLoaded {
  now?: number | undefined;
  peerAckTime?: number | undefined;
  proposedStartTime?: number | undefined;
  acceptedStartTime?: number | undefined;
}

export interface CP2PFightingGameGameData {
  state?: CP2PFightingGameGameData_EState | undefined;
  fight?: CMsgFightingGameGameDataFighting | undefined;
  characterSelect?: CMsgFightingGameGameDataCharacterSelect | undefined;
  loaded?: CMsgFightingGameGameDataLoaded | undefined;
}

export enum CP2PFightingGameGameData_EState {
  k_ChoosingCharacter = 1,
  k_Loaded = 2,
  k_Fighting = 3,
}

export function cP2PFightingGameGameData_EStateFromJSON(object: any): CP2PFightingGameGameData_EState {
  switch (object) {
    case 1:
    case "k_ChoosingCharacter":
      return CP2PFightingGameGameData_EState.k_ChoosingCharacter;
    case 2:
    case "k_Loaded":
      return CP2PFightingGameGameData_EState.k_Loaded;
    case 3:
    case "k_Fighting":
      return CP2PFightingGameGameData_EState.k_Fighting;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CP2PFightingGameGameData_EState");
  }
}

export function cP2PFightingGameGameData_EStateToJSON(object: CP2PFightingGameGameData_EState): string {
  switch (object) {
    case CP2PFightingGameGameData_EState.k_ChoosingCharacter:
      return "k_ChoosingCharacter";
    case CP2PFightingGameGameData_EState.k_Loaded:
      return "k_Loaded";
    case CP2PFightingGameGameData_EState.k_Fighting:
      return "k_Fighting";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum CP2PFightingGameGameData_EState");
  }
}

function createBaseCMsgFightingGameGameDataFighting(): CMsgFightingGameGameDataFighting {
  return {
    lastAckedFrame: 0,
    playerId: 0,
    lastCrcFrame: 0,
    lastCrcValue: 0,
    now: 0,
    peerAckTime: 0,
    inputStartFrame: 0,
    inputSample: [],
  };
}

export const CMsgFightingGameGameDataFighting = {
  encode(message: CMsgFightingGameGameDataFighting, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.lastAckedFrame !== undefined && message.lastAckedFrame !== 0) {
      writer.uint32(8).int32(message.lastAckedFrame);
    }
    if (message.playerId !== undefined && message.playerId !== 0) {
      writer.uint32(16).uint32(message.playerId);
    }
    if (message.lastCrcFrame !== undefined && message.lastCrcFrame !== 0) {
      writer.uint32(24).int32(message.lastCrcFrame);
    }
    if (message.lastCrcValue !== undefined && message.lastCrcValue !== 0) {
      writer.uint32(32).uint32(message.lastCrcValue);
    }
    if (message.now !== undefined && message.now !== 0) {
      writer.uint32(45).float(message.now);
    }
    if (message.peerAckTime !== undefined && message.peerAckTime !== 0) {
      writer.uint32(53).float(message.peerAckTime);
    }
    if (message.inputStartFrame !== undefined && message.inputStartFrame !== 0) {
      writer.uint32(56).int32(message.inputStartFrame);
    }
    for (const v of message.inputSample) {
      CMsgFightingGameGameDataFighting_InputSample.encode(v!, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgFightingGameGameDataFighting {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgFightingGameGameDataFighting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.lastAckedFrame = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.playerId = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.lastCrcFrame = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.lastCrcValue = reader.uint32();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.now = reader.float();
          continue;
        case 6:
          if (tag !== 53) {
            break;
          }

          message.peerAckTime = reader.float();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.inputStartFrame = reader.int32();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.inputSample.push(CMsgFightingGameGameDataFighting_InputSample.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgFightingGameGameDataFighting {
    return {
      lastAckedFrame: isSet(object.lastAckedFrame) ? globalThis.Number(object.lastAckedFrame) : 0,
      playerId: isSet(object.playerId) ? globalThis.Number(object.playerId) : 0,
      lastCrcFrame: isSet(object.lastCrcFrame) ? globalThis.Number(object.lastCrcFrame) : 0,
      lastCrcValue: isSet(object.lastCrcValue) ? globalThis.Number(object.lastCrcValue) : 0,
      now: isSet(object.now) ? globalThis.Number(object.now) : 0,
      peerAckTime: isSet(object.peerAckTime) ? globalThis.Number(object.peerAckTime) : 0,
      inputStartFrame: isSet(object.inputStartFrame) ? globalThis.Number(object.inputStartFrame) : 0,
      inputSample: globalThis.Array.isArray(object?.inputSample)
        ? object.inputSample.map((e: any) => CMsgFightingGameGameDataFighting_InputSample.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CMsgFightingGameGameDataFighting): unknown {
    const obj: any = {};
    if (message.lastAckedFrame !== undefined && message.lastAckedFrame !== 0) {
      obj.lastAckedFrame = Math.round(message.lastAckedFrame);
    }
    if (message.playerId !== undefined && message.playerId !== 0) {
      obj.playerId = Math.round(message.playerId);
    }
    if (message.lastCrcFrame !== undefined && message.lastCrcFrame !== 0) {
      obj.lastCrcFrame = Math.round(message.lastCrcFrame);
    }
    if (message.lastCrcValue !== undefined && message.lastCrcValue !== 0) {
      obj.lastCrcValue = Math.round(message.lastCrcValue);
    }
    if (message.now !== undefined && message.now !== 0) {
      obj.now = message.now;
    }
    if (message.peerAckTime !== undefined && message.peerAckTime !== 0) {
      obj.peerAckTime = message.peerAckTime;
    }
    if (message.inputStartFrame !== undefined && message.inputStartFrame !== 0) {
      obj.inputStartFrame = Math.round(message.inputStartFrame);
    }
    if (message.inputSample?.length) {
      obj.inputSample = message.inputSample.map((e) => CMsgFightingGameGameDataFighting_InputSample.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgFightingGameGameDataFighting>): CMsgFightingGameGameDataFighting {
    return CMsgFightingGameGameDataFighting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgFightingGameGameDataFighting>): CMsgFightingGameGameDataFighting {
    const message = createBaseCMsgFightingGameGameDataFighting();
    message.lastAckedFrame = object.lastAckedFrame ?? 0;
    message.playerId = object.playerId ?? 0;
    message.lastCrcFrame = object.lastCrcFrame ?? 0;
    message.lastCrcValue = object.lastCrcValue ?? 0;
    message.now = object.now ?? 0;
    message.peerAckTime = object.peerAckTime ?? 0;
    message.inputStartFrame = object.inputStartFrame ?? 0;
    message.inputSample = object.inputSample?.map((e) => CMsgFightingGameGameDataFighting_InputSample.fromPartial(e)) ||
      [];
    return message;
  },
};

function createBaseCMsgFightingGameGameDataFighting_InputSample(): CMsgFightingGameGameDataFighting_InputSample {
  return { buttonMask: 0 };
}

export const CMsgFightingGameGameDataFighting_InputSample = {
  encode(message: CMsgFightingGameGameDataFighting_InputSample, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.buttonMask !== undefined && message.buttonMask !== 0) {
      writer.uint32(8).uint32(message.buttonMask);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgFightingGameGameDataFighting_InputSample {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgFightingGameGameDataFighting_InputSample();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.buttonMask = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgFightingGameGameDataFighting_InputSample {
    return { buttonMask: isSet(object.buttonMask) ? globalThis.Number(object.buttonMask) : 0 };
  },

  toJSON(message: CMsgFightingGameGameDataFighting_InputSample): unknown {
    const obj: any = {};
    if (message.buttonMask !== undefined && message.buttonMask !== 0) {
      obj.buttonMask = Math.round(message.buttonMask);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgFightingGameGameDataFighting_InputSample>,
  ): CMsgFightingGameGameDataFighting_InputSample {
    return CMsgFightingGameGameDataFighting_InputSample.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgFightingGameGameDataFighting_InputSample>,
  ): CMsgFightingGameGameDataFighting_InputSample {
    const message = createBaseCMsgFightingGameGameDataFighting_InputSample();
    message.buttonMask = object.buttonMask ?? 0;
    return message;
  },
};

function createBaseCMsgFightingGameGameDataCharacterSelect(): CMsgFightingGameGameDataCharacterSelect {
  return {
    cursorIndex: 0,
    selectedHeroId: 0,
    selectedStyle: 0,
    econItemRefs: [],
    messageAck: "0",
    confirmedStyle: false,
  };
}

export const CMsgFightingGameGameDataCharacterSelect = {
  encode(message: CMsgFightingGameGameDataCharacterSelect, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.cursorIndex !== undefined && message.cursorIndex !== 0) {
      writer.uint32(8).uint32(message.cursorIndex);
    }
    if (message.selectedHeroId !== undefined && message.selectedHeroId !== 0) {
      writer.uint32(16).int32(message.selectedHeroId);
    }
    if (message.selectedStyle !== undefined && message.selectedStyle !== 0) {
      writer.uint32(24).uint32(message.selectedStyle);
    }
    for (const v of message.econItemRefs) {
      CMsgFightingGameGameDataCharacterSelect_Item.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.messageAck !== undefined && message.messageAck !== "0") {
      writer.uint32(40).int64(message.messageAck);
    }
    if (message.confirmedStyle !== undefined && message.confirmedStyle !== false) {
      writer.uint32(48).bool(message.confirmedStyle);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgFightingGameGameDataCharacterSelect {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgFightingGameGameDataCharacterSelect();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.cursorIndex = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.selectedHeroId = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.selectedStyle = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.econItemRefs.push(CMsgFightingGameGameDataCharacterSelect_Item.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.messageAck = longToString(reader.int64() as Long);
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.confirmedStyle = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgFightingGameGameDataCharacterSelect {
    return {
      cursorIndex: isSet(object.cursorIndex) ? globalThis.Number(object.cursorIndex) : 0,
      selectedHeroId: isSet(object.selectedHeroId) ? globalThis.Number(object.selectedHeroId) : 0,
      selectedStyle: isSet(object.selectedStyle) ? globalThis.Number(object.selectedStyle) : 0,
      econItemRefs: globalThis.Array.isArray(object?.econItemRefs)
        ? object.econItemRefs.map((e: any) => CMsgFightingGameGameDataCharacterSelect_Item.fromJSON(e))
        : [],
      messageAck: isSet(object.messageAck) ? globalThis.String(object.messageAck) : "0",
      confirmedStyle: isSet(object.confirmedStyle) ? globalThis.Boolean(object.confirmedStyle) : false,
    };
  },

  toJSON(message: CMsgFightingGameGameDataCharacterSelect): unknown {
    const obj: any = {};
    if (message.cursorIndex !== undefined && message.cursorIndex !== 0) {
      obj.cursorIndex = Math.round(message.cursorIndex);
    }
    if (message.selectedHeroId !== undefined && message.selectedHeroId !== 0) {
      obj.selectedHeroId = Math.round(message.selectedHeroId);
    }
    if (message.selectedStyle !== undefined && message.selectedStyle !== 0) {
      obj.selectedStyle = Math.round(message.selectedStyle);
    }
    if (message.econItemRefs?.length) {
      obj.econItemRefs = message.econItemRefs.map((e) => CMsgFightingGameGameDataCharacterSelect_Item.toJSON(e));
    }
    if (message.messageAck !== undefined && message.messageAck !== "0") {
      obj.messageAck = message.messageAck;
    }
    if (message.confirmedStyle !== undefined && message.confirmedStyle !== false) {
      obj.confirmedStyle = message.confirmedStyle;
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgFightingGameGameDataCharacterSelect>): CMsgFightingGameGameDataCharacterSelect {
    return CMsgFightingGameGameDataCharacterSelect.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgFightingGameGameDataCharacterSelect>): CMsgFightingGameGameDataCharacterSelect {
    const message = createBaseCMsgFightingGameGameDataCharacterSelect();
    message.cursorIndex = object.cursorIndex ?? 0;
    message.selectedHeroId = object.selectedHeroId ?? 0;
    message.selectedStyle = object.selectedStyle ?? 0;
    message.econItemRefs =
      object.econItemRefs?.map((e) => CMsgFightingGameGameDataCharacterSelect_Item.fromPartial(e)) || [];
    message.messageAck = object.messageAck ?? "0";
    message.confirmedStyle = object.confirmedStyle ?? false;
    return message;
  },
};

function createBaseCMsgFightingGameGameDataCharacterSelect_Item(): CMsgFightingGameGameDataCharacterSelect_Item {
  return { itemDef: 0, styleIndex: 255 };
}

export const CMsgFightingGameGameDataCharacterSelect_Item = {
  encode(message: CMsgFightingGameGameDataCharacterSelect_Item, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.itemDef !== undefined && message.itemDef !== 0) {
      writer.uint32(8).uint32(message.itemDef);
    }
    if (message.styleIndex !== undefined && message.styleIndex !== 255) {
      writer.uint32(16).uint32(message.styleIndex);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgFightingGameGameDataCharacterSelect_Item {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgFightingGameGameDataCharacterSelect_Item();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.itemDef = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.styleIndex = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgFightingGameGameDataCharacterSelect_Item {
    return {
      itemDef: isSet(object.itemDef) ? globalThis.Number(object.itemDef) : 0,
      styleIndex: isSet(object.styleIndex) ? globalThis.Number(object.styleIndex) : 255,
    };
  },

  toJSON(message: CMsgFightingGameGameDataCharacterSelect_Item): unknown {
    const obj: any = {};
    if (message.itemDef !== undefined && message.itemDef !== 0) {
      obj.itemDef = Math.round(message.itemDef);
    }
    if (message.styleIndex !== undefined && message.styleIndex !== 255) {
      obj.styleIndex = Math.round(message.styleIndex);
    }
    return obj;
  },

  create(
    base?: DeepPartial<CMsgFightingGameGameDataCharacterSelect_Item>,
  ): CMsgFightingGameGameDataCharacterSelect_Item {
    return CMsgFightingGameGameDataCharacterSelect_Item.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CMsgFightingGameGameDataCharacterSelect_Item>,
  ): CMsgFightingGameGameDataCharacterSelect_Item {
    const message = createBaseCMsgFightingGameGameDataCharacterSelect_Item();
    message.itemDef = object.itemDef ?? 0;
    message.styleIndex = object.styleIndex ?? 255;
    return message;
  },
};

function createBaseCMsgFightingGameGameDataLoaded(): CMsgFightingGameGameDataLoaded {
  return { now: 0, peerAckTime: 0, proposedStartTime: 0, acceptedStartTime: 0 };
}

export const CMsgFightingGameGameDataLoaded = {
  encode(message: CMsgFightingGameGameDataLoaded, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.now !== undefined && message.now !== 0) {
      writer.uint32(13).float(message.now);
    }
    if (message.peerAckTime !== undefined && message.peerAckTime !== 0) {
      writer.uint32(21).float(message.peerAckTime);
    }
    if (message.proposedStartTime !== undefined && message.proposedStartTime !== 0) {
      writer.uint32(29).float(message.proposedStartTime);
    }
    if (message.acceptedStartTime !== undefined && message.acceptedStartTime !== 0) {
      writer.uint32(37).float(message.acceptedStartTime);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CMsgFightingGameGameDataLoaded {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCMsgFightingGameGameDataLoaded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 13) {
            break;
          }

          message.now = reader.float();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.peerAckTime = reader.float();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.proposedStartTime = reader.float();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.acceptedStartTime = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CMsgFightingGameGameDataLoaded {
    return {
      now: isSet(object.now) ? globalThis.Number(object.now) : 0,
      peerAckTime: isSet(object.peerAckTime) ? globalThis.Number(object.peerAckTime) : 0,
      proposedStartTime: isSet(object.proposedStartTime) ? globalThis.Number(object.proposedStartTime) : 0,
      acceptedStartTime: isSet(object.acceptedStartTime) ? globalThis.Number(object.acceptedStartTime) : 0,
    };
  },

  toJSON(message: CMsgFightingGameGameDataLoaded): unknown {
    const obj: any = {};
    if (message.now !== undefined && message.now !== 0) {
      obj.now = message.now;
    }
    if (message.peerAckTime !== undefined && message.peerAckTime !== 0) {
      obj.peerAckTime = message.peerAckTime;
    }
    if (message.proposedStartTime !== undefined && message.proposedStartTime !== 0) {
      obj.proposedStartTime = message.proposedStartTime;
    }
    if (message.acceptedStartTime !== undefined && message.acceptedStartTime !== 0) {
      obj.acceptedStartTime = message.acceptedStartTime;
    }
    return obj;
  },

  create(base?: DeepPartial<CMsgFightingGameGameDataLoaded>): CMsgFightingGameGameDataLoaded {
    return CMsgFightingGameGameDataLoaded.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CMsgFightingGameGameDataLoaded>): CMsgFightingGameGameDataLoaded {
    const message = createBaseCMsgFightingGameGameDataLoaded();
    message.now = object.now ?? 0;
    message.peerAckTime = object.peerAckTime ?? 0;
    message.proposedStartTime = object.proposedStartTime ?? 0;
    message.acceptedStartTime = object.acceptedStartTime ?? 0;
    return message;
  },
};

function createBaseCP2PFightingGameGameData(): CP2PFightingGameGameData {
  return { state: 1, fight: undefined, characterSelect: undefined, loaded: undefined };
}

export const CP2PFightingGameGameData = {
  encode(message: CP2PFightingGameGameData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.state !== undefined && message.state !== 1) {
      writer.uint32(8).int32(message.state);
    }
    if (message.fight !== undefined) {
      CMsgFightingGameGameDataFighting.encode(message.fight, writer.uint32(18).fork()).ldelim();
    }
    if (message.characterSelect !== undefined) {
      CMsgFightingGameGameDataCharacterSelect.encode(message.characterSelect, writer.uint32(26).fork()).ldelim();
    }
    if (message.loaded !== undefined) {
      CMsgFightingGameGameDataLoaded.encode(message.loaded, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CP2PFightingGameGameData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCP2PFightingGameGameData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fight = CMsgFightingGameGameDataFighting.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.characterSelect = CMsgFightingGameGameDataCharacterSelect.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.loaded = CMsgFightingGameGameDataLoaded.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CP2PFightingGameGameData {
    return {
      state: isSet(object.state) ? cP2PFightingGameGameData_EStateFromJSON(object.state) : 1,
      fight: isSet(object.fight) ? CMsgFightingGameGameDataFighting.fromJSON(object.fight) : undefined,
      characterSelect: isSet(object.characterSelect)
        ? CMsgFightingGameGameDataCharacterSelect.fromJSON(object.characterSelect)
        : undefined,
      loaded: isSet(object.loaded) ? CMsgFightingGameGameDataLoaded.fromJSON(object.loaded) : undefined,
    };
  },

  toJSON(message: CP2PFightingGameGameData): unknown {
    const obj: any = {};
    if (message.state !== undefined && message.state !== 1) {
      obj.state = cP2PFightingGameGameData_EStateToJSON(message.state);
    }
    if (message.fight !== undefined) {
      obj.fight = CMsgFightingGameGameDataFighting.toJSON(message.fight);
    }
    if (message.characterSelect !== undefined) {
      obj.characterSelect = CMsgFightingGameGameDataCharacterSelect.toJSON(message.characterSelect);
    }
    if (message.loaded !== undefined) {
      obj.loaded = CMsgFightingGameGameDataLoaded.toJSON(message.loaded);
    }
    return obj;
  },

  create(base?: DeepPartial<CP2PFightingGameGameData>): CP2PFightingGameGameData {
    return CP2PFightingGameGameData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CP2PFightingGameGameData>): CP2PFightingGameGameData {
    const message = createBaseCP2PFightingGameGameData();
    message.state = object.state ?? 1;
    message.fight = (object.fight !== undefined && object.fight !== null)
      ? CMsgFightingGameGameDataFighting.fromPartial(object.fight)
      : undefined;
    message.characterSelect = (object.characterSelect !== undefined && object.characterSelect !== null)
      ? CMsgFightingGameGameDataCharacterSelect.fromPartial(object.characterSelect)
      : undefined;
    message.loaded = (object.loaded !== undefined && object.loaded !== null)
      ? CMsgFightingGameGameDataLoaded.fromPartial(object.loaded)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

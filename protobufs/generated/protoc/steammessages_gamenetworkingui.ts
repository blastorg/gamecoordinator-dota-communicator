// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: steammessages_gamenetworkingui.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { CMsgSteamDatagramP2PRoutingSummary } from "./steamdatagram_messages_sdr";
import { CMsgSteamDatagramConnectionQuality } from "./steamnetworkingsockets_messages";

export interface CGameNetworkingUIGlobalState {
}

export interface CGameNetworkingUIConnectionState {
  connectionKey?: string | undefined;
  appid?: number | undefined;
  connectionIdLocal?: number | undefined;
  identityLocal?: string | undefined;
  identityRemote?: string | undefined;
  connectionState?: number | undefined;
  startTime?: number | undefined;
  closeTime?: number | undefined;
  closeReason?: number | undefined;
  closeMessage?: string | undefined;
  statusLocToken?: string | undefined;
  transportKind?: number | undefined;
  sdrpopidLocal?: string | undefined;
  sdrpopidRemote?: string | undefined;
  addressRemote?: string | undefined;
  p2pRouting?: CMsgSteamDatagramP2PRoutingSummary | undefined;
  pingInterior?: number | undefined;
  pingRemoteFront?: number | undefined;
  pingDefaultInternetRoute?: number | undefined;
  e2eQualityLocal?: CMsgSteamDatagramConnectionQuality | undefined;
  e2eQualityRemote?: CMsgSteamDatagramConnectionQuality | undefined;
  e2eQualityRemoteInstantaneousTime?: string | undefined;
  e2eQualityRemoteLifetimeTime?: string | undefined;
  frontQualityLocal?: CMsgSteamDatagramConnectionQuality | undefined;
  frontQualityRemote?: CMsgSteamDatagramConnectionQuality | undefined;
  frontQualityRemoteInstantaneousTime?: string | undefined;
  frontQualityRemoteLifetimeTime?: string | undefined;
}

export interface CGameNetworkingUIMessage {
  connectionState: CGameNetworkingUIConnectionState[];
}

export interface CGameNetworkingUIConnectionSummary {
  transportKind?: number | undefined;
  connectionState?: number | undefined;
  sdrpopLocal?: string | undefined;
  sdrpopRemote?: string | undefined;
  pingMs?: number | undefined;
  packetLoss?: number | undefined;
  pingDefaultInternetRoute?: number | undefined;
  ipWasShared?: boolean | undefined;
}

export interface CGameNetworkingUIAppSummary {
  appid?: number | undefined;
  ipWasSharedWithFriend?: boolean | undefined;
  ipWasSharedWithNonfriend?: boolean | undefined;
  activeConnections?: number | undefined;
  mainCxn?: CGameNetworkingUIConnectionSummary | undefined;
}

function createBaseCGameNetworkingUIGlobalState(): CGameNetworkingUIGlobalState {
  return {};
}

export const CGameNetworkingUIGlobalState = {
  encode(_: CGameNetworkingUIGlobalState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CGameNetworkingUIGlobalState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCGameNetworkingUIGlobalState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CGameNetworkingUIGlobalState {
    return {};
  },

  toJSON(_: CGameNetworkingUIGlobalState): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CGameNetworkingUIGlobalState>): CGameNetworkingUIGlobalState {
    return CGameNetworkingUIGlobalState.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CGameNetworkingUIGlobalState>): CGameNetworkingUIGlobalState {
    const message = createBaseCGameNetworkingUIGlobalState();
    return message;
  },
};

function createBaseCGameNetworkingUIConnectionState(): CGameNetworkingUIConnectionState {
  return {
    connectionKey: "",
    appid: 0,
    connectionIdLocal: 0,
    identityLocal: "",
    identityRemote: "",
    connectionState: 0,
    startTime: 0,
    closeTime: 0,
    closeReason: 0,
    closeMessage: "",
    statusLocToken: "",
    transportKind: 0,
    sdrpopidLocal: "",
    sdrpopidRemote: "",
    addressRemote: "",
    p2pRouting: undefined,
    pingInterior: 0,
    pingRemoteFront: 0,
    pingDefaultInternetRoute: 0,
    e2eQualityLocal: undefined,
    e2eQualityRemote: undefined,
    e2eQualityRemoteInstantaneousTime: "0",
    e2eQualityRemoteLifetimeTime: "0",
    frontQualityLocal: undefined,
    frontQualityRemote: undefined,
    frontQualityRemoteInstantaneousTime: "0",
    frontQualityRemoteLifetimeTime: "0",
  };
}

export const CGameNetworkingUIConnectionState = {
  encode(message: CGameNetworkingUIConnectionState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.connectionKey !== undefined && message.connectionKey !== "") {
      writer.uint32(10).string(message.connectionKey);
    }
    if (message.appid !== undefined && message.appid !== 0) {
      writer.uint32(16).uint32(message.appid);
    }
    if (message.connectionIdLocal !== undefined && message.connectionIdLocal !== 0) {
      writer.uint32(29).fixed32(message.connectionIdLocal);
    }
    if (message.identityLocal !== undefined && message.identityLocal !== "") {
      writer.uint32(34).string(message.identityLocal);
    }
    if (message.identityRemote !== undefined && message.identityRemote !== "") {
      writer.uint32(42).string(message.identityRemote);
    }
    if (message.connectionState !== undefined && message.connectionState !== 0) {
      writer.uint32(80).uint32(message.connectionState);
    }
    if (message.startTime !== undefined && message.startTime !== 0) {
      writer.uint32(96).uint32(message.startTime);
    }
    if (message.closeTime !== undefined && message.closeTime !== 0) {
      writer.uint32(104).uint32(message.closeTime);
    }
    if (message.closeReason !== undefined && message.closeReason !== 0) {
      writer.uint32(112).uint32(message.closeReason);
    }
    if (message.closeMessage !== undefined && message.closeMessage !== "") {
      writer.uint32(122).string(message.closeMessage);
    }
    if (message.statusLocToken !== undefined && message.statusLocToken !== "") {
      writer.uint32(130).string(message.statusLocToken);
    }
    if (message.transportKind !== undefined && message.transportKind !== 0) {
      writer.uint32(160).uint32(message.transportKind);
    }
    if (message.sdrpopidLocal !== undefined && message.sdrpopidLocal !== "") {
      writer.uint32(170).string(message.sdrpopidLocal);
    }
    if (message.sdrpopidRemote !== undefined && message.sdrpopidRemote !== "") {
      writer.uint32(178).string(message.sdrpopidRemote);
    }
    if (message.addressRemote !== undefined && message.addressRemote !== "") {
      writer.uint32(186).string(message.addressRemote);
    }
    if (message.p2pRouting !== undefined) {
      CMsgSteamDatagramP2PRoutingSummary.encode(message.p2pRouting, writer.uint32(194).fork()).ldelim();
    }
    if (message.pingInterior !== undefined && message.pingInterior !== 0) {
      writer.uint32(200).uint32(message.pingInterior);
    }
    if (message.pingRemoteFront !== undefined && message.pingRemoteFront !== 0) {
      writer.uint32(208).uint32(message.pingRemoteFront);
    }
    if (message.pingDefaultInternetRoute !== undefined && message.pingDefaultInternetRoute !== 0) {
      writer.uint32(216).uint32(message.pingDefaultInternetRoute);
    }
    if (message.e2eQualityLocal !== undefined) {
      CMsgSteamDatagramConnectionQuality.encode(message.e2eQualityLocal, writer.uint32(242).fork()).ldelim();
    }
    if (message.e2eQualityRemote !== undefined) {
      CMsgSteamDatagramConnectionQuality.encode(message.e2eQualityRemote, writer.uint32(250).fork()).ldelim();
    }
    if (message.e2eQualityRemoteInstantaneousTime !== undefined && message.e2eQualityRemoteInstantaneousTime !== "0") {
      writer.uint32(256).uint64(message.e2eQualityRemoteInstantaneousTime);
    }
    if (message.e2eQualityRemoteLifetimeTime !== undefined && message.e2eQualityRemoteLifetimeTime !== "0") {
      writer.uint32(264).uint64(message.e2eQualityRemoteLifetimeTime);
    }
    if (message.frontQualityLocal !== undefined) {
      CMsgSteamDatagramConnectionQuality.encode(message.frontQualityLocal, writer.uint32(322).fork()).ldelim();
    }
    if (message.frontQualityRemote !== undefined) {
      CMsgSteamDatagramConnectionQuality.encode(message.frontQualityRemote, writer.uint32(330).fork()).ldelim();
    }
    if (
      message.frontQualityRemoteInstantaneousTime !== undefined && message.frontQualityRemoteInstantaneousTime !== "0"
    ) {
      writer.uint32(336).uint64(message.frontQualityRemoteInstantaneousTime);
    }
    if (message.frontQualityRemoteLifetimeTime !== undefined && message.frontQualityRemoteLifetimeTime !== "0") {
      writer.uint32(344).uint64(message.frontQualityRemoteLifetimeTime);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CGameNetworkingUIConnectionState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCGameNetworkingUIConnectionState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connectionKey = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.appid = reader.uint32();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.connectionIdLocal = reader.fixed32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.identityLocal = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.identityRemote = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.connectionState = reader.uint32();
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.startTime = reader.uint32();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.closeTime = reader.uint32();
          continue;
        case 14:
          if (tag !== 112) {
            break;
          }

          message.closeReason = reader.uint32();
          continue;
        case 15:
          if (tag !== 122) {
            break;
          }

          message.closeMessage = reader.string();
          continue;
        case 16:
          if (tag !== 130) {
            break;
          }

          message.statusLocToken = reader.string();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.transportKind = reader.uint32();
          continue;
        case 21:
          if (tag !== 170) {
            break;
          }

          message.sdrpopidLocal = reader.string();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.sdrpopidRemote = reader.string();
          continue;
        case 23:
          if (tag !== 186) {
            break;
          }

          message.addressRemote = reader.string();
          continue;
        case 24:
          if (tag !== 194) {
            break;
          }

          message.p2pRouting = CMsgSteamDatagramP2PRoutingSummary.decode(reader, reader.uint32());
          continue;
        case 25:
          if (tag !== 200) {
            break;
          }

          message.pingInterior = reader.uint32();
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.pingRemoteFront = reader.uint32();
          continue;
        case 27:
          if (tag !== 216) {
            break;
          }

          message.pingDefaultInternetRoute = reader.uint32();
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.e2eQualityLocal = CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
          continue;
        case 31:
          if (tag !== 250) {
            break;
          }

          message.e2eQualityRemote = CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
          continue;
        case 32:
          if (tag !== 256) {
            break;
          }

          message.e2eQualityRemoteInstantaneousTime = longToString(reader.uint64() as Long);
          continue;
        case 33:
          if (tag !== 264) {
            break;
          }

          message.e2eQualityRemoteLifetimeTime = longToString(reader.uint64() as Long);
          continue;
        case 40:
          if (tag !== 322) {
            break;
          }

          message.frontQualityLocal = CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
          continue;
        case 41:
          if (tag !== 330) {
            break;
          }

          message.frontQualityRemote = CMsgSteamDatagramConnectionQuality.decode(reader, reader.uint32());
          continue;
        case 42:
          if (tag !== 336) {
            break;
          }

          message.frontQualityRemoteInstantaneousTime = longToString(reader.uint64() as Long);
          continue;
        case 43:
          if (tag !== 344) {
            break;
          }

          message.frontQualityRemoteLifetimeTime = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CGameNetworkingUIConnectionState {
    return {
      connectionKey: isSet(object.connectionKey) ? globalThis.String(object.connectionKey) : "",
      appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
      connectionIdLocal: isSet(object.connectionIdLocal) ? globalThis.Number(object.connectionIdLocal) : 0,
      identityLocal: isSet(object.identityLocal) ? globalThis.String(object.identityLocal) : "",
      identityRemote: isSet(object.identityRemote) ? globalThis.String(object.identityRemote) : "",
      connectionState: isSet(object.connectionState) ? globalThis.Number(object.connectionState) : 0,
      startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : 0,
      closeTime: isSet(object.closeTime) ? globalThis.Number(object.closeTime) : 0,
      closeReason: isSet(object.closeReason) ? globalThis.Number(object.closeReason) : 0,
      closeMessage: isSet(object.closeMessage) ? globalThis.String(object.closeMessage) : "",
      statusLocToken: isSet(object.statusLocToken) ? globalThis.String(object.statusLocToken) : "",
      transportKind: isSet(object.transportKind) ? globalThis.Number(object.transportKind) : 0,
      sdrpopidLocal: isSet(object.sdrpopidLocal) ? globalThis.String(object.sdrpopidLocal) : "",
      sdrpopidRemote: isSet(object.sdrpopidRemote) ? globalThis.String(object.sdrpopidRemote) : "",
      addressRemote: isSet(object.addressRemote) ? globalThis.String(object.addressRemote) : "",
      p2pRouting: isSet(object.p2pRouting) ? CMsgSteamDatagramP2PRoutingSummary.fromJSON(object.p2pRouting) : undefined,
      pingInterior: isSet(object.pingInterior) ? globalThis.Number(object.pingInterior) : 0,
      pingRemoteFront: isSet(object.pingRemoteFront) ? globalThis.Number(object.pingRemoteFront) : 0,
      pingDefaultInternetRoute: isSet(object.pingDefaultInternetRoute)
        ? globalThis.Number(object.pingDefaultInternetRoute)
        : 0,
      e2eQualityLocal: isSet(object.e2eQualityLocal)
        ? CMsgSteamDatagramConnectionQuality.fromJSON(object.e2eQualityLocal)
        : undefined,
      e2eQualityRemote: isSet(object.e2eQualityRemote)
        ? CMsgSteamDatagramConnectionQuality.fromJSON(object.e2eQualityRemote)
        : undefined,
      e2eQualityRemoteInstantaneousTime: isSet(object.e2eQualityRemoteInstantaneousTime)
        ? globalThis.String(object.e2eQualityRemoteInstantaneousTime)
        : "0",
      e2eQualityRemoteLifetimeTime: isSet(object.e2eQualityRemoteLifetimeTime)
        ? globalThis.String(object.e2eQualityRemoteLifetimeTime)
        : "0",
      frontQualityLocal: isSet(object.frontQualityLocal)
        ? CMsgSteamDatagramConnectionQuality.fromJSON(object.frontQualityLocal)
        : undefined,
      frontQualityRemote: isSet(object.frontQualityRemote)
        ? CMsgSteamDatagramConnectionQuality.fromJSON(object.frontQualityRemote)
        : undefined,
      frontQualityRemoteInstantaneousTime: isSet(object.frontQualityRemoteInstantaneousTime)
        ? globalThis.String(object.frontQualityRemoteInstantaneousTime)
        : "0",
      frontQualityRemoteLifetimeTime: isSet(object.frontQualityRemoteLifetimeTime)
        ? globalThis.String(object.frontQualityRemoteLifetimeTime)
        : "0",
    };
  },

  toJSON(message: CGameNetworkingUIConnectionState): unknown {
    const obj: any = {};
    if (message.connectionKey !== undefined && message.connectionKey !== "") {
      obj.connectionKey = message.connectionKey;
    }
    if (message.appid !== undefined && message.appid !== 0) {
      obj.appid = Math.round(message.appid);
    }
    if (message.connectionIdLocal !== undefined && message.connectionIdLocal !== 0) {
      obj.connectionIdLocal = Math.round(message.connectionIdLocal);
    }
    if (message.identityLocal !== undefined && message.identityLocal !== "") {
      obj.identityLocal = message.identityLocal;
    }
    if (message.identityRemote !== undefined && message.identityRemote !== "") {
      obj.identityRemote = message.identityRemote;
    }
    if (message.connectionState !== undefined && message.connectionState !== 0) {
      obj.connectionState = Math.round(message.connectionState);
    }
    if (message.startTime !== undefined && message.startTime !== 0) {
      obj.startTime = Math.round(message.startTime);
    }
    if (message.closeTime !== undefined && message.closeTime !== 0) {
      obj.closeTime = Math.round(message.closeTime);
    }
    if (message.closeReason !== undefined && message.closeReason !== 0) {
      obj.closeReason = Math.round(message.closeReason);
    }
    if (message.closeMessage !== undefined && message.closeMessage !== "") {
      obj.closeMessage = message.closeMessage;
    }
    if (message.statusLocToken !== undefined && message.statusLocToken !== "") {
      obj.statusLocToken = message.statusLocToken;
    }
    if (message.transportKind !== undefined && message.transportKind !== 0) {
      obj.transportKind = Math.round(message.transportKind);
    }
    if (message.sdrpopidLocal !== undefined && message.sdrpopidLocal !== "") {
      obj.sdrpopidLocal = message.sdrpopidLocal;
    }
    if (message.sdrpopidRemote !== undefined && message.sdrpopidRemote !== "") {
      obj.sdrpopidRemote = message.sdrpopidRemote;
    }
    if (message.addressRemote !== undefined && message.addressRemote !== "") {
      obj.addressRemote = message.addressRemote;
    }
    if (message.p2pRouting !== undefined) {
      obj.p2pRouting = CMsgSteamDatagramP2PRoutingSummary.toJSON(message.p2pRouting);
    }
    if (message.pingInterior !== undefined && message.pingInterior !== 0) {
      obj.pingInterior = Math.round(message.pingInterior);
    }
    if (message.pingRemoteFront !== undefined && message.pingRemoteFront !== 0) {
      obj.pingRemoteFront = Math.round(message.pingRemoteFront);
    }
    if (message.pingDefaultInternetRoute !== undefined && message.pingDefaultInternetRoute !== 0) {
      obj.pingDefaultInternetRoute = Math.round(message.pingDefaultInternetRoute);
    }
    if (message.e2eQualityLocal !== undefined) {
      obj.e2eQualityLocal = CMsgSteamDatagramConnectionQuality.toJSON(message.e2eQualityLocal);
    }
    if (message.e2eQualityRemote !== undefined) {
      obj.e2eQualityRemote = CMsgSteamDatagramConnectionQuality.toJSON(message.e2eQualityRemote);
    }
    if (message.e2eQualityRemoteInstantaneousTime !== undefined && message.e2eQualityRemoteInstantaneousTime !== "0") {
      obj.e2eQualityRemoteInstantaneousTime = message.e2eQualityRemoteInstantaneousTime;
    }
    if (message.e2eQualityRemoteLifetimeTime !== undefined && message.e2eQualityRemoteLifetimeTime !== "0") {
      obj.e2eQualityRemoteLifetimeTime = message.e2eQualityRemoteLifetimeTime;
    }
    if (message.frontQualityLocal !== undefined) {
      obj.frontQualityLocal = CMsgSteamDatagramConnectionQuality.toJSON(message.frontQualityLocal);
    }
    if (message.frontQualityRemote !== undefined) {
      obj.frontQualityRemote = CMsgSteamDatagramConnectionQuality.toJSON(message.frontQualityRemote);
    }
    if (
      message.frontQualityRemoteInstantaneousTime !== undefined && message.frontQualityRemoteInstantaneousTime !== "0"
    ) {
      obj.frontQualityRemoteInstantaneousTime = message.frontQualityRemoteInstantaneousTime;
    }
    if (message.frontQualityRemoteLifetimeTime !== undefined && message.frontQualityRemoteLifetimeTime !== "0") {
      obj.frontQualityRemoteLifetimeTime = message.frontQualityRemoteLifetimeTime;
    }
    return obj;
  },

  create(base?: DeepPartial<CGameNetworkingUIConnectionState>): CGameNetworkingUIConnectionState {
    return CGameNetworkingUIConnectionState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CGameNetworkingUIConnectionState>): CGameNetworkingUIConnectionState {
    const message = createBaseCGameNetworkingUIConnectionState();
    message.connectionKey = object.connectionKey ?? "";
    message.appid = object.appid ?? 0;
    message.connectionIdLocal = object.connectionIdLocal ?? 0;
    message.identityLocal = object.identityLocal ?? "";
    message.identityRemote = object.identityRemote ?? "";
    message.connectionState = object.connectionState ?? 0;
    message.startTime = object.startTime ?? 0;
    message.closeTime = object.closeTime ?? 0;
    message.closeReason = object.closeReason ?? 0;
    message.closeMessage = object.closeMessage ?? "";
    message.statusLocToken = object.statusLocToken ?? "";
    message.transportKind = object.transportKind ?? 0;
    message.sdrpopidLocal = object.sdrpopidLocal ?? "";
    message.sdrpopidRemote = object.sdrpopidRemote ?? "";
    message.addressRemote = object.addressRemote ?? "";
    message.p2pRouting = (object.p2pRouting !== undefined && object.p2pRouting !== null)
      ? CMsgSteamDatagramP2PRoutingSummary.fromPartial(object.p2pRouting)
      : undefined;
    message.pingInterior = object.pingInterior ?? 0;
    message.pingRemoteFront = object.pingRemoteFront ?? 0;
    message.pingDefaultInternetRoute = object.pingDefaultInternetRoute ?? 0;
    message.e2eQualityLocal = (object.e2eQualityLocal !== undefined && object.e2eQualityLocal !== null)
      ? CMsgSteamDatagramConnectionQuality.fromPartial(object.e2eQualityLocal)
      : undefined;
    message.e2eQualityRemote = (object.e2eQualityRemote !== undefined && object.e2eQualityRemote !== null)
      ? CMsgSteamDatagramConnectionQuality.fromPartial(object.e2eQualityRemote)
      : undefined;
    message.e2eQualityRemoteInstantaneousTime = object.e2eQualityRemoteInstantaneousTime ?? "0";
    message.e2eQualityRemoteLifetimeTime = object.e2eQualityRemoteLifetimeTime ?? "0";
    message.frontQualityLocal = (object.frontQualityLocal !== undefined && object.frontQualityLocal !== null)
      ? CMsgSteamDatagramConnectionQuality.fromPartial(object.frontQualityLocal)
      : undefined;
    message.frontQualityRemote = (object.frontQualityRemote !== undefined && object.frontQualityRemote !== null)
      ? CMsgSteamDatagramConnectionQuality.fromPartial(object.frontQualityRemote)
      : undefined;
    message.frontQualityRemoteInstantaneousTime = object.frontQualityRemoteInstantaneousTime ?? "0";
    message.frontQualityRemoteLifetimeTime = object.frontQualityRemoteLifetimeTime ?? "0";
    return message;
  },
};

function createBaseCGameNetworkingUIMessage(): CGameNetworkingUIMessage {
  return { connectionState: [] };
}

export const CGameNetworkingUIMessage = {
  encode(message: CGameNetworkingUIMessage, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.connectionState) {
      CGameNetworkingUIConnectionState.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CGameNetworkingUIMessage {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCGameNetworkingUIMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.connectionState.push(CGameNetworkingUIConnectionState.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CGameNetworkingUIMessage {
    return {
      connectionState: globalThis.Array.isArray(object?.connectionState)
        ? object.connectionState.map((e: any) => CGameNetworkingUIConnectionState.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CGameNetworkingUIMessage): unknown {
    const obj: any = {};
    if (message.connectionState?.length) {
      obj.connectionState = message.connectionState.map((e) => CGameNetworkingUIConnectionState.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CGameNetworkingUIMessage>): CGameNetworkingUIMessage {
    return CGameNetworkingUIMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CGameNetworkingUIMessage>): CGameNetworkingUIMessage {
    const message = createBaseCGameNetworkingUIMessage();
    message.connectionState = object.connectionState?.map((e) => CGameNetworkingUIConnectionState.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCGameNetworkingUIConnectionSummary(): CGameNetworkingUIConnectionSummary {
  return {
    transportKind: 0,
    connectionState: 0,
    sdrpopLocal: "",
    sdrpopRemote: "",
    pingMs: 0,
    packetLoss: 0,
    pingDefaultInternetRoute: 0,
    ipWasShared: false,
  };
}

export const CGameNetworkingUIConnectionSummary = {
  encode(message: CGameNetworkingUIConnectionSummary, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.transportKind !== undefined && message.transportKind !== 0) {
      writer.uint32(8).uint32(message.transportKind);
    }
    if (message.connectionState !== undefined && message.connectionState !== 0) {
      writer.uint32(64).uint32(message.connectionState);
    }
    if (message.sdrpopLocal !== undefined && message.sdrpopLocal !== "") {
      writer.uint32(18).string(message.sdrpopLocal);
    }
    if (message.sdrpopRemote !== undefined && message.sdrpopRemote !== "") {
      writer.uint32(26).string(message.sdrpopRemote);
    }
    if (message.pingMs !== undefined && message.pingMs !== 0) {
      writer.uint32(32).uint32(message.pingMs);
    }
    if (message.packetLoss !== undefined && message.packetLoss !== 0) {
      writer.uint32(45).float(message.packetLoss);
    }
    if (message.pingDefaultInternetRoute !== undefined && message.pingDefaultInternetRoute !== 0) {
      writer.uint32(48).uint32(message.pingDefaultInternetRoute);
    }
    if (message.ipWasShared !== undefined && message.ipWasShared !== false) {
      writer.uint32(56).bool(message.ipWasShared);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CGameNetworkingUIConnectionSummary {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCGameNetworkingUIConnectionSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.transportKind = reader.uint32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.connectionState = reader.uint32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sdrpopLocal = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.sdrpopRemote = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.pingMs = reader.uint32();
          continue;
        case 5:
          if (tag !== 45) {
            break;
          }

          message.packetLoss = reader.float();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.pingDefaultInternetRoute = reader.uint32();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.ipWasShared = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CGameNetworkingUIConnectionSummary {
    return {
      transportKind: isSet(object.transportKind) ? globalThis.Number(object.transportKind) : 0,
      connectionState: isSet(object.connectionState) ? globalThis.Number(object.connectionState) : 0,
      sdrpopLocal: isSet(object.sdrpopLocal) ? globalThis.String(object.sdrpopLocal) : "",
      sdrpopRemote: isSet(object.sdrpopRemote) ? globalThis.String(object.sdrpopRemote) : "",
      pingMs: isSet(object.pingMs) ? globalThis.Number(object.pingMs) : 0,
      packetLoss: isSet(object.packetLoss) ? globalThis.Number(object.packetLoss) : 0,
      pingDefaultInternetRoute: isSet(object.pingDefaultInternetRoute)
        ? globalThis.Number(object.pingDefaultInternetRoute)
        : 0,
      ipWasShared: isSet(object.ipWasShared) ? globalThis.Boolean(object.ipWasShared) : false,
    };
  },

  toJSON(message: CGameNetworkingUIConnectionSummary): unknown {
    const obj: any = {};
    if (message.transportKind !== undefined && message.transportKind !== 0) {
      obj.transportKind = Math.round(message.transportKind);
    }
    if (message.connectionState !== undefined && message.connectionState !== 0) {
      obj.connectionState = Math.round(message.connectionState);
    }
    if (message.sdrpopLocal !== undefined && message.sdrpopLocal !== "") {
      obj.sdrpopLocal = message.sdrpopLocal;
    }
    if (message.sdrpopRemote !== undefined && message.sdrpopRemote !== "") {
      obj.sdrpopRemote = message.sdrpopRemote;
    }
    if (message.pingMs !== undefined && message.pingMs !== 0) {
      obj.pingMs = Math.round(message.pingMs);
    }
    if (message.packetLoss !== undefined && message.packetLoss !== 0) {
      obj.packetLoss = message.packetLoss;
    }
    if (message.pingDefaultInternetRoute !== undefined && message.pingDefaultInternetRoute !== 0) {
      obj.pingDefaultInternetRoute = Math.round(message.pingDefaultInternetRoute);
    }
    if (message.ipWasShared !== undefined && message.ipWasShared !== false) {
      obj.ipWasShared = message.ipWasShared;
    }
    return obj;
  },

  create(base?: DeepPartial<CGameNetworkingUIConnectionSummary>): CGameNetworkingUIConnectionSummary {
    return CGameNetworkingUIConnectionSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CGameNetworkingUIConnectionSummary>): CGameNetworkingUIConnectionSummary {
    const message = createBaseCGameNetworkingUIConnectionSummary();
    message.transportKind = object.transportKind ?? 0;
    message.connectionState = object.connectionState ?? 0;
    message.sdrpopLocal = object.sdrpopLocal ?? "";
    message.sdrpopRemote = object.sdrpopRemote ?? "";
    message.pingMs = object.pingMs ?? 0;
    message.packetLoss = object.packetLoss ?? 0;
    message.pingDefaultInternetRoute = object.pingDefaultInternetRoute ?? 0;
    message.ipWasShared = object.ipWasShared ?? false;
    return message;
  },
};

function createBaseCGameNetworkingUIAppSummary(): CGameNetworkingUIAppSummary {
  return {
    appid: 0,
    ipWasSharedWithFriend: false,
    ipWasSharedWithNonfriend: false,
    activeConnections: 0,
    mainCxn: undefined,
  };
}

export const CGameNetworkingUIAppSummary = {
  encode(message: CGameNetworkingUIAppSummary, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appid !== undefined && message.appid !== 0) {
      writer.uint32(8).uint32(message.appid);
    }
    if (message.ipWasSharedWithFriend !== undefined && message.ipWasSharedWithFriend !== false) {
      writer.uint32(80).bool(message.ipWasSharedWithFriend);
    }
    if (message.ipWasSharedWithNonfriend !== undefined && message.ipWasSharedWithNonfriend !== false) {
      writer.uint32(88).bool(message.ipWasSharedWithNonfriend);
    }
    if (message.activeConnections !== undefined && message.activeConnections !== 0) {
      writer.uint32(160).uint32(message.activeConnections);
    }
    if (message.mainCxn !== undefined) {
      CGameNetworkingUIConnectionSummary.encode(message.mainCxn, writer.uint32(242).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CGameNetworkingUIAppSummary {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCGameNetworkingUIAppSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.appid = reader.uint32();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.ipWasSharedWithFriend = reader.bool();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.ipWasSharedWithNonfriend = reader.bool();
          continue;
        case 20:
          if (tag !== 160) {
            break;
          }

          message.activeConnections = reader.uint32();
          continue;
        case 30:
          if (tag !== 242) {
            break;
          }

          message.mainCxn = CGameNetworkingUIConnectionSummary.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CGameNetworkingUIAppSummary {
    return {
      appid: isSet(object.appid) ? globalThis.Number(object.appid) : 0,
      ipWasSharedWithFriend: isSet(object.ipWasSharedWithFriend)
        ? globalThis.Boolean(object.ipWasSharedWithFriend)
        : false,
      ipWasSharedWithNonfriend: isSet(object.ipWasSharedWithNonfriend)
        ? globalThis.Boolean(object.ipWasSharedWithNonfriend)
        : false,
      activeConnections: isSet(object.activeConnections) ? globalThis.Number(object.activeConnections) : 0,
      mainCxn: isSet(object.mainCxn) ? CGameNetworkingUIConnectionSummary.fromJSON(object.mainCxn) : undefined,
    };
  },

  toJSON(message: CGameNetworkingUIAppSummary): unknown {
    const obj: any = {};
    if (message.appid !== undefined && message.appid !== 0) {
      obj.appid = Math.round(message.appid);
    }
    if (message.ipWasSharedWithFriend !== undefined && message.ipWasSharedWithFriend !== false) {
      obj.ipWasSharedWithFriend = message.ipWasSharedWithFriend;
    }
    if (message.ipWasSharedWithNonfriend !== undefined && message.ipWasSharedWithNonfriend !== false) {
      obj.ipWasSharedWithNonfriend = message.ipWasSharedWithNonfriend;
    }
    if (message.activeConnections !== undefined && message.activeConnections !== 0) {
      obj.activeConnections = Math.round(message.activeConnections);
    }
    if (message.mainCxn !== undefined) {
      obj.mainCxn = CGameNetworkingUIConnectionSummary.toJSON(message.mainCxn);
    }
    return obj;
  },

  create(base?: DeepPartial<CGameNetworkingUIAppSummary>): CGameNetworkingUIAppSummary {
    return CGameNetworkingUIAppSummary.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CGameNetworkingUIAppSummary>): CGameNetworkingUIAppSummary {
    const message = createBaseCGameNetworkingUIAppSummary();
    message.appid = object.appid ?? 0;
    message.ipWasSharedWithFriend = object.ipWasSharedWithFriend ?? false;
    message.ipWasSharedWithNonfriend = object.ipWasSharedWithNonfriend ?? false;
    message.activeConnections = object.activeConnections ?? 0;
    message.mainCxn = (object.mainCxn !== undefined && object.mainCxn !== null)
      ? CGameNetworkingUIConnectionSummary.fromPartial(object.mainCxn)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

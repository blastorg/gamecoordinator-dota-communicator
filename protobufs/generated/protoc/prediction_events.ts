// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.26.1
// source: prediction_events.proto

/* eslint-disable */
import _m0 from "protobufjs/minimal";
import { CMsgQAngle, CMsgVector } from "./networkbasetypes";

export enum EBasePredictionEvents {
  BPE_StringCommand = 128,
  BPE_Teleport = 130,
  BPE_Diagnostic = 16384,
}

export function eBasePredictionEventsFromJSON(object: any): EBasePredictionEvents {
  switch (object) {
    case 128:
    case "BPE_StringCommand":
      return EBasePredictionEvents.BPE_StringCommand;
    case 130:
    case "BPE_Teleport":
      return EBasePredictionEvents.BPE_Teleport;
    case 16384:
    case "BPE_Diagnostic":
      return EBasePredictionEvents.BPE_Diagnostic;
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EBasePredictionEvents");
  }
}

export function eBasePredictionEventsToJSON(object: EBasePredictionEvents): string {
  switch (object) {
    case EBasePredictionEvents.BPE_StringCommand:
      return "BPE_StringCommand";
    case EBasePredictionEvents.BPE_Teleport:
      return "BPE_Teleport";
    case EBasePredictionEvents.BPE_Diagnostic:
      return "BPE_Diagnostic";
    default:
      throw new globalThis.Error("Unrecognized enum value " + object + " for enum EBasePredictionEvents");
  }
}

export interface CPredictionEventTeleport {
  origin?: CMsgVector | undefined;
  angles?: CMsgQAngle | undefined;
  dropToGroundRange?: number | undefined;
}

export interface CPredictionEventStringCommand {
  command?: string | undefined;
}

export interface CPredictionEventDiagnostic {
  id?: number | undefined;
  requestedSync?: number | undefined;
  requestedPlayerIndex?: number | undefined;
  executionSync: number[];
}

function createBaseCPredictionEventTeleport(): CPredictionEventTeleport {
  return { origin: undefined, angles: undefined, dropToGroundRange: 0 };
}

export const CPredictionEventTeleport = {
  encode(message: CPredictionEventTeleport, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.origin !== undefined) {
      CMsgVector.encode(message.origin, writer.uint32(10).fork()).ldelim();
    }
    if (message.angles !== undefined) {
      CMsgQAngle.encode(message.angles, writer.uint32(18).fork()).ldelim();
    }
    if (message.dropToGroundRange !== undefined && message.dropToGroundRange !== 0) {
      writer.uint32(29).float(message.dropToGroundRange);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPredictionEventTeleport {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPredictionEventTeleport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.origin = CMsgVector.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.angles = CMsgQAngle.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.dropToGroundRange = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPredictionEventTeleport {
    return {
      origin: isSet(object.origin) ? CMsgVector.fromJSON(object.origin) : undefined,
      angles: isSet(object.angles) ? CMsgQAngle.fromJSON(object.angles) : undefined,
      dropToGroundRange: isSet(object.dropToGroundRange) ? globalThis.Number(object.dropToGroundRange) : 0,
    };
  },

  toJSON(message: CPredictionEventTeleport): unknown {
    const obj: any = {};
    if (message.origin !== undefined) {
      obj.origin = CMsgVector.toJSON(message.origin);
    }
    if (message.angles !== undefined) {
      obj.angles = CMsgQAngle.toJSON(message.angles);
    }
    if (message.dropToGroundRange !== undefined && message.dropToGroundRange !== 0) {
      obj.dropToGroundRange = message.dropToGroundRange;
    }
    return obj;
  },

  create(base?: DeepPartial<CPredictionEventTeleport>): CPredictionEventTeleport {
    return CPredictionEventTeleport.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPredictionEventTeleport>): CPredictionEventTeleport {
    const message = createBaseCPredictionEventTeleport();
    message.origin = (object.origin !== undefined && object.origin !== null)
      ? CMsgVector.fromPartial(object.origin)
      : undefined;
    message.angles = (object.angles !== undefined && object.angles !== null)
      ? CMsgQAngle.fromPartial(object.angles)
      : undefined;
    message.dropToGroundRange = object.dropToGroundRange ?? 0;
    return message;
  },
};

function createBaseCPredictionEventStringCommand(): CPredictionEventStringCommand {
  return { command: "" };
}

export const CPredictionEventStringCommand = {
  encode(message: CPredictionEventStringCommand, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.command !== undefined && message.command !== "") {
      writer.uint32(10).string(message.command);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPredictionEventStringCommand {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPredictionEventStringCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.command = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPredictionEventStringCommand {
    return { command: isSet(object.command) ? globalThis.String(object.command) : "" };
  },

  toJSON(message: CPredictionEventStringCommand): unknown {
    const obj: any = {};
    if (message.command !== undefined && message.command !== "") {
      obj.command = message.command;
    }
    return obj;
  },

  create(base?: DeepPartial<CPredictionEventStringCommand>): CPredictionEventStringCommand {
    return CPredictionEventStringCommand.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPredictionEventStringCommand>): CPredictionEventStringCommand {
    const message = createBaseCPredictionEventStringCommand();
    message.command = object.command ?? "";
    return message;
  },
};

function createBaseCPredictionEventDiagnostic(): CPredictionEventDiagnostic {
  return { id: 0, requestedSync: 0, requestedPlayerIndex: 0, executionSync: [] };
}

export const CPredictionEventDiagnostic = {
  encode(message: CPredictionEventDiagnostic, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined && message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.requestedSync !== undefined && message.requestedSync !== 0) {
      writer.uint32(16).uint32(message.requestedSync);
    }
    if (message.requestedPlayerIndex !== undefined && message.requestedPlayerIndex !== 0) {
      writer.uint32(24).uint32(message.requestedPlayerIndex);
    }
    writer.uint32(34).fork();
    for (const v of message.executionSync) {
      writer.uint32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPredictionEventDiagnostic {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPredictionEventDiagnostic();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.requestedSync = reader.uint32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.requestedPlayerIndex = reader.uint32();
          continue;
        case 4:
          if (tag === 32) {
            message.executionSync.push(reader.uint32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.executionSync.push(reader.uint32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPredictionEventDiagnostic {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      requestedSync: isSet(object.requestedSync) ? globalThis.Number(object.requestedSync) : 0,
      requestedPlayerIndex: isSet(object.requestedPlayerIndex) ? globalThis.Number(object.requestedPlayerIndex) : 0,
      executionSync: globalThis.Array.isArray(object?.executionSync)
        ? object.executionSync.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: CPredictionEventDiagnostic): unknown {
    const obj: any = {};
    if (message.id !== undefined && message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.requestedSync !== undefined && message.requestedSync !== 0) {
      obj.requestedSync = Math.round(message.requestedSync);
    }
    if (message.requestedPlayerIndex !== undefined && message.requestedPlayerIndex !== 0) {
      obj.requestedPlayerIndex = Math.round(message.requestedPlayerIndex);
    }
    if (message.executionSync?.length) {
      obj.executionSync = message.executionSync.map((e) => Math.round(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CPredictionEventDiagnostic>): CPredictionEventDiagnostic {
    return CPredictionEventDiagnostic.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CPredictionEventDiagnostic>): CPredictionEventDiagnostic {
    const message = createBaseCPredictionEventDiagnostic();
    message.id = object.id ?? 0;
    message.requestedSync = object.requestedSync ?? 0;
    message.requestedPlayerIndex = object.requestedPlayerIndex ?? 0;
    message.executionSync = object.executionSync?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

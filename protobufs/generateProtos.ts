import { execSync } from "child_process";
import { mkdirSync, existsSync, readdirSync } from "fs";
import { basename, extname, join, resolve } from "path";
import { promises as fs } from "fs";

const tsProtoBin = resolve(__dirname, "../../node_modules/.bin/protoc-gen-ts_proto");
const outDir = resolve(__dirname, "generated/protoc");
const protoDirs = [resolve(__dirname, "Protobufs/dota2")];
const outputFileLocation = resolve(__dirname, "generated/protoc/index.ts");

// Function to compile a single .proto file
const compileProtoFile = (file: string) => {
  const command = `
    protoc \
    --proto_path="${protoDirs.join(" ")}" \
    --plugin="protoc-gen-ts_proto=${tsProtoBin}" \
    --ts_proto_out="${outDir}" \
    --ts_proto_opt=env=node \
    --ts_proto_opt=esModuleInterop=true \
    --ts_proto_opt=forceLong=string \
    --ts_proto_opt=exportCommonSymbols=false \
    --ts_proto_opt=unrecognizedEnum=false \
    --ts_proto_opt=useExactTypes=false \
    "${file}"
  `;

  try {
    execSync(command, { stdio: "inherit" });
  } catch (error) {
    console.error(`Failed to compile ${file}:`, error);
    process.exit(1);
  }
};

async function createExportFile(files: string[]) {
  // TODO I'm going to regret this, cause I hate the exports of the current module

  const header = `// DO NOT MANUALLY MODIFY THIS FILE\n// Generated by build-protos\n\n`;
  await fs.writeFile(outputFileLocation, header);

  for (const file of files) {
    if (file.endsWith("valveextensions.proto") || file.endsWith("steammessages_base.proto")) {
      continue;
    }
    const exportStatement = `export * from './${basename(file.replace(".proto", ""), ".ts")}';\n`;
    await fs.appendFile(outputFileLocation, exportStatement);
  }
}

// Compile each .proto file individually
const main = async () => {
  // Ensure the output directory exists
  if (!existsSync(outDir)) {
    mkdirSync(outDir, { recursive: true });
  }

  // Function to get all .proto files from a directory
  const getProtoFiles = (dir: string): string[] => {
    return readdirSync(dir)
      .filter((file) => extname(file) === ".proto")
      .map((file) => join(dir, file));
  };

  // Collect all .proto files from the specified directories
  const protoFiles = protoDirs.flatMap(getProtoFiles);

  if (protoFiles.length === 0) {
    console.log("No .proto files found.");
    process.exit(0);
  }

  protoFiles.forEach((file) => console.log(file));

  // Ensure protoc is available
  try {
    execSync("protoc --version", { stdio: "inherit" });
  } catch (error) {
    console.error("protoc is not available in your PATH. Please install it and make sure it's available in your PATH.");
    process.exit(1);
  }
  protoFiles.forEach(compileProtoFile);
  await createExportFile(protoFiles);
};

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
console.log("Protobuf compilation completed.");
